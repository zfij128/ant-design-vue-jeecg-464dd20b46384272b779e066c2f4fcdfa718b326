{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\views\\system\\modules\\SysFillRuleModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\views\\system\\modules\\SysFillRuleModal.vue","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js","mtime":1665642924058}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { httpAction } from '@/api/manage'\nimport { validateDuplicateValue } from '@/utils/util'\n\nexport default {\n  name: 'SysFillRuleModal',\n  components: {},\n  data() {\n    return {\n      title: '操作',\n      visible: false,\n      model: {},\n      labelCol: { xs: { span: 24 }, sm: { span: 5 } },\n      wrapperCol: { xs: { span: 24 }, sm: { span: 16 } },\n\n      confirmLoading: false,\n      validatorRules: {\n        ruleName: [{ required: true, message: '规则名称不能为空' }],\n        ruleCode: [\n          { required: true, message: '规则Code不能为空' },\n          { validator: (rule, value, callback) => validateDuplicateValue('sys_fill_rule', 'rule_code', value, this.model.id, callback) }\n        ],\n        ruleClass: [{ required: true, message: '规则实现类不能为空' }],\n        ruleParams: [{\n          validator: (rule, value, callback) => {\n            //update-begin---author:wangshuai ---date:20220509  for：[VUEN-907]规则参数不是必填，如果为空不检验即可------------\n            if (!value) {\n              callback()\n            }\n            //update-end---author:wangshuai ---date:20220509  for：[VUEN-907]规则参数不是必填，如果为空不检验即可--------------\n\n            try {\n              let json = JSON.parse(value)\n              if (json instanceof Array) {\n                callback('只能传递JSON对象，不能传递JSON数组')\n              } else if (json instanceof Object) {\n                callback()\n              } else {\n                callback('请输入JSON字符串')\n              }\n            } catch {\n              callback('请输入JSON字符串')\n            }\n          }\n        }],\n      },\n      url: {\n        add: '/sys/fillRule/add',\n        edit: '/sys/fillRule/edit',\n      },\n    }\n  },\n  computed: {\n    disabledCode() {\n      return !!this.model.id\n    }\n  },\n  created() {\n  },\n  methods: {\n    add() {\n      this.edit({})\n    },\n    edit(record) {\n      this.visible = true\n      this.$nextTick(() => {\n        this.$refs.form.resetFields()\n        this.model = Object.assign({}, record)\n      })\n    },\n    close() {\n      this.$emit('close')\n      this.visible = false\n    },\n    handleOk() {\n      const that = this\n      // 触发表单验证\n      this.$refs.form.validate((ok, err) => {\n        if (ok) {\n          that.confirmLoading = true\n          let httpUrl = this.url.add, method = 'post'\n          if (this.model.id) {\n            httpUrl = this.url.edit\n            method = 'put'\n          }\n\n          httpAction(httpUrl, this.model, method).then((res) => {\n            if (res.success) {\n              that.$message.success(res.message)\n              that.$emit('ok')\n              that.close()\n            } else {\n              that.$message.warning(res.message)\n            }\n          }).finally(() => {\n            that.confirmLoading = false\n          })\n        }\n      })\n    },\n    handleCancel() {\n      this.close()\n    }\n\n  }\n}\n",{"version":3,"sources":["SysFillRuleModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"SysFillRuleModal.vue","sourceRoot":"src/views/system/modules","sourcesContent":["<template>\n  <a-modal\n    :title=\"title\"\n    :width=\"800\"\n    :visible=\"visible\"\n    :maskClosable=\"false\"\n    :confirmLoading=\"confirmLoading\"\n    @ok=\"handleOk\"\n    @cancel=\"handleCancel\"\n    cancelText=\"关闭\">\n\n    <a-spin :spinning=\"confirmLoading\">\n      <a-form-model ref=\"form\" :model=\"model\" :rules=\"validatorRules\">\n\n        <a-form-model-item :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\" label=\"规则名称\" prop=\"ruleName\">\n          <a-input placeholder=\"请输入规则名称\" v-model=\"model.ruleName\"/>\n        </a-form-model-item>\n        <a-form-model-item :labelCol=\"labelCol\"  :wrapperCol=\"wrapperCol\" label=\"规则Code\"  prop=\"ruleCode\" >\n          <a-input placeholder=\"请输入规则Code\" :disabled=\"disabledCode\" v-model=\"model.ruleCode\"/>\n        </a-form-model-item>\n        <a-form-model-item :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\" label=\"规则实现类\" prop=\"ruleClass\" >\n          <a-input placeholder=\"请输入规则实现类\" v-model=\"model.ruleClass\"/>\n        </a-form-model-item>\n        <a-form-model-item :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\" label=\"规则参数\" prop=\"ruleParams\">\n          <a-textarea placeholder=\"请输入规则参数\" :rows=\"5\" v-model=\"model.ruleParams\"/>\n        </a-form-model-item>\n\n      </a-form-model>\n    </a-spin>\n  </a-modal>\n</template>\n\n<script>\n  import { httpAction } from '@/api/manage'\n  import { validateDuplicateValue } from '@/utils/util'\n\n  export default {\n    name: 'SysFillRuleModal',\n    components: {},\n    data() {\n      return {\n        title: '操作',\n        visible: false,\n        model: {},\n        labelCol: { xs: { span: 24 }, sm: { span: 5 } },\n        wrapperCol: { xs: { span: 24 }, sm: { span: 16 } },\n\n        confirmLoading: false,\n        validatorRules: {\n          ruleName: [{ required: true, message: '规则名称不能为空' }],\n          ruleCode: [\n            { required: true, message: '规则Code不能为空' },\n            { validator: (rule, value, callback) => validateDuplicateValue('sys_fill_rule', 'rule_code', value, this.model.id, callback) }\n          ],\n          ruleClass: [{ required: true, message: '规则实现类不能为空' }],\n          ruleParams: [{\n            validator: (rule, value, callback) => {\n              //update-begin---author:wangshuai ---date:20220509  for：[VUEN-907]规则参数不是必填，如果为空不检验即可------------\n              if (!value) {\n                callback()\n              }\n              //update-end---author:wangshuai ---date:20220509  for：[VUEN-907]规则参数不是必填，如果为空不检验即可--------------\n\n              try {\n                let json = JSON.parse(value)\n                if (json instanceof Array) {\n                  callback('只能传递JSON对象，不能传递JSON数组')\n                } else if (json instanceof Object) {\n                  callback()\n                } else {\n                  callback('请输入JSON字符串')\n                }\n              } catch {\n                callback('请输入JSON字符串')\n              }\n            }\n          }],\n        },\n        url: {\n          add: '/sys/fillRule/add',\n          edit: '/sys/fillRule/edit',\n        },\n      }\n    },\n    computed: {\n      disabledCode() {\n        return !!this.model.id\n      }\n    },\n    created() {\n    },\n    methods: {\n      add() {\n        this.edit({})\n      },\n      edit(record) {\n        this.visible = true\n        this.$nextTick(() => {\n          this.$refs.form.resetFields()\n          this.model = Object.assign({}, record)\n        })\n      },\n      close() {\n        this.$emit('close')\n        this.visible = false\n      },\n      handleOk() {\n        const that = this\n        // 触发表单验证\n        this.$refs.form.validate((ok, err) => {\n          if (ok) {\n            that.confirmLoading = true\n            let httpUrl = this.url.add, method = 'post'\n            if (this.model.id) {\n              httpUrl = this.url.edit\n              method = 'put'\n            }\n\n            httpAction(httpUrl, this.model, method).then((res) => {\n              if (res.success) {\n                that.$message.success(res.message)\n                that.$emit('ok')\n                that.close()\n              } else {\n                that.$message.warning(res.message)\n              }\n            }).finally(() => {\n              that.confirmLoading = false\n            })\n          }\n        })\n      },\n      handleCancel() {\n        this.close()\n      }\n\n    }\n  }\n</script>\n\n<style lang=\"less\" scoped>\n\n</style>"]}]}