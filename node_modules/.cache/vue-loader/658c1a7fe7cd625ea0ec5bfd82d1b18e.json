{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\views\\system\\modules\\SysDataSourceModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\views\\system\\modules\\SysDataSourceModal.vue","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js","mtime":1665642924058}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport pick from 'lodash.pick'\nimport { httpAction, postAction,getAction } from '@/api/manage'\nimport { validateDuplicateValue } from '@/utils/util'\n\nexport default {\n  name: 'SysDataSourceModal',\n  components: {},\n  data() {\n    return {\n      title: '操作',\n      visible: false,\n      model: {},\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 5 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n\n      confirmLoading: false,\n      form: this.$form.createForm(this),\n      validatorRules: {\n        code: {\n          validateFirst: true,\n          rules: [\n            { required: true, message: '请输入数据源编码!' },\n            {\n              validator: (rule, value, callback) => {\n                let pattern = /^[a-z|A-Z][a-z|A-Z\\d_-]{0,}$/\n                if (!pattern.test(value)) {\n                  callback('编码必须以字母开头，可包含数字、下划线、横杠')\n                } else {\n                  validateDuplicateValue('sys_data_source', 'code', value, this.model.id, callback)\n                }\n              }\n            }\n          ]\n        },\n        name: { rules: [{ required: true, message: '请输入数据源名称!' }] },\n        dbType: { rules: [{ required: true, message: '请选择数据库类型!' }] },\n        dbDriver: { rules: [{ required: true, message: '请输入驱动类!' }] },\n        dbUrl: { rules: [{ required: true, message: '请输入数据源地址!' }] },\n        dbName: { rules: [{ required: true, message: '请输入数据库名称!' }] },\n        dbUsername: { rules: [{ required: true, message: '请输入用户名!' }] },\n        dbPassword: { rules: [{ required: false, message: '请输入密码!' }] }\n      },\n      url: {\n        add: '/sys/dataSource/add',\n        edit: '/sys/dataSource/edit',\n        queryById: '/sys/dataSource/queryById',\n      },\n      dbDriverMap: {\n        // MySQL 数据库\n        '1': { dbDriver: 'com.mysql.jdbc.Driver' },\n        //MySQL5.7+ 数据库\n        '4': { dbDriver: 'com.mysql.cj.jdbc.Driver' },\n        // Oracle\n        '2': { dbDriver: 'oracle.jdbc.OracleDriver' },\n        // SQLServer 数据库\n        '3': { dbDriver: 'com.microsoft.sqlserver.jdbc.SQLServerDriver' },\n        // marialDB 数据库\n        '5': { dbDriver: 'org.mariadb.jdbc.Driver' },\n        // postgresql 数据库\n        '6': { dbDriver: 'org.postgresql.Driver' },\n        // 达梦 数据库\n        '7': { dbDriver: 'dm.jdbc.driver.DmDriver' },\n        // 人大金仓 数据库\n        '8': { dbDriver: 'com.kingbase8.Driver' },\n        // 神通 数据库\n        '9': { dbDriver: 'com.oscar.Driver' },\n        // SQLite 数据库\n        '10': { dbDriver: 'org.sqlite.JDBC' },\n        // DB2 数据库\n        '11': { dbDriver: 'com.ibm.db2.jcc.DB2Driver' },\n        // Hsqldb 数据库\n        '12': { dbDriver: 'org.hsqldb.jdbc.JDBCDriver' },\n        // Derby 数据库\n        '13': { dbDriver: 'org.apache.derby.jdbc.ClientDriver' },\n        // H2 数据库\n        '14': { dbDriver: 'org.h2.Driver' },\n        // 其他数据库\n        '15': { dbDriver: '' }\n      },\n      dbUrlMap: {\n        // MySQL 数据库\n        '1': { dbUrl: 'jdbc:mysql://127.0.0.1:3306/jeecg-boot?characterEncoding=UTF-8&useUnicode=true&useSSL=false' },\n        //MySQL5.7+ 数据库\n        '4': { dbUrl: 'jdbc:mysql://127.0.0.1:3306/jeecg-boot?characterEncoding=UTF-8&useUnicode=true&useSSL=false&tinyInt1isBit=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai' },\n        // Oracle\n        '2': { dbUrl: 'jdbc:oracle:thin:@127.0.0.1:1521:ORCL' },\n        // SQLServer 数据库\n        '3': { dbUrl: 'jdbc:sqlserver://127.0.0.1:1433;SelectMethod=cursor;DatabaseName=jeecgboot' },\n        // Mariadb 数据库\n        '5': { dbUrl: 'jdbc:mariadb://127.0.0.1:3306/jeecg-boot?characterEncoding=UTF-8&useSSL=false' },\n        // Postgresql 数据库\n        '6': { dbUrl: 'jdbc:postgresql://127.0.0.1:5432/jeecg-boot' },\n        // 达梦 数据库\n        '7': { dbUrl: 'jdbc:dm://127.0.0.1:5236/?jeecg-boot&zeroDateTimeBehavior=convertToNull&useUnicode=true&characterEncoding=utf-8' },\n        // 人大金仓 数据库\n        '8': { dbUrl: 'jdbc:kingbase8://127.0.0.1:54321/jeecg-boot' },\n        // 神通 数据库\n        '9': { dbUrl: 'jdbc:oscar://192.168.1.125:2003/jeecg-boot' },\n        // SQLite 数据库\n        '10': { dbUrl: 'jdbc:sqlite://opt/test.db' },\n        // DB2 数据库\n        '11': { dbUrl: 'jdbc:db2://127.0.0.1:50000/jeecg-boot' },\n        // Hsqldb 数据库\n        '12': { dbUrl: 'jdbc:hsqldb:hsql://127.0.0.1/jeecg-boot' },\n        // Derby 数据库\n        '13': { dbUrl: 'jdbc:derby://127.0.0.1:1527/jeecg-boot' },\n        // H2 数据库\n        '14': { dbUrl: 'jdbc:h2:tcp://127.0.0.1:8082/jeecg-boot' },\n        // 其他数据库\n        '15': { dbUrl: '' }\n      }\n    }\n  },\n  created() {\n  },\n  methods: {\n    add() {\n      this.edit({})\n    },\n    async edit(record) {\n      this.form.resetFields()\n      this.model = Object.assign({}, record)\n      //update-begin-author:liusq---date:20220705--for: 编辑时，查询获取解密后的密码 ---\n      if(record.id){\n        let res = await getAction(this.url.queryById, {id:record.id});\n        if (res.success) {\n          this.model = Object.assign({}, {...res.result})\n        }\n      }\n     //update-end-author:liusq---date:20220705--for: 编辑时，查询获取解密后的密码 ---\n      this.visible = true\n      this.$nextTick(() => {\n        this.form.setFieldsValue(pick(this.model, 'code', 'name', 'remark', 'dbType', 'dbDriver', 'dbUrl', 'dbName', 'dbUsername', 'dbPassword'))\n      })\n    },\n    close() {\n      this.$emit('close')\n      this.visible = false\n    },\n    handleOk() {\n      // 触发表单验证\n      this.form.validateFields((err, values) => {\n        if (!err) {\n          this.confirmLoading = true\n          let formData = Object.assign(this.model, values)\n          let httpUrl = this.url.add, method = 'post'\n          if (this.model.id) {\n            httpUrl = this.url.edit\n            method = 'put'\n            // 由于编码的特殊性，所以不能更改\n            formData['code'] = undefined\n          }\n          httpAction(httpUrl, formData, method).then((res) => {\n            if (res.success) {\n              this.$message.success(res.message)\n              this.$emit('ok')\n              this.close()\n            } else {\n              this.$message.warning(res.message)\n            }\n          }).finally(() => {\n            this.confirmLoading = false\n          })\n        }\n      })\n    },\n    handleCancel() {\n      this.close()\n    },\n    // 测试数据源配置是否可以正常连接\n    handleTest() {\n      let keys = ['dbType', 'dbDriver', 'dbUrl', 'dbName', 'dbUsername', 'dbPassword']\n      // 获取以上字段的值，并清除校验状态\n      let fieldsValues = this.form.getFieldsValue(keys)\n      let setFields = {}\n      keys.forEach(key => setFields[key] = { value: fieldsValues[key], errors: null })\n      // 清除校验状态，目的是可以让错误文字闪烁\n      this.form.setFields(setFields)\n      // 重新校验\n      this.$nextTick(() => {\n        this.form.validateFields(keys, (errors, values) => {\n          if (!errors) {\n            let loading = this.$message.loading('连接中……', 0)\n            postAction('/online/cgreport/api/testConnection', fieldsValues).then(res => {\n              if (res.success) {\n                this.$message.success('连接成功')\n              } else throw new Error(res.message)\n            }).catch(error => {\n              this.$warning({ title: '连接失败', content: error.message || error })\n            }).finally(() => loading())\n          }\n        })\n      })\n    },\n    // 数据库类型更改时，联动更改数据库驱动\n    handleDbTypeChange(val) {\n      let dbDriver = this.dbDriverMap[val]\n      let dbUrl = this.dbUrlMap[val]\n      if (dbDriver) {\n        this.form.setFieldsValue(dbDriver)\n      }\n      if (dbUrl) {\n        this.form.setFieldsValue(dbUrl)\n      }\n    },\n  }\n}\n",{"version":3,"sources":["SysDataSourceModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"SysDataSourceModal.vue","sourceRoot":"src/views/system/modules","sourcesContent":["<template>\n  <a-modal\n    :title=\"title\"\n    :width=\"800\"\n    :visible=\"visible\"\n    :confirmLoading=\"confirmLoading\"\n    @ok=\"handleOk\"\n    @cancel=\"handleCancel\"\n    cancelText=\"关闭\">\n\n    <a-spin :spinning=\"confirmLoading\">\n      <a-form :form=\"form\">\n\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"数据源编码\">\n          <a-input placeholder=\"请输入数据源编码\" :disabled=\"!!model.id\" v-decorator=\"['code', validatorRules.code]\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"数据源名称\">\n          <a-input placeholder=\"请输入数据源名称\" v-decorator=\"['name', validatorRules.name]\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"数据库类型\">\n          <j-dict-select-tag placeholder=\"请选择数据库类型\" dict-code=\"database_type\" triggerChange v-decorator=\"['dbType', validatorRules.dbType]\" @change=\"handleDbTypeChange\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"驱动类\">\n          <a-input placeholder=\"请输入驱动类\" v-decorator=\"['dbDriver', validatorRules.dbDriver]\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"数据源地址\">\n          <a-input placeholder=\"请输入数据源地址\" v-decorator=\"['dbUrl', validatorRules.dbUrl]\"/>\n        </a-form-item>\n       <!-- <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"数据库名称\">\n          <a-input placeholder=\"请输入数据库名称\" v-decorator=\"['dbName', validatorRules.dbName]\"/>\n        </a-form-item>-->\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"用户名\">\n          <a-input placeholder=\"请输入用户名\" v-decorator=\"['dbUsername', validatorRules.dbUsername]\"/>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"密码\">\n          <a-row :gutter=\"8\">\n            <a-col :span=\"21\">\n              <a-input-password placeholder=\"请输入密码\" v-decorator=\"['dbPassword', validatorRules.dbPassword]\"/>\n            </a-col>\n            <a-col :span=\"3\">\n              <a-button type=\"primary\" size=\"small\" style=\"width: 100%\" @click=\"handleTest\">测试</a-button>\n            </a-col>\n          </a-row>\n        </a-form-item>\n        <a-form-item\n          :labelCol=\"labelCol\"\n          :wrapperCol=\"wrapperCol\"\n          label=\"备注\">\n          <a-textarea placeholder=\"请输入备注\" v-decorator=\"['remark', {}]\"/>\n        </a-form-item>\n      </a-form>\n    </a-spin>\n  </a-modal>\n</template>\n\n<script>\n  import pick from 'lodash.pick'\n  import { httpAction, postAction,getAction } from '@/api/manage'\n  import { validateDuplicateValue } from '@/utils/util'\n\n  export default {\n    name: 'SysDataSourceModal',\n    components: {},\n    data() {\n      return {\n        title: '操作',\n        visible: false,\n        model: {},\n        labelCol: {\n          xs: { span: 24 },\n          sm: { span: 5 },\n        },\n        wrapperCol: {\n          xs: { span: 24 },\n          sm: { span: 16 },\n        },\n\n        confirmLoading: false,\n        form: this.$form.createForm(this),\n        validatorRules: {\n          code: {\n            validateFirst: true,\n            rules: [\n              { required: true, message: '请输入数据源编码!' },\n              {\n                validator: (rule, value, callback) => {\n                  let pattern = /^[a-z|A-Z][a-z|A-Z\\d_-]{0,}$/\n                  if (!pattern.test(value)) {\n                    callback('编码必须以字母开头，可包含数字、下划线、横杠')\n                  } else {\n                    validateDuplicateValue('sys_data_source', 'code', value, this.model.id, callback)\n                  }\n                }\n              }\n            ]\n          },\n          name: { rules: [{ required: true, message: '请输入数据源名称!' }] },\n          dbType: { rules: [{ required: true, message: '请选择数据库类型!' }] },\n          dbDriver: { rules: [{ required: true, message: '请输入驱动类!' }] },\n          dbUrl: { rules: [{ required: true, message: '请输入数据源地址!' }] },\n          dbName: { rules: [{ required: true, message: '请输入数据库名称!' }] },\n          dbUsername: { rules: [{ required: true, message: '请输入用户名!' }] },\n          dbPassword: { rules: [{ required: false, message: '请输入密码!' }] }\n        },\n        url: {\n          add: '/sys/dataSource/add',\n          edit: '/sys/dataSource/edit',\n          queryById: '/sys/dataSource/queryById',\n        },\n        dbDriverMap: {\n          // MySQL 数据库\n          '1': { dbDriver: 'com.mysql.jdbc.Driver' },\n          //MySQL5.7+ 数据库\n          '4': { dbDriver: 'com.mysql.cj.jdbc.Driver' },\n          // Oracle\n          '2': { dbDriver: 'oracle.jdbc.OracleDriver' },\n          // SQLServer 数据库\n          '3': { dbDriver: 'com.microsoft.sqlserver.jdbc.SQLServerDriver' },\n          // marialDB 数据库\n          '5': { dbDriver: 'org.mariadb.jdbc.Driver' },\n          // postgresql 数据库\n          '6': { dbDriver: 'org.postgresql.Driver' },\n          // 达梦 数据库\n          '7': { dbDriver: 'dm.jdbc.driver.DmDriver' },\n          // 人大金仓 数据库\n          '8': { dbDriver: 'com.kingbase8.Driver' },\n          // 神通 数据库\n          '9': { dbDriver: 'com.oscar.Driver' },\n          // SQLite 数据库\n          '10': { dbDriver: 'org.sqlite.JDBC' },\n          // DB2 数据库\n          '11': { dbDriver: 'com.ibm.db2.jcc.DB2Driver' },\n          // Hsqldb 数据库\n          '12': { dbDriver: 'org.hsqldb.jdbc.JDBCDriver' },\n          // Derby 数据库\n          '13': { dbDriver: 'org.apache.derby.jdbc.ClientDriver' },\n          // H2 数据库\n          '14': { dbDriver: 'org.h2.Driver' },\n          // 其他数据库\n          '15': { dbDriver: '' }\n        },\n        dbUrlMap: {\n          // MySQL 数据库\n          '1': { dbUrl: 'jdbc:mysql://127.0.0.1:3306/jeecg-boot?characterEncoding=UTF-8&useUnicode=true&useSSL=false' },\n          //MySQL5.7+ 数据库\n          '4': { dbUrl: 'jdbc:mysql://127.0.0.1:3306/jeecg-boot?characterEncoding=UTF-8&useUnicode=true&useSSL=false&tinyInt1isBit=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai' },\n          // Oracle\n          '2': { dbUrl: 'jdbc:oracle:thin:@127.0.0.1:1521:ORCL' },\n          // SQLServer 数据库\n          '3': { dbUrl: 'jdbc:sqlserver://127.0.0.1:1433;SelectMethod=cursor;DatabaseName=jeecgboot' },\n          // Mariadb 数据库\n          '5': { dbUrl: 'jdbc:mariadb://127.0.0.1:3306/jeecg-boot?characterEncoding=UTF-8&useSSL=false' },\n          // Postgresql 数据库\n          '6': { dbUrl: 'jdbc:postgresql://127.0.0.1:5432/jeecg-boot' },\n          // 达梦 数据库\n          '7': { dbUrl: 'jdbc:dm://127.0.0.1:5236/?jeecg-boot&zeroDateTimeBehavior=convertToNull&useUnicode=true&characterEncoding=utf-8' },\n          // 人大金仓 数据库\n          '8': { dbUrl: 'jdbc:kingbase8://127.0.0.1:54321/jeecg-boot' },\n          // 神通 数据库\n          '9': { dbUrl: 'jdbc:oscar://192.168.1.125:2003/jeecg-boot' },\n          // SQLite 数据库\n          '10': { dbUrl: 'jdbc:sqlite://opt/test.db' },\n          // DB2 数据库\n          '11': { dbUrl: 'jdbc:db2://127.0.0.1:50000/jeecg-boot' },\n          // Hsqldb 数据库\n          '12': { dbUrl: 'jdbc:hsqldb:hsql://127.0.0.1/jeecg-boot' },\n          // Derby 数据库\n          '13': { dbUrl: 'jdbc:derby://127.0.0.1:1527/jeecg-boot' },\n          // H2 数据库\n          '14': { dbUrl: 'jdbc:h2:tcp://127.0.0.1:8082/jeecg-boot' },\n          // 其他数据库\n          '15': { dbUrl: '' }\n        }\n      }\n    },\n    created() {\n    },\n    methods: {\n      add() {\n        this.edit({})\n      },\n      async edit(record) {\n        this.form.resetFields()\n        this.model = Object.assign({}, record)\n        //update-begin-author:liusq---date:20220705--for: 编辑时，查询获取解密后的密码 ---\n        if(record.id){\n          let res = await getAction(this.url.queryById, {id:record.id});\n          if (res.success) {\n            this.model = Object.assign({}, {...res.result})\n          }\n        }\n       //update-end-author:liusq---date:20220705--for: 编辑时，查询获取解密后的密码 ---\n        this.visible = true\n        this.$nextTick(() => {\n          this.form.setFieldsValue(pick(this.model, 'code', 'name', 'remark', 'dbType', 'dbDriver', 'dbUrl', 'dbName', 'dbUsername', 'dbPassword'))\n        })\n      },\n      close() {\n        this.$emit('close')\n        this.visible = false\n      },\n      handleOk() {\n        // 触发表单验证\n        this.form.validateFields((err, values) => {\n          if (!err) {\n            this.confirmLoading = true\n            let formData = Object.assign(this.model, values)\n            let httpUrl = this.url.add, method = 'post'\n            if (this.model.id) {\n              httpUrl = this.url.edit\n              method = 'put'\n              // 由于编码的特殊性，所以不能更改\n              formData['code'] = undefined\n            }\n            httpAction(httpUrl, formData, method).then((res) => {\n              if (res.success) {\n                this.$message.success(res.message)\n                this.$emit('ok')\n                this.close()\n              } else {\n                this.$message.warning(res.message)\n              }\n            }).finally(() => {\n              this.confirmLoading = false\n            })\n          }\n        })\n      },\n      handleCancel() {\n        this.close()\n      },\n      // 测试数据源配置是否可以正常连接\n      handleTest() {\n        let keys = ['dbType', 'dbDriver', 'dbUrl', 'dbName', 'dbUsername', 'dbPassword']\n        // 获取以上字段的值，并清除校验状态\n        let fieldsValues = this.form.getFieldsValue(keys)\n        let setFields = {}\n        keys.forEach(key => setFields[key] = { value: fieldsValues[key], errors: null })\n        // 清除校验状态，目的是可以让错误文字闪烁\n        this.form.setFields(setFields)\n        // 重新校验\n        this.$nextTick(() => {\n          this.form.validateFields(keys, (errors, values) => {\n            if (!errors) {\n              let loading = this.$message.loading('连接中……', 0)\n              postAction('/online/cgreport/api/testConnection', fieldsValues).then(res => {\n                if (res.success) {\n                  this.$message.success('连接成功')\n                } else throw new Error(res.message)\n              }).catch(error => {\n                this.$warning({ title: '连接失败', content: error.message || error })\n              }).finally(() => loading())\n            }\n          })\n        })\n      },\n      // 数据库类型更改时，联动更改数据库驱动\n      handleDbTypeChange(val) {\n        let dbDriver = this.dbDriverMap[val]\n        let dbUrl = this.dbUrlMap[val]\n        if (dbDriver) {\n          this.form.setFieldsValue(dbDriver)\n        }\n        if (dbUrl) {\n          this.form.setFieldsValue(dbUrl)\n        }\n      },\n    }\n  }\n</script>\n\n<style lang=\"less\" scoped></style>"]}]}