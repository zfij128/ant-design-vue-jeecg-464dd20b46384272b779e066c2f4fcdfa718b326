{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\layouts\\TabLayout.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\layouts\\TabLayout.vue","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\css-loader\\index.js","mtime":1665642925383},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1665642924059},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\postcss-loader\\src\\index.js","mtime":1665642925858},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\less-loader\\dist\\cjs.js","mtime":1665642924256},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js","mtime":1665642924058}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n /*\n* The following styles are auto-applied to elements with\n* transition=\"page-transition\" when their visibility is toggled\n* by Vue.js.\n*\n* You can easily play with the page transition by editing\n* these styles.\n*/\n\n .page-transition-enter {\n   opacity: 0;\n }\n\n .page-transition-leave-active {\n   opacity: 0;\n }\n\n .page-transition-enter .page-transition-container,\n .page-transition-leave-active .page-transition-container {\n   -webkit-transform: scale(1.1);\n   transform: scale(1.1);\n }\n\n /*美化弹出Tab样式*/\n .ant-tabs-nav-container {\n   margin-top: 4px;\n }\n\n /* 修改 ant-tabs 样式 */\n .tab-layout-tabs.ant-tabs {\n   border-bottom: 1px solid #ccc;\n   border-left: 1px solid #ccc;\n   background-color: white;\n   padding: 0 20px;\n\n   .ant-tabs-bar {\n     margin: 4px 0 0;\n     border: none;\n   }\n\n }\n\n .tab-layout-tabs.ant-tabs {\n\n   &.ant-tabs-card .ant-tabs-tab {\n\n     padding: 0 24px !important;\n     background-color: white !important;\n     margin-right: 10px !important;\n\n     .ant-tabs-close-x {\n       width: 12px !important;\n       height: 12px !important;\n       opacity: 0 !important;\n       cursor: pointer !important;\n       font-size: 12px !important;\n       margin: 0 !important;\n       position: absolute;\n       top: 36%;\n       right: 6px;\n     }\n\n     &:hover .ant-tabs-close-x {\n       opacity: 1 !important;\n     }\n\n   }\n\n }\n\n .tab-layout-tabs.ant-tabs.ant-tabs-card > .ant-tabs-bar {\n   .ant-tabs-tab {\n     border: none !important;\n     border-bottom: 1px solid transparent !important;\n   }\n   .ant-tabs-tab-active {\n     border-color: @primary-color!important;\n   }\n }\n\n\n",{"version":3,"sources":["TabLayout.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TabLayout.vue","sourceRoot":"src/components/layouts","sourcesContent":["<template>\n  <global-layout @dynamicRouterShow=\"dynamicRouterShow\">\n    <!-- update-begin- author:sunjianlei --- date:20191009 --- for: 提升右键菜单的层级 -->\n    <contextmenu :itemList=\"menuItemList\" :visible.sync=\"menuVisible\" style=\"z-index: 9999;\" @select=\"onMenuSelect\"/>\n    <!-- update-end- author:sunjianlei --- date:20191009 --- for: 提升右键菜单的层级 -->\n    <a-tabs\n      @contextmenu.native=\"e => onContextmenu(e)\"\n      v-if=\"multipage\"\n      :active-key=\"activePage\"\n      class=\"tab-layout-tabs\"\n      style=\"height:52px\"\n      :hide-add=\"true\"\n      type=\"editable-card\"\n      @change=\"changePage\"\n      @tabClick=\"tabCallBack\"\n      @edit=\"editPage\">\n      <a-tab-pane :id=\"page.fullPath\" :key=\"page.fullPath\" v-for=\"page in pageList\" :closable=\"!(page.meta.title=='首页')\">\n        <span slot=\"tab\" :pagekey=\"page.fullPath\">{{ page.meta.title }}</span>\n      </a-tab-pane>\n    </a-tabs>\n    <div style=\"margin: 12px 12px 0;\">\n      <!-- update-begin-author:taoyan date:20201221 for:此处删掉transition标签 不知道为什么加上后 页面路由切换的时候即1及菜单切到2及菜单的时候 两个菜单页面会同时出现300-500秒左右 -->\n      <keep-alive v-if=\"multipage\">\n        <router-view v-if=\"reloadFlag\"/>\n      </keep-alive>\n      <template v-else>\n        <router-view v-if=\"reloadFlag\"/>\n      </template>\n      <!-- update-end-author:taoyan date:20201221 for:此处删掉transition标签 不知道为什么加上后 页面路由切换的时候即1及菜单切到2及菜单的时候 两个菜单页面会同时出现300-500秒左右 -->\n    </div>\n    <!-- update-begin-author:zyf date:20211129 for:qiankun 挂载子应用盒子 -->\n    <div id=\"content\" class=\"app-view-box\"></div>\n    <!-- update-end-author:zyf date:20211129 for: qiankun 挂载子应用盒子-->\n  </global-layout>\n</template>\n\n<script>\n  import GlobalLayout from '@/components/page/GlobalLayout'\n  import Contextmenu from '@/components/menu/Contextmenu'\n  import { mixin, mixinDevice } from '@/utils/mixin.js'\n  import { triggerWindowResizeEvent } from '@/utils/util'\n  import Vue from 'vue'\n  import { CACHE_INCLUDED_ROUTES } from '@/store/mutation-types'\n  import registerApps from \"@/qiankun\";\n\n  const indexKey = '/dashboard/analysis'\n\n  export default {\n    name: 'TabLayout',\n    components: {\n      GlobalLayout,\n      Contextmenu\n    },\n    mixins: [mixin, mixinDevice],\n    data() {\n      return {\n        pageList: [],\n        linkList: [],\n        activePage: '',\n        menuVisible: false,\n        menuItemList: [\n          { key: '4', icon: 'reload', text: '刷 新' },\n          { key: '1', icon: 'arrow-left', text: '关闭左侧' },\n          { key: '2', icon: 'arrow-right', text: '关闭右侧' },\n          { key: '3', icon: 'close', text: '关闭其它' }\n        ],\n        reloadFlag:true\n      }\n    },\n    /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用 ->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n    provide(){\n      return{\n        closeCurrent:this.closeCurrent,\n        changeTitle: this.changeTitle,\n        changeTabTitle: this.changeTabTitle,\n      }\n    },\n    /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n    computed: {\n      multipage() {\n        //判断如果是手机模式，自动切换为单页面模式\n        if (this.isMobile()) {\n          return false\n        } else {\n          return this.$store.state.app.multipage\n        }\n      }\n    },\n    created() {\n      if (this.$route.path != indexKey) {\n        this.addIndexToFirst()\n      }\n      // 复制一个route对象出来，不能影响原route\n      let currentRoute = Object.assign({}, this.$route)\n      currentRoute.meta = Object.assign({}, currentRoute.meta)\n      this.pageList.push(currentRoute)\n      this.linkList.push(currentRoute.fullPath)\n      this.activePage = currentRoute.fullPath\n    },\n    mounted() {\n      if (process.env.VUE_APP_QIANKUN == 'true') {\n        //update-begin-author:zyf date:20211129 for:qiankun 注册子应用\n        if (!window.qiankunStarted) {\n          window.qiankunStarted = true;\n          registerApps();\n        }\n        //update-end-author:zyf date:20211129 for:qiankun 注册子应用\n      }\n    },\n    watch: {\n      '$route': function(newRoute) {\n        //console.log(\"新的路由\",newRoute)\n        this.activePage = newRoute.fullPath\n        if (!this.multipage) {\n          this.linkList = [newRoute.fullPath]\n          this.pageList = [Object.assign({},newRoute)]\n        // update-begin-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\n        } else if(indexKey==newRoute.fullPath) {\n          //首页时 判断是否缓存 没有缓存 刷新之\n          if (newRoute.meta.keepAlive === false) {\n            this.routeReload()\n          }\n        // update-end-author:taoyan date:20200211 for: TASK #3368 【路由缓存】首页的缓存设置有问题，需要根据后台的路由配置来实现是否缓存\n        }else if (this.linkList.indexOf(newRoute.fullPath) < 0) {\n          this.linkList.push(newRoute.fullPath)\n          this.pageList.push(Object.assign({},newRoute))\n          //// update-begin-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍 #842\n          // if (newRoute.meta.keepAlive) {\n          //   this.routeReload()\n          // }\n          //// update-end-author:sunjianlei date:20200103 for: 如果新增的页面配置了缓存路由，那么就强制刷新一遍 #842\n        } else if (this.linkList.indexOf(newRoute.fullPath) >= 0) {\n          let oldIndex = this.linkList.indexOf(newRoute.fullPath)\n          let oldPositionRoute = this.pageList[oldIndex]\n          this.pageList.splice(oldIndex, 1, Object.assign({},newRoute,{meta:oldPositionRoute.meta}))\n        }\n      },\n      'activePage': function(key) {\n        let index = this.linkList.lastIndexOf(key)\n        let waitRouter = this.pageList[index]\n        // 【TESTA-523】修复：不允许重复跳转路由异常\n        if (waitRouter.fullPath !== this.$route.fullPath) {\n          this.$router.push(Object.assign({}, waitRouter))\n        }\n        this.changeTitle(waitRouter.meta.title)\n      },\n      'multipage': function(newVal) {\n        if(this.reloadFlag){\n          if (!newVal) {\n            this.linkList = [this.$route.fullPath]\n            this.pageList = [this.$route]\n          }\n        }\n      },\n      // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n      device() {\n        if (this.multipage && this.linkList.indexOf(indexKey) === -1) {\n          this.addIndexToFirst()\n        }\n      },\n      // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n    },\n    methods: {\n      // update-begin-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n      // 将首页添加到第一位\n      addIndexToFirst() {\n        this.pageList.splice(0, 0, {\n          name: 'dashboard-analysis',\n          path: indexKey,\n          fullPath: indexKey,\n          meta: {\n            icon: 'dashboard',\n            title: '首页'\n          }\n        })\n        this.linkList.splice(0, 0, indexKey)\n      },\n      // update-end-author:sunjianlei date:20191223 for: 修复从单页模式切换回多页模式后首页不居第一位的 BUG\n\n      // update-begin-author:sunjianlei date:20200120 for: 动态更改页面标题\n      /**\n       * 修改当前页面的窗口标题\n       * @param title 要修改的新标题\n       */\n      changeTitle(title) {\n        let projectTitle = \"云晟科技\"\n        // 首页特殊处理\n        if (this.$route.path === indexKey) {\n          document.title = projectTitle\n        } else {\n          document.title = title + ' · ' + projectTitle\n        }\n      },\n      /**\n       * 修改tab标签的标题\n       * @param title 要修改的新标题\n       * @param fullPath 要修改的路由全路径，如果不填就是修改当前路由\n       */\n      changeTabTitle(title, fullPath = '') {\n        if (title) {\n          let currentRoute = this.pageList.find((r) => r.fullPath === (fullPath ? fullPath : this.$route.fullPath))\n          if (currentRoute != null) {\n            currentRoute.meta = {...currentRoute.meta, title}\n          }\n        }\n      },\n      // update-end-author:sunjianlei date:20200120 for: 动态更改页面标题\n\n      changePage(key) {\n        this.activePage = key\n      },\n      tabCallBack() {\n        this.$nextTick(() => {\n          //update-begin-author:taoyan date: 20201211 for:【新版】online报错 JT-100\n         setTimeout(()=>{\n           //省市区组件里面给window绑定了个resize事件 导致切换页面的时候触发了他的resize，但是切换页面，省市区组件还没被销毁前就触发了该事件，导致控制台报错，加个延迟\n           triggerWindowResizeEvent()\n         },20)\n          //update-end-author:taoyan date: 20201211 for:【新版】online报错 JT-100\n        })\n      },\n      editPage(key, action) {\n        this[action](key)\n      },\n      remove(key) {\n        if (key == indexKey) {\n          this.$message.warning('首页不能关闭!')\n          return\n        }\n        if (this.pageList.length === 1) {\n          this.$message.warning('这是最后一页，不能再关闭了啦')\n          return\n        }\n        console.log(\"this.pageList \",this.pageList );\n        let removeRoute = this.pageList.filter(item => item.fullPath == key)\n        this.pageList = this.pageList.filter(item => item.fullPath !== key)\n        let index = this.linkList.indexOf(key)\n        this.linkList = this.linkList.filter(item => item !== key)\n        index = index >= this.linkList.length ? this.linkList.length - 1 : index\n        this.activePage = this.linkList[index]\n\n        //update-begin--Author:scott  Date:20201015 for：路由缓存问题，关闭了tab页时再打开就不刷新 #842\n        //关闭页面则从缓存cache_included_routes中删除路由，下次点击菜单会重新加载页面\n        let cacheRouterArray = Vue.ls.get(CACHE_INCLUDED_ROUTES) || []\n        if (removeRoute && removeRoute[0]) {\n          let componentName = removeRoute[0].meta.componentName\n          console.log(\"key: \", key);\n          console.log(\"componentName: \", componentName);\n          if(cacheRouterArray.includes(componentName)){\n            cacheRouterArray.splice(cacheRouterArray.findIndex(item => item === componentName), 1)\n            Vue.ls.set(CACHE_INCLUDED_ROUTES, cacheRouterArray)\n          }\n          this.emitPageClosed(removeRoute[0])\n        }\n        //update-end--Author:scott  Date:20201015 for：路由缓存问题，关闭了tab页时再打开就不刷新 #842\n\n      },\n      // 触发 page-closed （页面关闭）全局事件\n      emitPageClosed(closedRoute) {\n        this.$root.$emit('page-closed', {\n          closedRoute,\n          pageList: this.pageList,\n          linkList: this.linkList,\n          activePage: this.activePage\n        })\n      },\n      onContextmenu(e) {\n        const pagekey = this.getPageKey(e.target)\n        if (pagekey !== null) {\n          e.preventDefault()\n          this.menuVisible = true\n        }\n      },\n      getPageKey(target, depth) {\n        depth = depth || 0\n        if (depth > 2) {\n          return null\n        }\n        let pageKey = target.getAttribute('pagekey')\n        pageKey = pageKey || (target.previousElementSibling ? target.previousElementSibling.getAttribute('pagekey') : null)\n        return pageKey || (target.firstElementChild ? this.getPageKey(target.firstElementChild, ++depth) : null)\n      },\n      onMenuSelect(key, target) {\n        let pageKey = this.getPageKey(target)\n        switch (key) {\n          case '1':\n            this.closeLeft(pageKey)\n            break\n          case '2':\n            this.closeRight(pageKey)\n            break\n          case '3':\n            this.closeOthers(pageKey)\n            break\n          case '4':\n            this.routeReload()\n            break\n          default:\n            break\n        }\n      },\n      /* update_begin author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n      closeCurrent(){\n        this.remove(this.activePage);\n      },\n      /* update_end author:wuxianquan date:20190828 for: 关闭当前tab页，供子页面调用->望菜单能配置外链，直接弹出新页面而不是嵌入iframe #428 */\n      closeOthers(pageKey) {\n        let index = this.linkList.indexOf(pageKey)\n        if (pageKey == indexKey || pageKey.indexOf('?ticke=')>=0) {\n          this.linkList = this.linkList.slice(index, index + 1)\n          this.pageList = this.pageList.slice(index, index + 1)\n          this.activePage = this.linkList[0]\n        } else {\n          let indexContent = this.pageList.slice(0, 1)[0]\n          this.linkList = this.linkList.slice(index, index + 1)\n          this.pageList = this.pageList.slice(index, index + 1)\n          this.linkList.unshift(indexContent.fullPath)\n          this.pageList.unshift(indexContent)\n          this.activePage = this.linkList[1]\n        }\n      },\n      closeLeft(pageKey) {\n        if (pageKey == indexKey) {\n          return\n        }\n        let tempList = [...this.pageList]\n        let indexContent = tempList.slice(0, 1)[0]\n        let index = this.linkList.indexOf(pageKey)\n        this.linkList = this.linkList.slice(index)\n        this.pageList = this.pageList.slice(index)\n        this.linkList.unshift(indexContent.fullPath)\n        this.pageList.unshift(indexContent)\n        if (this.linkList.indexOf(this.activePage) < 0) {\n          this.activePage = this.linkList[0]\n        }\n      },\n      closeRight(pageKey) {\n        let index = this.linkList.indexOf(pageKey)\n        this.linkList = this.linkList.slice(0, index + 1)\n        this.pageList = this.pageList.slice(0, index + 1)\n        if (this.linkList.indexOf(this.activePage < 0)) {\n          this.activePage = this.linkList[this.linkList.length - 1]\n        }\n      },\n      //update-begin-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n      dynamicRouterShow(key,title){\n        let keyIndex = this.linkList.indexOf(key)\n        if(keyIndex>=0){\n          let currRouter = this.pageList[keyIndex]\n          let meta = Object.assign({},currRouter.meta,{title:title})\n          this.pageList.splice(keyIndex, 1, Object.assign({},currRouter,{meta:meta}))\n          if (key === this.activePage) {\n            this.changeTitle(title)\n          }\n        }\n      },\n      //update-end-author:taoyan date:20190430 for:动态路由title显示配置的菜单title而不是其对应路由的title\n\n      //update-begin-author:taoyan date:20191008 for:路由刷新\n      routeReload(){\n        this.reloadFlag = false\n        let ToggleMultipage = \"ToggleMultipage\"\n        this.$store.dispatch(ToggleMultipage,false)\n        this.$nextTick(()=>{\n          this.$store.dispatch(ToggleMultipage,true)\n          this.reloadFlag = true\n        })\n      },\n      //update-end-author:taoyan date:20191008 for:路由刷新\n      //新增一个返回方法\n      excuteCallback(callback){\n        callback()\n      },\n    }\n  }\n</script>\n\n<style lang=\"less\">\n\n  /*\n * The following styles are auto-applied to elements with\n * transition=\"page-transition\" when their visibility is toggled\n * by Vue.js.\n *\n * You can easily play with the page transition by editing\n * these styles.\n */\n\n  .page-transition-enter {\n    opacity: 0;\n  }\n\n  .page-transition-leave-active {\n    opacity: 0;\n  }\n\n  .page-transition-enter .page-transition-container,\n  .page-transition-leave-active .page-transition-container {\n    -webkit-transform: scale(1.1);\n    transform: scale(1.1);\n  }\n\n  /*美化弹出Tab样式*/\n  .ant-tabs-nav-container {\n    margin-top: 4px;\n  }\n\n  /* 修改 ant-tabs 样式 */\n  .tab-layout-tabs.ant-tabs {\n    border-bottom: 1px solid #ccc;\n    border-left: 1px solid #ccc;\n    background-color: white;\n    padding: 0 20px;\n\n    .ant-tabs-bar {\n      margin: 4px 0 0;\n      border: none;\n    }\n\n  }\n\n  .tab-layout-tabs.ant-tabs {\n\n    &.ant-tabs-card .ant-tabs-tab {\n\n      padding: 0 24px !important;\n      background-color: white !important;\n      margin-right: 10px !important;\n\n      .ant-tabs-close-x {\n        width: 12px !important;\n        height: 12px !important;\n        opacity: 0 !important;\n        cursor: pointer !important;\n        font-size: 12px !important;\n        margin: 0 !important;\n        position: absolute;\n        top: 36%;\n        right: 6px;\n      }\n\n      &:hover .ant-tabs-close-x {\n        opacity: 1 !important;\n      }\n\n    }\n\n  }\n\n  .tab-layout-tabs.ant-tabs.ant-tabs-card > .ant-tabs-bar {\n    .ant-tabs-tab {\n      border: none !important;\n      border-bottom: 1px solid transparent !important;\n    }\n    .ant-tabs-tab-active {\n      border-color: @primary-color!important;\n    }\n  }\n\n\n</style>\n"]}]}