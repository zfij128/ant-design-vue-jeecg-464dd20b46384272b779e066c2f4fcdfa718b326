{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\jeecgbiz\\thirdApp\\JThirdAppButton.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\jeecgbiz\\thirdApp\\JThirdAppButton.vue","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js","mtime":1665642924058}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getAction } from '@/api/manage'\nimport { cloneObject } from '@/utils/util'\nimport JThirdAppDropdown from './JThirdAppDropdown'\n\nconst backEndUrl = {\n  // 获取启用的第三方App\n  getEnabledType: '/sys/thirdApp/getEnabledType',\n  // 企业微信\n  wechatEnterprise: {\n    user: '/sys/thirdApp/sync/wechatEnterprise/user',\n    depart: '/sys/thirdApp/sync/wechatEnterprise/depart',\n  },\n  // 钉钉\n  dingtalk: {\n    user: '/sys/thirdApp/sync/dingtalk/user',\n    depart: '/sys/thirdApp/sync/dingtalk/depart',\n  }\n}\n\nexport default {\n  name: 'JThirdAppButton',\n  components: {JThirdAppDropdown},\n  props: {\n    // 同步类型，可以是 user、depart\n    bizType: {\n      type: String,\n      required: true,\n    },\n    // 是否允许同步到第三方APP\n    syncToApp: Boolean,\n    // 是否允许第三方APP同步到本地\n    syncToLocal: Boolean,\n    // 选择的行\n    selectedRowKeys: Array,\n  },\n  data() {\n    return {\n      enabledTypes: {},\n      attrs: {\n        dingtalk: {},\n      },\n    }\n  },\n  computed: {\n    bindAttrs() {\n      return {\n        syncToApp: this.syncToApp,\n        syncToLocal: this.syncToLocal\n      }\n    },\n    bindEvents() {\n      return {\n        'to-app': this.onToApp,\n        'to-local': this.onToLocal,\n      }\n    },\n  },\n  created() {\n    this.loadEnabledTypes()\n  },\n  methods: {\n    handleMenuClick() {\n      console.log(arguments)\n    },\n    onToApp(e) {\n      this.doSync(e.type, '/toApp')\n    },\n    onToLocal(e) {\n      this.doSync(e.type, '/toLocal')\n    },\n    // 获取启用的第三方App\n    async loadEnabledTypes() {\n      this.enabledTypes = await loadEnabledTypes()\n    },\n    // 开始同步第三方App\n    doSync(type, direction) {\n      let urls = backEndUrl[type]\n      if (!(urls && urls[this.bizType])) {\n        console.warn('配置出错')\n        return\n      }\n      let url = urls[this.bizType] + direction\n\n      let selectedRowKeys = this.selectedRowKeys\n      let content = '确定要开始同步全部数据吗？可能花费较长时间！'\n      if (Array.isArray(selectedRowKeys) && selectedRowKeys.length > 0) {\n        content = `确定要开始同步这 ${selectedRowKeys.length} 项吗？`\n      } else {\n        selectedRowKeys = []\n      }\n      return new Promise((resolve, reject) => {\n        let model = this.$confirm({\n          title: '同步',\n          content,\n          onOk: () => {\n            model.update({\n              keyboard: false,\n              okText: '同步中…',\n              cancelButtonProps: {props: {disabled: true}}\n            })\n            return getAction(url, {\n              ids: selectedRowKeys.join(',')\n            }).then(res => {\n              let options = null\n              if (res.result) {\n                options = {\n                  width: 600,\n                  title: res.message,\n                  content: (h) => {\n                    let nodes\n                    let successInfo = [\n                      `成功信息如下：`,\n                      this.renderTextarea(h, res.result.successInfo.map((v, i) => `${i + 1}. ${v}`).join('\\n')),\n                    ]\n                    if (res.success) {\n                      nodes = [\n                        ...successInfo,\n                        h('br'),\n                        `无失败信息！`,\n                      ]\n                    } else {\n                      nodes = [\n                        `失败信息如下：`,\n                        this.renderTextarea(h, res.result.failInfo.map((v, i) => `${i + 1}. ${v}`).join('\\n')),\n                        h('br'),\n                        ...successInfo,\n                      ]\n                    }\n                    return nodes\n                  }\n                }\n              }\n              if (res.success) {\n                if (options != null) {\n                  this.$success(options)\n                } else {\n                  this.$message.success(res.message)\n                }\n                this.$emit('sync-ok')\n              } else {\n                if (options != null) {\n                  this.$warning(options)\n                } else {\n                  this.$message.warning(res.message)\n                }\n                this.$emit('sync-error')\n              }\n            }).catch(() => model.destroy()).finally(() => {\n              resolve()\n              this.$emit('sync-finally', {\n                type,\n                direction,\n                isToApp: direction === '/toApp',\n                isToLocal: direction === '/toLocal',\n              })\n            })\n          },\n          onCancel() {\n            resolve()\n          },\n        })\n      })\n    },\n    renderTextarea(h, value) {\n      return h('a-textarea', {\n        props: {\n          value: value,\n          readOnly: true,\n          autosize: {minRows: 5, maxRows: 10},\n        },\n        style: {\n          // 关闭textarea的自动换行，使其可以左右滚动\n          whiteSpace: 'pre',\n          overflow: 'auto',\n        }\n      })\n    }\n  },\n}\n\n// 启用了哪些第三方App（在此缓存）\nlet enabledTypes = null\n\n// 获取启用的第三方App\nexport async function loadEnabledTypes() {\n  // 获取缓存\n  if (enabledTypes != null) {\n    return cloneObject(enabledTypes)\n  } else {\n    let {success, result} = await getAction(backEndUrl.getEnabledType)\n    if (success) {\n      // 在此缓存\n      enabledTypes = cloneObject(result)\n      return result\n    } else {\n      console.warn('getEnabledType查询失败：', res)\n    }\n  }\n  return {}\n}\n",{"version":3,"sources":["JThirdAppButton.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"JThirdAppButton.vue","sourceRoot":"src/components/jeecgbiz/thirdApp","sourcesContent":["<template>\n  <span v-if=\"syncToApp || syncToLocal\">\n    <j-third-app-dropdown v-if=\"enabledTypes.wechatEnterprise\" type=\"wechatEnterprise\" name=\"企微\" v-bind=\"bindAttrs\" v-on=\"bindEvents\"/>\n    <j-third-app-dropdown v-if=\"enabledTypes.dingtalk\" type=\"dingtalk\" name=\"钉钉\" v-bind=\"bindAttrs\" v-on=\"bindEvents\"/>\n  </span>\n  <span v-else>未设置任何同步方向</span>\n</template>\n\n<script>\nimport { getAction } from '@/api/manage'\nimport { cloneObject } from '@/utils/util'\nimport JThirdAppDropdown from './JThirdAppDropdown'\n\nconst backEndUrl = {\n  // 获取启用的第三方App\n  getEnabledType: '/sys/thirdApp/getEnabledType',\n  // 企业微信\n  wechatEnterprise: {\n    user: '/sys/thirdApp/sync/wechatEnterprise/user',\n    depart: '/sys/thirdApp/sync/wechatEnterprise/depart',\n  },\n  // 钉钉\n  dingtalk: {\n    user: '/sys/thirdApp/sync/dingtalk/user',\n    depart: '/sys/thirdApp/sync/dingtalk/depart',\n  }\n}\n\nexport default {\n  name: 'JThirdAppButton',\n  components: {JThirdAppDropdown},\n  props: {\n    // 同步类型，可以是 user、depart\n    bizType: {\n      type: String,\n      required: true,\n    },\n    // 是否允许同步到第三方APP\n    syncToApp: Boolean,\n    // 是否允许第三方APP同步到本地\n    syncToLocal: Boolean,\n    // 选择的行\n    selectedRowKeys: Array,\n  },\n  data() {\n    return {\n      enabledTypes: {},\n      attrs: {\n        dingtalk: {},\n      },\n    }\n  },\n  computed: {\n    bindAttrs() {\n      return {\n        syncToApp: this.syncToApp,\n        syncToLocal: this.syncToLocal\n      }\n    },\n    bindEvents() {\n      return {\n        'to-app': this.onToApp,\n        'to-local': this.onToLocal,\n      }\n    },\n  },\n  created() {\n    this.loadEnabledTypes()\n  },\n  methods: {\n    handleMenuClick() {\n      console.log(arguments)\n    },\n    onToApp(e) {\n      this.doSync(e.type, '/toApp')\n    },\n    onToLocal(e) {\n      this.doSync(e.type, '/toLocal')\n    },\n    // 获取启用的第三方App\n    async loadEnabledTypes() {\n      this.enabledTypes = await loadEnabledTypes()\n    },\n    // 开始同步第三方App\n    doSync(type, direction) {\n      let urls = backEndUrl[type]\n      if (!(urls && urls[this.bizType])) {\n        console.warn('配置出错')\n        return\n      }\n      let url = urls[this.bizType] + direction\n\n      let selectedRowKeys = this.selectedRowKeys\n      let content = '确定要开始同步全部数据吗？可能花费较长时间！'\n      if (Array.isArray(selectedRowKeys) && selectedRowKeys.length > 0) {\n        content = `确定要开始同步这 ${selectedRowKeys.length} 项吗？`\n      } else {\n        selectedRowKeys = []\n      }\n      return new Promise((resolve, reject) => {\n        let model = this.$confirm({\n          title: '同步',\n          content,\n          onOk: () => {\n            model.update({\n              keyboard: false,\n              okText: '同步中…',\n              cancelButtonProps: {props: {disabled: true}}\n            })\n            return getAction(url, {\n              ids: selectedRowKeys.join(',')\n            }).then(res => {\n              let options = null\n              if (res.result) {\n                options = {\n                  width: 600,\n                  title: res.message,\n                  content: (h) => {\n                    let nodes\n                    let successInfo = [\n                      `成功信息如下：`,\n                      this.renderTextarea(h, res.result.successInfo.map((v, i) => `${i + 1}. ${v}`).join('\\n')),\n                    ]\n                    if (res.success) {\n                      nodes = [\n                        ...successInfo,\n                        h('br'),\n                        `无失败信息！`,\n                      ]\n                    } else {\n                      nodes = [\n                        `失败信息如下：`,\n                        this.renderTextarea(h, res.result.failInfo.map((v, i) => `${i + 1}. ${v}`).join('\\n')),\n                        h('br'),\n                        ...successInfo,\n                      ]\n                    }\n                    return nodes\n                  }\n                }\n              }\n              if (res.success) {\n                if (options != null) {\n                  this.$success(options)\n                } else {\n                  this.$message.success(res.message)\n                }\n                this.$emit('sync-ok')\n              } else {\n                if (options != null) {\n                  this.$warning(options)\n                } else {\n                  this.$message.warning(res.message)\n                }\n                this.$emit('sync-error')\n              }\n            }).catch(() => model.destroy()).finally(() => {\n              resolve()\n              this.$emit('sync-finally', {\n                type,\n                direction,\n                isToApp: direction === '/toApp',\n                isToLocal: direction === '/toLocal',\n              })\n            })\n          },\n          onCancel() {\n            resolve()\n          },\n        })\n      })\n    },\n    renderTextarea(h, value) {\n      return h('a-textarea', {\n        props: {\n          value: value,\n          readOnly: true,\n          autosize: {minRows: 5, maxRows: 10},\n        },\n        style: {\n          // 关闭textarea的自动换行，使其可以左右滚动\n          whiteSpace: 'pre',\n          overflow: 'auto',\n        }\n      })\n    }\n  },\n}\n\n// 启用了哪些第三方App（在此缓存）\nlet enabledTypes = null\n\n// 获取启用的第三方App\nexport async function loadEnabledTypes() {\n  // 获取缓存\n  if (enabledTypes != null) {\n    return cloneObject(enabledTypes)\n  } else {\n    let {success, result} = await getAction(backEndUrl.getEnabledType)\n    if (success) {\n      // 在此缓存\n      enabledTypes = cloneObject(result)\n      return result\n    } else {\n      console.warn('getEnabledType查询失败：', res)\n    }\n  }\n  return {}\n}\n</script>\n\n<style scoped>\n\n</style>"]}]}