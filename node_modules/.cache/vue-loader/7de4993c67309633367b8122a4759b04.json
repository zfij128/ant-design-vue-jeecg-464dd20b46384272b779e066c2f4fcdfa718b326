{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\dict\\JDictSelectTag.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\dict\\JDictSelectTag.vue","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js","mtime":1665642924058}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n  import {ajaxGetDictItems,getDictItemsFromCache} from '@/api/api'\n\n  export default {\n    name: \"JDictSelectTag\",\n    props: {\n      dictCode: String,\n      placeholder: String,\n      disabled: Boolean,\n      value: [String, Number],\n      type: String,\n      getPopupContainer:{\n        type: Function,\n        default: (node) => node.parentNode\n      }\n    },\n    data() {\n      return {\n        dictOptions: [],\n        tagType:\"\"\n      }\n    },\n    watch:{\n      dictCode:{\n        immediate:true,\n        handler() {\n          this.initDictData()\n        },\n      }\n    },\n    created() {\n      // console.log(this.dictCode);\n      if(!this.type || this.type===\"list\"){\n        this.tagType = \"select\"\n      }else{\n        this.tagType = this.type\n      }\n      //获取字典数据\n      // this.initDictData();\n    },\n    computed: {\n      getValueSting(){\n        // update-begin author:wangshuai date:20200601 for: 不显示placeholder的文字 ------\n        // 当有null或“” placeholder不显示\n        return this.value != null ? this.value.toString() : undefined;\n        // update-end author:wangshuai date:20200601 for: 不显示placeholder的文字 ------\n      },\n    },\n    methods: {\n      initDictData() {\n        //优先从缓存中读取字典配置\n        if(getDictItemsFromCache(this.dictCode)){\n          this.dictOptions = getDictItemsFromCache(this.dictCode);\n          return\n        }\n\n        //根据字典Code, 初始化字典数组\n        ajaxGetDictItems(this.dictCode, null).then((res) => {\n          if (res.success) {\n//                console.log(res.result);\n            this.dictOptions = res.result;\n          }\n        })\n      },\n      handleInput(e='') {\n        let val;\n        if(Object.keys(e).includes('target')){\n          val = e.target.value\n        }else{\n          val = e\n        }\n        console.log(val);\n        this.$emit('change', val);\n        //LOWCOD-2146 【菜单】数据规则，选择自定义SQL 规则值无法输入空格\n        this.$emit('input', val);\n      },\n      setCurrentDictOptions(dictOptions){\n        this.dictOptions = dictOptions\n      },\n      getCurrentDictOptions(){\n        return this.dictOptions\n      }\n    },\n    model:{\n      prop: 'value',\n      event: 'change'\n    }\n  }\n",{"version":3,"sources":["JDictSelectTag.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAoBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"JDictSelectTag.vue","sourceRoot":"src/components/dict","sourcesContent":["<template>\n  <a-radio-group v-if=\"tagType=='radio'\" @change=\"handleInput\" :value=\"getValueSting\" :disabled=\"disabled\">\n    <a-radio v-for=\"(item, key) in dictOptions\" :key=\"key\" :value=\"item.value\">{{ item.text }}</a-radio>\n  </a-radio-group>\n\n  <a-radio-group v-else-if=\"tagType=='radioButton'\"  buttonStyle=\"solid\" @change=\"handleInput\" :value=\"getValueSting\" :disabled=\"disabled\">\n    <a-radio-button v-for=\"(item, key) in dictOptions\" :key=\"key\" :value=\"item.value\">{{ item.text }}</a-radio-button>\n  </a-radio-group>\n\n  <a-select v-else-if=\"tagType=='select'\" :getPopupContainer = \"getPopupContainer\" :placeholder=\"placeholder\" :disabled=\"disabled\" :value=\"getValueSting\" @change=\"handleInput\">\n    <a-select-option :value=\"undefined\">请选择</a-select-option>\n    <a-select-option v-for=\"(item, key) in dictOptions\" :key=\"key\" :value=\"item.value\">\n      <span style=\"display: inline-block;width: 100%\" :title=\" item.text || item.label \">\n        {{ item.text || item.label }}\n      </span>\n    </a-select-option>\n  </a-select>\n</template>\n\n<script>\n  import {ajaxGetDictItems,getDictItemsFromCache} from '@/api/api'\n\n  export default {\n    name: \"JDictSelectTag\",\n    props: {\n      dictCode: String,\n      placeholder: String,\n      disabled: Boolean,\n      value: [String, Number],\n      type: String,\n      getPopupContainer:{\n        type: Function,\n        default: (node) => node.parentNode\n      }\n    },\n    data() {\n      return {\n        dictOptions: [],\n        tagType:\"\"\n      }\n    },\n    watch:{\n      dictCode:{\n        immediate:true,\n        handler() {\n          this.initDictData()\n        },\n      }\n    },\n    created() {\n      // console.log(this.dictCode);\n      if(!this.type || this.type===\"list\"){\n        this.tagType = \"select\"\n      }else{\n        this.tagType = this.type\n      }\n      //获取字典数据\n      // this.initDictData();\n    },\n    computed: {\n      getValueSting(){\n        // update-begin author:wangshuai date:20200601 for: 不显示placeholder的文字 ------\n        // 当有null或“” placeholder不显示\n        return this.value != null ? this.value.toString() : undefined;\n        // update-end author:wangshuai date:20200601 for: 不显示placeholder的文字 ------\n      },\n    },\n    methods: {\n      initDictData() {\n        //优先从缓存中读取字典配置\n        if(getDictItemsFromCache(this.dictCode)){\n          this.dictOptions = getDictItemsFromCache(this.dictCode);\n          return\n        }\n\n        //根据字典Code, 初始化字典数组\n        ajaxGetDictItems(this.dictCode, null).then((res) => {\n          if (res.success) {\n//                console.log(res.result);\n            this.dictOptions = res.result;\n          }\n        })\n      },\n      handleInput(e='') {\n        let val;\n        if(Object.keys(e).includes('target')){\n          val = e.target.value\n        }else{\n          val = e\n        }\n        console.log(val);\n        this.$emit('change', val);\n        //LOWCOD-2146 【菜单】数据规则，选择自定义SQL 规则值无法输入空格\n        this.$emit('input', val);\n      },\n      setCurrentDictOptions(dictOptions){\n        this.dictOptions = dictOptions\n      },\n      getCurrentDictOptions(){\n        return this.dictOptions\n      }\n    },\n    model:{\n      prop: 'value',\n      event: 'change'\n    }\n  }\n</script>\n\n<style scoped>\n</style>"]}]}