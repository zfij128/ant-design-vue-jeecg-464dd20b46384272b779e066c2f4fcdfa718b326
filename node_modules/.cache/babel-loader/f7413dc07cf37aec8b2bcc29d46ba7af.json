{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\views\\user\\LoginAccount.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\views\\user\\LoginAccount.vue","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js","mtime":1665642924058}],"contextDependencies":[],"result":["function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction } from '@/api/manage';\nimport Vue from 'vue';\nimport { mapActions } from 'vuex';\nexport default {\n  name: 'LoginAccount',\n  data: function data() {\n    return {\n      requestCodeSuccess: false,\n      randCodeImage: '',\n      currdatetime: '',\n      loginType: 0,\n      model: {\n        username: 'admin',\n        password: '123456',\n        inputCode: ''\n      },\n      validatorRules: {\n        username: [{\n          required: true,\n          message: '请输入用户名!'\n        }, {\n          validator: this.handleUsernameOrEmail\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码!',\n          validator: 'click'\n        }],\n        inputCode: [{\n          required: true,\n          message: '请输入验证码!'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.handleChangeCheckCode();\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions(['Login'])), {}, {\n    /**刷新验证码*/\n    handleChangeCheckCode: function handleChangeCheckCode() {\n      var _this = this;\n\n      this.currdatetime = new Date().getTime();\n      this.model.inputCode = '';\n      getAction(\"/sys/randomImage/\".concat(this.currdatetime)).then(function (res) {\n        if (res.success) {\n          _this.randCodeImage = res.result;\n          _this.requestCodeSuccess = true;\n        } else {\n          _this.$message.error(res.message);\n\n          _this.requestCodeSuccess = false;\n        }\n      }).catch(function () {\n        _this.requestCodeSuccess = false;\n      });\n    },\n    // 判断登录类型\n    handleUsernameOrEmail: function handleUsernameOrEmail(rule, value, callback) {\n      var regex = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\\.[a-zA-Z0-9_-]{2,3}){1,2})$/;\n\n      if (regex.test(value)) {\n        this.loginType = 0;\n      } else {\n        this.loginType = 1;\n      }\n\n      callback();\n    },\n\n    /**\n     * 验证字段\n     * @param arr\n     * @param callback\n     */\n    validateFields: function validateFields(arr, callback) {\n      var _this2 = this;\n\n      var promiseArray = [];\n\n      var _iterator = _createForOfIteratorHelper(arr),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var item = _step.value;\n          var p = new Promise(function (resolve, reject) {\n            _this2.$refs['form'].validateField(item, function (err) {\n              if (!err) {\n                resolve();\n              } else {\n                reject(err);\n              }\n            });\n          });\n          promiseArray.push(p);\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      Promise.all(promiseArray).then(function () {\n        callback();\n      }).catch(function (err) {\n        callback(err);\n      });\n    },\n    acceptUsername: function acceptUsername(username) {\n      this.model['username'] = username;\n    },\n    //账号密码登录\n    handleLogin: function handleLogin(rememberMe) {\n      var _this3 = this;\n\n      this.validateFields(['username', 'password', 'inputCode'], function (err) {\n        if (!err) {\n          var loginParams = {\n            username: _this3.model.username,\n            password: _this3.model.password,\n            captcha: _this3.model.inputCode,\n            checkKey: _this3.currdatetime,\n            remember_me: rememberMe\n          };\n          console.log(\"登录参数\", loginParams);\n\n          _this3.Login(loginParams).then(function (res) {\n            _this3.$emit('success', res.result);\n          }).catch(function (err) {\n            //update-begin-author: taoyan date:20220425 for: 登录页面，当输入验证码错误时，验证码图片要刷新一下，而不是保持旧的验证码图片不变 #41\n            if (err && err.code === 412) {\n              _this3.handleChangeCheckCode();\n            } //update-end-author: taoyan date:20220425 for: 登录页面，当输入验证码错误时，验证码图片要刷新一下，而不是保持旧的验证码图片不变 #41\n\n\n            _this3.$emit('fail', err);\n          });\n        } else {\n          _this3.$emit('validateFail');\n        }\n      });\n    }\n  })\n};",{"version":3,"sources":["LoginAccount.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n      <a-form-model ref=\"form\" :model=\"model\" :rules=\"validatorRules\">\n        <a-form-model-item required prop=\"username\">\n          <a-input v-model=\"model.username\" size=\"large\" placeholder=\"请输入帐户名 / admin\">\n            <a-icon slot=\"prefix\" type=\"user\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n          </a-input>\n        </a-form-model-item>\n        <a-form-model-item required prop=\"password\">\n          <a-input v-model=\"model.password\" size=\"large\" type=\"password\" autocomplete=\"false\" placeholder=\"请输入密码 / 123456\">\n            <a-icon slot=\"prefix\" type=\"lock\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n          </a-input>\n        </a-form-model-item>\n\n        <a-row :gutter=\"0\">\n          <a-col :span=\"16\">\n            <a-form-model-item required prop=\"inputCode\">\n              <a-input v-model=\"model.inputCode\" size=\"large\" type=\"text\" placeholder=\"请输入验证码\">\n                <a-icon slot=\"prefix\" type=\"smile\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n              </a-input>\n            </a-form-model-item>\n          </a-col>\n          <a-col :span=\"8\" style=\"text-align: right\">\n            <img v-if=\"requestCodeSuccess\" style=\"margin-top: 2px;\" :src=\"randCodeImage\" @click=\"handleChangeCheckCode\"/>\n            <img v-else style=\"margin-top: 2px;\" src=\"../../assets/checkcode.png\" @click=\"handleChangeCheckCode\"/>\n          </a-col>\n        </a-row>\n      </a-form-model>\n    </div>\n</template>\n\n<script>\n  import { getAction } from '@/api/manage'\n  import Vue from 'vue'\n  import { mapActions } from 'vuex'\n\n  export default {\n    name: 'LoginAccount',\n    data(){\n      return {\n        requestCodeSuccess: false,\n        randCodeImage: '',\n        currdatetime: '',\n        loginType: 0,\n        model:{\n          username: 'admin',\n          password: '123456',\n          inputCode: ''\n        },\n        validatorRules:{\n          username: [\n            { required: true, message: '请输入用户名!' },\n            { validator: this.handleUsernameOrEmail }\n          ],\n          password: [{\n            required: true, message: '请输入密码!', validator: 'click'\n          }],\n          inputCode: [{\n            required: true, message: '请输入验证码!'\n          }]\n        }\n\n      }\n    },\n    created() {\n      this.handleChangeCheckCode();\n    },\n    methods:{\n      ...mapActions(['Login']),\n      /**刷新验证码*/\n      handleChangeCheckCode(){\n        this.currdatetime = new Date().getTime();\n        this.model.inputCode = ''\n        getAction(`/sys/randomImage/${this.currdatetime}`).then(res=>{\n          if(res.success){\n            this.randCodeImage = res.result\n            this.requestCodeSuccess=true\n          }else{\n            this.$message.error(res.message)\n            this.requestCodeSuccess=false\n          }\n        }).catch(()=>{\n          this.requestCodeSuccess=false\n        })\n      },\n      // 判断登录类型\n      handleUsernameOrEmail (rule, value, callback) {\n        const regex = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\\.[a-zA-Z0-9_-]{2,3}){1,2})$/;\n        if (regex.test(value)) {\n          this.loginType = 0\n        } else {\n          this.loginType = 1\n        }\n        callback()\n      },\n      /**\n       * 验证字段\n       * @param arr\n       * @param callback\n       */\n      validateFields(arr, callback){\n        let promiseArray = []\n        for(let item of arr){\n          let p = new Promise((resolve, reject) => {\n            this.$refs['form'].validateField(item, (err)=>{\n              if(!err){\n                resolve();\n              }else{\n                reject(err);\n              }\n            })\n          });\n          promiseArray.push(p)\n        }\n        Promise.all(promiseArray).then(()=>{\n          callback()\n        }).catch(err=>{\n          callback(err)\n        })\n      },\n      acceptUsername(username){\n        this.model['username'] = username\n      },\n      //账号密码登录\n      handleLogin(rememberMe){\n        this.validateFields([ 'username', 'password', 'inputCode' ], (err)=>{\n          if(!err){\n            let loginParams = {\n              username: this.model.username,\n              password: this.model.password,\n              captcha: this.model.inputCode,\n              checkKey: this.currdatetime,\n              remember_me: rememberMe,\n            }\n            console.log(\"登录参数\", loginParams)\n            this.Login(loginParams).then((res) => {\n              this.$emit('success', res.result)\n            }).catch((err) => {\n              //update-begin-author: taoyan date:20220425 for: 登录页面，当输入验证码错误时，验证码图片要刷新一下，而不是保持旧的验证码图片不变 #41\n              if(err && err.code===412){\n                this.handleChangeCheckCode();\n              }\n              //update-end-author: taoyan date:20220425 for: 登录页面，当输入验证码错误时，验证码图片要刷新一下，而不是保持旧的验证码图片不变 #41\n              this.$emit('fail', err)\n            });\n          }else{\n            this.$emit('validateFail')\n          }\n        })\n      }\n\n\n    }\n\n  }\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/views/user"}]}