{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\views\\system\\SysCategoryList.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\views\\system\\SysCategoryList.vue","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js","mtime":1665642924058}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"D:/\\u4E91\\u665F/\\u524D\\u7AEF/ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326/node_modules/@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction } from '@/api/manage';\nimport { JeecgListMixin } from '@/mixins/JeecgListMixin';\nimport SysCategoryModal from './modules/SysCategoryModal';\nimport { deleteAction } from '@/api/manage';\nexport default {\n  name: \"SysCategoryList\",\n  mixins: [JeecgListMixin],\n  components: {\n    SysCategoryModal: SysCategoryModal\n  },\n  data: function data() {\n    return {\n      description: '分类字典管理页面',\n      // 表头\n      columns: [{\n        title: '分类名称',\n        align: \"left\",\n        dataIndex: 'name'\n      }, {\n        title: '分类编码',\n        align: \"left\",\n        dataIndex: 'code'\n      }, {\n        title: '操作',\n        dataIndex: 'action',\n        align: \"center\",\n        scopedSlots: {\n          customRender: 'action'\n        }\n      }],\n      url: {\n        list: \"/sys/category/rootList\",\n        childList: \"/sys/category/childList\",\n        getChildListBatch: \"/sys/category/getChildListBatch\",\n        delete: \"/sys/category/delete\",\n        deleteBatch: \"/sys/category/deleteBatch\",\n        exportXlsUrl: \"/sys/category/exportXls\",\n        importExcelUrl: \"sys/category/importExcel\"\n      },\n      expandedRowKeys: [],\n      hasChildrenField: \"hasChild\",\n      pidField: \"pid\",\n      dictOptions: {},\n      subExpandedKeys: []\n    };\n  },\n  computed: {\n    importExcelUrl: function importExcelUrl() {\n      return \"\".concat(window._CONFIG['domianURL'], \"/\").concat(this.url.importExcelUrl);\n    },\n    tableProps: function tableProps() {\n      var _this = this;\n\n      return {\n        // 列表项是否可选择\n        rowSelection: {\n          selectedRowKeys: _this.selectedRowKeys,\n          onChange: function onChange(selectedRowKeys) {\n            return _this.selectedRowKeys = selectedRowKeys;\n          }\n        }\n      };\n    }\n  },\n  methods: {\n    loadData: function loadData(arg) {\n      var _this2 = this;\n\n      if (arg == 1) {\n        this.ipagination.current = 1;\n      }\n\n      this.loading = true;\n      var params = this.getQueryParams();\n      return new Promise(function (resolve) {\n        getAction(_this2.url.list, params).then(function (res) {\n          if (res.success) {\n            var result = res.result;\n\n            if (Number(result.total) > 0) {\n              _this2.ipagination.total = Number(result.total);\n              _this2.dataSource = _this2.getDataByResult(res.result.records); //update--begin--autor:lvdandan-----date:20201204------for：JT-31 删除成功后默认展开已展开信息\n\n              return _this2.loadDataByExpandedRows(_this2.dataSource); //update--end--autor:lvdandan-----date:20201204------for：JT-31 删除成功后默认展开已展开信息\n            } else {\n              _this2.ipagination.total = 0;\n              _this2.dataSource = [];\n            }\n          } else {\n            _this2.$message.warning(res.message);\n          }\n        }).finally(function () {\n          _this2.loading = false;\n        });\n      });\n    },\n    getDataByResult: function getDataByResult(result) {\n      var _this3 = this;\n\n      if (result && result.length > 0) {\n        return result.map(function (item) {\n          //判断是否标记了带有子节点\n          if (item[_this3.hasChildrenField] == '1') {\n            var loadChild = {\n              id: item.id + '_loadChild',\n              name: 'loading...',\n              isLoading: true\n            };\n            item.children = [loadChild];\n          }\n\n          return item;\n        });\n      }\n    },\n    handleExpand: function handleExpand(expanded, record) {\n      var _this4 = this;\n\n      // 判断是否是展开状态\n      if (expanded) {\n        this.expandedRowKeys.push(record.id);\n\n        if (record.children.length > 0 && record.children[0].isLoading === true) {\n          var params = this.getQueryParams(); //查询条件\n\n          params[this.pidField] = record.id;\n          getAction(this.url.childList, params).then(function (res) {\n            if (res.success) {\n              if (res.result && res.result.length > 0) {\n                record.children = _this4.getDataByResult(res.result);\n                _this4.dataSource = _toConsumableArray(_this4.dataSource);\n              } else {\n                record.children = '';\n                record.hasChildrenField = '0';\n              }\n            } else {\n              _this4.$message.warning(res.message);\n            }\n          });\n        }\n      } else {\n        var keyIndex = this.expandedRowKeys.indexOf(record.id);\n\n        if (keyIndex >= 0) {\n          this.expandedRowKeys.splice(keyIndex, 1);\n        }\n      }\n    },\n    initDictConfig: function initDictConfig() {},\n    modalFormOk: function modalFormOk(formData, arr) {\n      if (!formData.id) {\n        this.addOk(formData, arr);\n      } else {\n        this.editOk(formData, this.dataSource);\n        this.dataSource = _toConsumableArray(this.dataSource);\n      }\n    },\n    editOk: function editOk(formData, arr) {\n      if (arr && arr.length > 0) {\n        for (var i = 0; i < arr.length; i++) {\n          if (arr[i].id == formData.id) {\n            arr[i] = formData;\n            break;\n          } else {\n            this.editOk(formData, arr[i].children);\n          }\n        }\n      }\n    },\n    addOk: function () {\n      var _addOk = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formData, arr) {\n        var _iterator, _step, i;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (formData[this.pidField]) {\n                  _context.next = 4;\n                  break;\n                }\n\n                this.loadData();\n                _context.next = 23;\n                break;\n\n              case 4:\n                this.expandedRowKeys = [];\n                console.log(\"22222\", arr);\n                _iterator = _createForOfIteratorHelper(arr);\n                _context.prev = 7;\n\n                _iterator.s();\n\n              case 9:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 15;\n                  break;\n                }\n\n                i = _step.value;\n                _context.next = 13;\n                return this.expandTreeNode(i);\n\n              case 13:\n                _context.next = 9;\n                break;\n\n              case 15:\n                _context.next = 20;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](7);\n\n                _iterator.e(_context.t0);\n\n              case 20:\n                _context.prev = 20;\n\n                _iterator.f();\n\n                return _context.finish(20);\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[7, 17, 20, 23]]);\n      }));\n\n      function addOk(_x, _x2) {\n        return _addOk.apply(this, arguments);\n      }\n\n      return addOk;\n    }(),\n    expandTreeNode: function expandTreeNode(nodeId) {\n      var _this5 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this5.getFormDataById(nodeId, _this5.dataSource);\n\n        var row = _this5.parentFormData;\n\n        _this5.expandedRowKeys.push(nodeId);\n\n        var params = _this5.getQueryParams(); //查询条件\n\n\n        params[_this5.pidField] = nodeId;\n        getAction(_this5.url.childList, params).then(function (res) {\n          console.log(\"11111\", res);\n\n          if (res.success) {\n            if (res.result && res.result.length > 0) {\n              row.children = _this5.getDataByResult(res.result);\n              _this5.dataSource = _toConsumableArray(_this5.dataSource);\n              resolve();\n            } else {\n              row.children = '';\n              row.hasChildrenField = '0';\n              reject();\n            }\n          } else {\n            reject();\n          }\n        });\n      });\n    },\n    getFormDataById: function getFormDataById(id, arr) {\n      if (arr && arr.length > 0) {\n        for (var i = 0; i < arr.length; i++) {\n          if (arr[i].id == id) {\n            this.parentFormData = arr[i];\n          } else {\n            this.getFormDataById(id, arr[i].children);\n          }\n        }\n      }\n    },\n    handleAddSub: function handleAddSub(record) {\n      this.subExpandedKeys = [];\n      this.getExpandKeysByPid(record.id, this.dataSource, this.dataSource);\n      this.$refs.modalForm.subExpandedKeys = this.subExpandedKeys;\n      this.$refs.modalForm.title = \"添加子分类\";\n      this.$refs.modalForm.edit({\n        'pid': record.id\n      });\n      this.$refs.modalForm.disableSubmit = false;\n    },\n    handleDelete: function handleDelete(record) {\n      var that = this;\n      deleteAction(that.url.delete, {\n        id: record.id\n      }).then(function (res) {\n        if (res.success) {\n          //update--begin--autor:lvdandan-----date:20201204------for：JT-31 删除成功后默认展开已展开信息\n          that.loadData(); //update--end--autor:lvdandan-----date:20201204------for：JT-31 删除成功后默认展开已展开信息\n        } else {\n          that.$message.warning(res.message);\n        }\n      });\n    },\n    // 添加子分类时获取所有父级id\n    getExpandKeysByPid: function getExpandKeysByPid(pid, arr, all) {\n      if (pid && arr && arr.length > 0) {\n        for (var i = 0; i < arr.length; i++) {\n          if (arr[i].id == pid) {\n            this.subExpandedKeys.push(arr[i].id);\n            this.getExpandKeysByPid(arr[i]['pid'], all, all);\n          } else {\n            this.getExpandKeysByPid(pid, arr[i].children, all);\n          }\n        }\n      }\n    },\n    // 根据已展开的行查询数据（用于保存后刷新时异步加载子级的数据）\n    loadDataByExpandedRows: function loadDataByExpandedRows(dataList) {\n      var _this6 = this;\n\n      if (this.expandedRowKeys.length > 0) {\n        return getAction(this.url.getChildListBatch, {\n          parentIds: this.expandedRowKeys.join(',')\n        }).then(function (res) {\n          if (res.success && res.result.records.length > 0) {\n            //已展开的数据批量子节点\n            var records = res.result.records;\n            var listMap = new Map();\n\n            var _iterator2 = _createForOfIteratorHelper(records),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var item = _step2.value;\n                var pid = item[_this6.pidField];\n\n                if (_this6.expandedRowKeys.join(',').includes(pid)) {\n                  var mapList = listMap.get(pid);\n\n                  if (mapList == null) {\n                    mapList = [];\n                  }\n\n                  mapList.push(item);\n                  listMap.set(pid, mapList);\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n            var childrenMap = listMap;\n\n            var fn = function fn(list) {\n              if (list) {\n                list.forEach(function (data) {\n                  if (_this6.expandedRowKeys.includes(data.id)) {\n                    data.children = _this6.getDataByResult(childrenMap.get(data.id));\n                    fn(data.children);\n                  }\n                });\n              }\n            };\n\n            fn(dataList);\n          }\n        });\n      } else {\n        return Promise.resolve();\n      }\n    }\n  }\n};",{"version":3,"sources":["SysCategoryList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA,SAAA,SAAA,QAAA,cAAA;AACA,SAAA,cAAA,QAAA,yBAAA;AACA,OAAA,gBAAA,MAAA,4BAAA;AACA,SAAA,YAAA,QAAA,cAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,iBADA;AAEA,EAAA,MAAA,EAAA,CAAA,cAAA,CAFA;AAGA,EAAA,UAAA,EAAA;AACA,IAAA,gBAAA,EAAA;AADA,GAHA;AAMA,EAAA,IANA,kBAMA;AACA,WAAA;AACA,MAAA,WAAA,EAAA,UADA;AAEA;AACA,MAAA,OAAA,EAAA,CACA;AACA,QAAA,KAAA,EAAA,MADA;AAEA,QAAA,KAAA,EAAA,MAFA;AAGA,QAAA,SAAA,EAAA;AAHA,OADA,EAMA;AACA,QAAA,KAAA,EAAA,MADA;AAEA,QAAA,KAAA,EAAA,MAFA;AAGA,QAAA,SAAA,EAAA;AAHA,OANA,EAWA;AACA,QAAA,KAAA,EAAA,IADA;AAEA,QAAA,SAAA,EAAA,QAFA;AAGA,QAAA,KAAA,EAAA,QAHA;AAIA,QAAA,WAAA,EAAA;AAAA,UAAA,YAAA,EAAA;AAAA;AAJA,OAXA,CAHA;AAqBA,MAAA,GAAA,EAAA;AACA,QAAA,IAAA,EAAA,wBADA;AAEA,QAAA,SAAA,EAAA,yBAFA;AAGA,QAAA,iBAAA,EAAA,iCAHA;AAIA,QAAA,MAAA,EAAA,sBAJA;AAKA,QAAA,WAAA,EAAA,2BALA;AAMA,QAAA,YAAA,EAAA,yBANA;AAOA,QAAA,cAAA,EAAA;AAPA,OArBA;AA8BA,MAAA,eAAA,EAAA,EA9BA;AA+BA,MAAA,gBAAA,EAAA,UA/BA;AAgCA,MAAA,QAAA,EAAA,KAhCA;AAiCA,MAAA,WAAA,EAAA,EAjCA;AAmCA,MAAA,eAAA,EAAA;AAnCA,KAAA;AAqCA,GA5CA;AA6CA,EAAA,QAAA,EAAA;AACA,IAAA,cADA,4BACA;AACA,uBAAA,MAAA,CAAA,OAAA,CAAA,WAAA,CAAA,cAAA,KAAA,GAAA,CAAA,cAAA;AACA,KAHA;AAIA,IAAA,UAJA,wBAIA;AACA,UAAA,KAAA,GAAA,IAAA;;AACA,aAAA;AACA;AACA,QAAA,YAAA,EAAA;AACA,UAAA,eAAA,EAAA,KAAA,CAAA,eADA;AAEA,UAAA,QAAA,EAAA,kBAAA,eAAA;AAAA,mBAAA,KAAA,CAAA,eAAA,GAAA,eAAA;AAAA;AAFA;AAFA,OAAA;AAOA;AAbA,GA7CA;AA4DA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,oBACA,GADA,EACA;AAAA;;AACA,UAAA,GAAA,IAAA,CAAA,EAAA;AACA,aAAA,WAAA,CAAA,OAAA,GAAA,CAAA;AACA;;AACA,WAAA,OAAA,GAAA,IAAA;AACA,UAAA,MAAA,GAAA,KAAA,cAAA,EAAA;AACA,aAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,QAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,cAAA,GAAA,CAAA,OAAA,EAAA;AACA,gBAAA,MAAA,GAAA,GAAA,CAAA,MAAA;;AACA,gBAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,GAAA,CAAA,EAAA;AACA,cAAA,MAAA,CAAA,WAAA,CAAA,KAAA,GAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA;AACA,cAAA,MAAA,CAAA,UAAA,GAAA,MAAA,CAAA,eAAA,CAAA,GAAA,CAAA,MAAA,CAAA,OAAA,CAAA,CAFA,CAGA;;AACA,qBAAA,MAAA,CAAA,sBAAA,CAAA,MAAA,CAAA,UAAA,CAAA,CAJA,CAKA;AACA,aANA,MAMA;AACA,cAAA,MAAA,CAAA,WAAA,CAAA,KAAA,GAAA,CAAA;AACA,cAAA,MAAA,CAAA,UAAA,GAAA,EAAA;AACA;AACA,WAZA,MAYA;AACA,YAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,OAAA;AACA;AACA,SAhBA,EAgBA,OAhBA,CAgBA,YAAA;AACA,UAAA,MAAA,CAAA,OAAA,GAAA,KAAA;AACA,SAlBA;AAmBA,OApBA,CAAA;AAqBA,KA5BA;AA6BA,IAAA,eA7BA,2BA6BA,MA7BA,EA6BA;AAAA;;AACA,UAAA,MAAA,IAAA,MAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,eAAA,MAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA;AACA,cAAA,IAAA,CAAA,MAAA,CAAA,gBAAA,CAAA,IAAA,GAAA,EAAA;AACA,gBAAA,SAAA,GAAA;AAAA,cAAA,EAAA,EAAA,IAAA,CAAA,EAAA,GAAA,YAAA;AAAA,cAAA,IAAA,EAAA,YAAA;AAAA,cAAA,SAAA,EAAA;AAAA,aAAA;AACA,YAAA,IAAA,CAAA,QAAA,GAAA,CAAA,SAAA,CAAA;AACA;;AACA,iBAAA,IAAA;AACA,SAPA,CAAA;AAQA;AACA,KAxCA;AAyCA,IAAA,YAzCA,wBAyCA,QAzCA,EAyCA,MAzCA,EAyCA;AAAA;;AACA;AACA,UAAA,QAAA,EAAA;AACA,aAAA,eAAA,CAAA,IAAA,CAAA,MAAA,CAAA,EAAA;;AACA,YAAA,MAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,IAAA,MAAA,CAAA,QAAA,CAAA,CAAA,EAAA,SAAA,KAAA,IAAA,EAAA;AACA,cAAA,MAAA,GAAA,KAAA,cAAA,EAAA,CADA,CACA;;AACA,UAAA,MAAA,CAAA,KAAA,QAAA,CAAA,GAAA,MAAA,CAAA,EAAA;AACA,UAAA,SAAA,CAAA,KAAA,GAAA,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,gBAAA,GAAA,CAAA,OAAA,EAAA;AACA,kBAAA,GAAA,CAAA,MAAA,IAAA,GAAA,CAAA,MAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,gBAAA,MAAA,CAAA,QAAA,GAAA,MAAA,CAAA,eAAA,CAAA,GAAA,CAAA,MAAA,CAAA;AACA,gBAAA,MAAA,CAAA,UAAA,sBAAA,MAAA,CAAA,UAAA;AACA,eAHA,MAGA;AACA,gBAAA,MAAA,CAAA,QAAA,GAAA,EAAA;AACA,gBAAA,MAAA,CAAA,gBAAA,GAAA,GAAA;AACA;AACA,aARA,MAQA;AACA,cAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,OAAA;AACA;AACA,WAZA;AAaA;AACA,OAnBA,MAmBA;AACA,YAAA,QAAA,GAAA,KAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,EAAA,CAAA;;AACA,YAAA,QAAA,IAAA,CAAA,EAAA;AACA,eAAA,eAAA,CAAA,MAAA,CAAA,QAAA,EAAA,CAAA;AACA;AACA;AACA,KApEA;AAqEA,IAAA,cArEA,4BAqEA,CACA,CAtEA;AAuEA,IAAA,WAvEA,uBAuEA,QAvEA,EAuEA,GAvEA,EAuEA;AACA,UAAA,CAAA,QAAA,CAAA,EAAA,EAAA;AACA,aAAA,KAAA,CAAA,QAAA,EAAA,GAAA;AACA,OAFA,MAEA;AACA,aAAA,MAAA,CAAA,QAAA,EAAA,KAAA,UAAA;AACA,aAAA,UAAA,sBAAA,KAAA,UAAA;AACA;AACA,KA9EA;AA+EA,IAAA,MA/EA,kBA+EA,QA/EA,EA+EA,GA/EA,EA+EA;AACA,UAAA,GAAA,IAAA,GAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,GAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,GAAA,CAAA,CAAA,CAAA,CAAA,EAAA,IAAA,QAAA,CAAA,EAAA,EAAA;AACA,YAAA,GAAA,CAAA,CAAA,CAAA,GAAA,QAAA;AACA;AACA,WAHA,MAGA;AACA,iBAAA,MAAA,CAAA,QAAA,EAAA,GAAA,CAAA,CAAA,CAAA,CAAA,QAAA;AACA;AACA;AACA;AACA,KA1FA;AA2FA,IAAA,KA3FA;AAAA,6FA2FA,QA3FA,EA2FA,GA3FA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBA4FA,QAAA,CAAA,KAAA,QAAA,CA5FA;AAAA;AAAA;AAAA;;AA6FA,qBAAA,QAAA;AA7FA;AAAA;;AAAA;AA+FA,qBAAA,eAAA,GAAA,EAAA;AACA,gBAAA,OAAA,CAAA,GAAA,CAAA,OAAA,EAAA,GAAA;AAhGA,uDAiGA,GAjGA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiGA,gBAAA,CAjGA;AAAA;AAAA,uBAkGA,KAAA,cAAA,CAAA,CAAA,CAlGA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAsGA,IAAA,cAtGA,0BAsGA,MAtGA,EAsGA;AAAA;;AACA,aAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA,MAAA,EAAA;AACA,QAAA,MAAA,CAAA,eAAA,CAAA,MAAA,EAAA,MAAA,CAAA,UAAA;;AACA,YAAA,GAAA,GAAA,MAAA,CAAA,cAAA;;AACA,QAAA,MAAA,CAAA,eAAA,CAAA,IAAA,CAAA,MAAA;;AACA,YAAA,MAAA,GAAA,MAAA,CAAA,cAAA,EAAA,CAJA,CAIA;;;AACA,QAAA,MAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,MAAA;AACA,QAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,SAAA,EAAA,MAAA,CAAA,CAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,OAAA,EAAA,GAAA;;AACA,cAAA,GAAA,CAAA,OAAA,EAAA;AACA,gBAAA,GAAA,CAAA,MAAA,IAAA,GAAA,CAAA,MAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,cAAA,GAAA,CAAA,QAAA,GAAA,MAAA,CAAA,eAAA,CAAA,GAAA,CAAA,MAAA,CAAA;AACA,cAAA,MAAA,CAAA,UAAA,sBAAA,MAAA,CAAA,UAAA;AACA,cAAA,OAAA;AACA,aAJA,MAIA;AACA,cAAA,GAAA,CAAA,QAAA,GAAA,EAAA;AACA,cAAA,GAAA,CAAA,gBAAA,GAAA,GAAA;AACA,cAAA,MAAA;AACA;AACA,WAVA,MAUA;AACA,YAAA,MAAA;AACA;AACA,SAfA;AAgBA,OAtBA,CAAA;AAuBA,KA9HA;AA+HA,IAAA,eA/HA,2BA+HA,EA/HA,EA+HA,GA/HA,EA+HA;AACA,UAAA,GAAA,IAAA,GAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,GAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,GAAA,CAAA,CAAA,CAAA,CAAA,EAAA,IAAA,EAAA,EAAA;AACA,iBAAA,cAAA,GAAA,GAAA,CAAA,CAAA,CAAA;AACA,WAFA,MAEA;AACA,iBAAA,eAAA,CAAA,EAAA,EAAA,GAAA,CAAA,CAAA,CAAA,CAAA,QAAA;AACA;AACA;AACA;AACA,KAzIA;AA0IA,IAAA,YA1IA,wBA0IA,MA1IA,EA0IA;AACA,WAAA,eAAA,GAAA,EAAA;AACA,WAAA,kBAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,UAAA,EAAA,KAAA,UAAA;AACA,WAAA,KAAA,CAAA,SAAA,CAAA,eAAA,GAAA,KAAA,eAAA;AACA,WAAA,KAAA,CAAA,SAAA,CAAA,KAAA,GAAA,OAAA;AACA,WAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA;AAAA,eAAA,MAAA,CAAA;AAAA,OAAA;AACA,WAAA,KAAA,CAAA,SAAA,CAAA,aAAA,GAAA,KAAA;AACA,KAjJA;AAkJA,IAAA,YAAA,EAAA,sBAAA,MAAA,EAAA;AACA,UAAA,IAAA,GAAA,IAAA;AACA,MAAA,YAAA,CAAA,IAAA,CAAA,GAAA,CAAA,MAAA,EAAA;AAAA,QAAA,EAAA,EAAA,MAAA,CAAA;AAAA,OAAA,CAAA,CAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,YAAA,GAAA,CAAA,OAAA,EAAA;AACA;AACA,UAAA,IAAA,CAAA,QAAA,GAFA,CAGA;AACA,SAJA,MAIA;AACA,UAAA,IAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,OAAA;AACA;AACA,OARA;AASA,KA7JA;AA8JA;AACA,IAAA,kBA/JA,8BA+JA,GA/JA,EA+JA,GA/JA,EA+JA,GA/JA,EA+JA;AACA,UAAA,GAAA,IAAA,GAAA,IAAA,GAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,GAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,GAAA,CAAA,CAAA,CAAA,CAAA,EAAA,IAAA,GAAA,EAAA;AACA,iBAAA,eAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,EAAA;AACA,iBAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,EAAA,GAAA,EAAA,GAAA;AACA,WAHA,MAGA;AACA,iBAAA,kBAAA,CAAA,GAAA,EAAA,GAAA,CAAA,CAAA,CAAA,CAAA,QAAA,EAAA,GAAA;AACA;AACA;AACA;AACA,KA1KA;AA2KA;AACA,IAAA,sBA5KA,kCA4KA,QA5KA,EA4KA;AAAA;;AACA,UAAA,KAAA,eAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,eAAA,SAAA,CAAA,KAAA,GAAA,CAAA,iBAAA,EAAA;AAAA,UAAA,SAAA,EAAA,KAAA,eAAA,CAAA,IAAA,CAAA,GAAA;AAAA,SAAA,CAAA,CAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,cAAA,GAAA,CAAA,OAAA,IAAA,GAAA,CAAA,MAAA,CAAA,OAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA;AACA,gBAAA,OAAA,GAAA,GAAA,CAAA,MAAA,CAAA,OAAA;AACA,gBAAA,OAAA,GAAA,IAAA,GAAA,EAAA;;AAHA,wDAIA,OAJA;AAAA;;AAAA;AAIA,qEAAA;AAAA,oBAAA,IAAA;AACA,oBAAA,GAAA,GAAA,IAAA,CAAA,MAAA,CAAA,QAAA,CAAA;;AACA,oBAAA,MAAA,CAAA,eAAA,CAAA,IAAA,CAAA,GAAA,EAAA,QAAA,CAAA,GAAA,CAAA,EAAA;AACA,sBAAA,OAAA,GAAA,OAAA,CAAA,GAAA,CAAA,GAAA,CAAA;;AACA,sBAAA,OAAA,IAAA,IAAA,EAAA;AACA,oBAAA,OAAA,GAAA,EAAA;AACA;;AACA,kBAAA,OAAA,CAAA,IAAA,CAAA,IAAA;AACA,kBAAA,OAAA,CAAA,GAAA,CAAA,GAAA,EAAA,OAAA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;;AAeA,gBAAA,WAAA,GAAA,OAAA;;AACA,gBAAA,EAAA,GAAA,SAAA,EAAA,CAAA,IAAA,EAAA;AACA,kBAAA,IAAA,EAAA;AACA,gBAAA,IAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,sBAAA,MAAA,CAAA,eAAA,CAAA,QAAA,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA;AACA,oBAAA,IAAA,CAAA,QAAA,GAAA,MAAA,CAAA,eAAA,CAAA,WAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA;AACA,oBAAA,EAAA,CAAA,IAAA,CAAA,QAAA,CAAA;AACA;AACA,iBALA;AAMA;AACA,aATA;;AAUA,YAAA,EAAA,CAAA,QAAA,CAAA;AACA;AACA,SA7BA,CAAA;AA8BA,OA/BA,MA+BA;AACA,eAAA,OAAA,CAAA,OAAA,EAAA;AACA;AACA;AA/MA;AA5DA,CAAA","sourcesContent":["<template>\n  <a-card :bordered=\"false\">\n    \n    <!-- 操作按钮区域 -->\n    <div class=\"table-operator\">\n      <a-button @click=\"handleAdd\" type=\"primary\" icon=\"plus\">新增</a-button>\n      <a-button type=\"primary\" icon=\"download\" @click=\"handleExportXls('分类字典')\">导出</a-button>\n      <a-upload name=\"file\" :showUploadList=\"false\" :multiple=\"false\" :headers=\"tokenHeader\"  :action=\"importExcelUrl\" @change=\"handleImportExcel\">\n        <a-button type=\"primary\" icon=\"import\">导入</a-button>\n      </a-upload>\n      <a-dropdown v-if=\"selectedRowKeys.length > 0\">\n        <a-menu slot=\"overlay\">\n          <a-menu-item key=\"1\" @click=\"batchDel\"><a-icon type=\"delete\"/>删除</a-menu-item>\n        </a-menu>\n        <a-button style=\"margin-left: 8px\"> 批量操作 <a-icon type=\"down\" /></a-button>\n      </a-dropdown>\n    </div>\n\n    <!-- table区域-begin -->\n    <div>\n      <div class=\"ant-alert ant-alert-info\" style=\"margin-bottom: 16px;\">\n        <i class=\"anticon anticon-info-circle ant-alert-icon\"></i> 已选择 <a style=\"font-weight: 600\">{{ selectedRowKeys.length }}</a>项\n        <a style=\"margin-left: 24px\" @click=\"onClearSelected\">清空</a>\n      </div>\n\n      <a-table\n        ref=\"table\"\n        size=\"middle\"\n        rowKey=\"id\"\n        :columns=\"columns\"\n        :dataSource=\"dataSource\"\n        :pagination=\"ipagination\"\n        :loading=\"loading\"\n        :expandedRowKeys=\"expandedRowKeys\"\n        @change=\"handleTableChange\"\n        @expand=\"handleExpand\"\n        v-bind=\"tableProps\">\n        \n        <span slot=\"action\" slot-scope=\"text, record\">\n          <a @click=\"handleEdit(record)\">编辑</a>\n          <a-divider type=\"vertical\" />\n          <a-popconfirm title=\"确定删除吗?\" @confirm=\"() => handleDelete(record)\">\n            <a>删除</a>\n          </a-popconfirm>\n          <a-divider type=\"vertical\" />\n          <a @click=\"handleAddSub(record)\">添加下级</a>\n        </span>\n\n      </a-table>\n    </div>\n\n    <sysCategory-modal ref=\"modalForm\" @ok=\"modalFormOk\"></sysCategory-modal>\n  </a-card>\n</template>\n\n<script>\n\n  import { getAction } from '@/api/manage'\n  import { JeecgListMixin } from '@/mixins/JeecgListMixin'\n  import SysCategoryModal from './modules/SysCategoryModal'\n  import { deleteAction } from '@/api/manage'\n  \n  export default {\n    name: \"SysCategoryList\",\n    mixins:[JeecgListMixin],\n    components: {\n      SysCategoryModal\n    },\n    data () {\n      return {\n        description: '分类字典管理页面',\n        // 表头\n        columns: [\n          {\n            title:'分类名称',\n            align:\"left\",\n            dataIndex: 'name'\n          },\n          {\n            title:'分类编码',\n            align:\"left\",\n            dataIndex: 'code'\n          },\n          {\n            title: '操作',\n            dataIndex: 'action',\n            align:\"center\",\n            scopedSlots: { customRender: 'action' },\n          }\n        ],\n        url: {\n          list: \"/sys/category/rootList\",\n          childList: \"/sys/category/childList\",\n          getChildListBatch: \"/sys/category/getChildListBatch\",\n          delete: \"/sys/category/delete\",\n          deleteBatch: \"/sys/category/deleteBatch\",\n          exportXlsUrl: \"/sys/category/exportXls\",\n          importExcelUrl: \"sys/category/importExcel\",\n        },\n        expandedRowKeys:[],\n        hasChildrenField:\"hasChild\",\n        pidField:\"pid\",\n        dictOptions:{\n        },\n        subExpandedKeys:[],\n      }\n    },\n    computed: {\n      importExcelUrl(){\n        return `${window._CONFIG['domianURL']}/${this.url.importExcelUrl}`;\n      },\n      tableProps() {\n        let _this = this\n        return {\n          // 列表项是否可选择\n          rowSelection: {\n            selectedRowKeys: _this.selectedRowKeys,\n            onChange: (selectedRowKeys) => _this.selectedRowKeys = selectedRowKeys\n          }\n        }\n      }\n    },\n    methods: {\n      loadData(arg){\n        if(arg==1){\n          this.ipagination.current=1\n        }\n        this.loading = true\n        let params = this.getQueryParams()\n        return new Promise((resolve) => {\n          getAction(this.url.list,params).then(res=>{\n            if(res.success){\n              let result = res.result\n              if(Number(result.total)>0){\n                this.ipagination.total = Number(result.total)\n                this.dataSource = this.getDataByResult(res.result.records)\n                //update--begin--autor:lvdandan-----date:20201204------for：JT-31 删除成功后默认展开已展开信息\n                return this.loadDataByExpandedRows(this.dataSource)\n                //update--end--autor:lvdandan-----date:20201204------for：JT-31 删除成功后默认展开已展开信息\n              }else{\n                this.ipagination.total=0\n                this.dataSource=[]\n              }\n            }else{\n              this.$message.warning(res.message)\n            }\n          }).finally(()=>{\n            this.loading = false\n          })\n        })\n      },\n      getDataByResult(result){\n        if(result && result.length>0){\n          return result.map(item=>{\n            //判断是否标记了带有子节点\n            if(item[this.hasChildrenField]=='1'){\n              let loadChild = { id: item.id+'_loadChild', name: 'loading...', isLoading: true }\n              item.children = [loadChild]\n            }\n            return item\n          })\n        }\n      },\n      handleExpand(expanded, record){\n        // 判断是否是展开状态\n        if (expanded) {\n          this.expandedRowKeys.push(record.id)\n          if (record.children.length>0 && record.children[0].isLoading === true) {\n            let params = this.getQueryParams();//查询条件\n            params[this.pidField] = record.id\n            getAction(this.url.childList,params).then((res)=>{\n              if(res.success){\n                if(res.result && res.result.length>0){\n                  record.children = this.getDataByResult(res.result)\n                  this.dataSource = [...this.dataSource]\n                }else{\n                  record.children=''\n                  record.hasChildrenField='0'\n                }\n              }else{\n                this.$message.warning(res.message)\n              }\n            })\n          }\n        }else{\n          let keyIndex = this.expandedRowKeys.indexOf(record.id)\n          if(keyIndex>=0){\n            this.expandedRowKeys.splice(keyIndex, 1);\n          }\n        }\n      },\n      initDictConfig(){\n      },\n      modalFormOk(formData,arr){\n        if(!formData.id){\n          this.addOk(formData,arr)\n        }else{\n          this.editOk(formData,this.dataSource)\n          this.dataSource=[...this.dataSource]\n        }\n      },\n      editOk(formData,arr){\n        if(arr && arr.length>0){\n          for(let i=0;i<arr.length;i++){\n            if(arr[i].id==formData.id){\n              arr[i]=formData\n              break\n            }else{\n              this.editOk(formData,arr[i].children)\n            }\n          }\n        }\n      },\n      async addOk(formData,arr){\n        if(!formData[this.pidField]){\n          this.loadData()\n        }else{\n          this.expandedRowKeys=[]\n          console.log(\"22222\",arr)\n          for(let i of arr){\n            await this.expandTreeNode(i)\n          }\n        }\n      },\n      expandTreeNode(nodeId){\n        return new Promise((resolve,reject)=>{\n          this.getFormDataById(nodeId,this.dataSource)\n          let row = this.parentFormData\n          this.expandedRowKeys.push(nodeId)\n          let params = this.getQueryParams();//查询条件\n          params[this.pidField] = nodeId\n          getAction(this.url.childList,params).then((res)=>{\n            console.log(\"11111\",res)\n            if(res.success){\n              if(res.result && res.result.length>0){\n                row.children = this.getDataByResult(res.result)\n                this.dataSource = [...this.dataSource]\n                resolve()\n              }else{\n                row.children=''\n                row.hasChildrenField='0'\n                reject()\n              }\n            }else{\n              reject()\n            }\n          })\n        })\n      },\n      getFormDataById(id,arr){\n        if(arr && arr.length>0){\n          for(let i=0;i<arr.length;i++){\n            if(arr[i].id==id){\n              this.parentFormData = arr[i]\n            }else{\n              this.getFormDataById(id,arr[i].children)\n            }\n          }\n        }\n      },\n      handleAddSub(record){\n        this.subExpandedKeys = [];\n        this.getExpandKeysByPid(record.id,this.dataSource,this.dataSource)\n        this.$refs.modalForm.subExpandedKeys = this.subExpandedKeys;\n        this.$refs.modalForm.title = \"添加子分类\";\n        this.$refs.modalForm.edit({'pid':record.id});\n        this.$refs.modalForm.disableSubmit = false;\n      },\n      handleDelete: function (record) {\n        let that = this;\n        deleteAction(that.url.delete, {id: record.id}).then((res) => {\n          if (res.success) {\n            //update--begin--autor:lvdandan-----date:20201204------for：JT-31 删除成功后默认展开已展开信息\n            that.loadData();\n            //update--end--autor:lvdandan-----date:20201204------for：JT-31 删除成功后默认展开已展开信息\n          } else {\n            that.$message.warning(res.message);\n          }\n        });\n      },\n      // 添加子分类时获取所有父级id\n      getExpandKeysByPid(pid,arr,all){\n        if(pid && arr && arr.length>0){\n          for(let i=0;i<arr.length;i++){\n            if(arr[i].id==pid){\n              this.subExpandedKeys.push(arr[i].id)\n              this.getExpandKeysByPid(arr[i]['pid'],all,all)\n            }else{\n              this.getExpandKeysByPid(pid,arr[i].children,all)\n            }\n          }\n        }\n      },\n      // 根据已展开的行查询数据（用于保存后刷新时异步加载子级的数据）\n      loadDataByExpandedRows(dataList) {\n        if (this.expandedRowKeys.length > 0) {\n          return getAction(this.url.getChildListBatch,{ parentIds: this.expandedRowKeys.join(',') }).then(res=>{\n            if (res.success && res.result.records.length>0) {\n              //已展开的数据批量子节点\n              let records = res.result.records\n              const listMap = new Map();\n              for (let item of records) {\n                let pid = item[this.pidField];\n                if (this.expandedRowKeys.join(',').includes(pid)) {\n                  let mapList = listMap.get(pid);\n                  if (mapList == null) {\n                    mapList = [];\n                  }\n                  mapList.push(item);\n                  listMap.set(pid, mapList);\n                }\n              }\n              let childrenMap = listMap;\n              let fn = (list) => {\n                if(list) {\n                  list.forEach(data => {\n                    if (this.expandedRowKeys.includes(data.id)) {\n                      data.children = this.getDataByResult(childrenMap.get(data.id))\n                      fn(data.children)\n                    }\n                  })\n                }\n              }\n              fn(dataList)\n            }\n          })\n        } else {\n          return Promise.resolve()\n        }\n      },\n      \n       \n    }\n  }\n</script>\n<style scoped>\n  @import '~@assets/less/common.less'\n</style>"],"sourceRoot":"src/views/system"}]}