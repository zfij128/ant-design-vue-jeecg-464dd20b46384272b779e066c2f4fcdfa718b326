{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\dict\\JDictSelectUtil.js","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\dict\\JDictSelectUtil.js","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1665642923347}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"D:/\\u4E91\\u665F/\\u524D\\u7AEF/ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326/node_modules/@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n/**\n * 字典 util\n * author: scott\n * date: 20190109\n */\nimport { ajaxGetDictItems, getDictItemsFromCache } from '@/api/api';\nimport { getAction } from '@/api/manage';\n/**\n * 获取字典数组\n * @param dictCode 字典Code\n * @return List<Map>\n */\n\nexport function initDictOptions(_x) {\n  return _initDictOptions.apply(this, arguments);\n}\n/**\n * 字典值替换文本通用方法\n * @param dictOptions  字典数组\n * @param text  字典值\n * @return String\n */\n\nfunction _initDictOptions() {\n  _initDictOptions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dictCode) {\n    var _res, res;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (dictCode) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", '字典Code不能为空!');\n\n          case 2:\n            if (!getDictItemsFromCache(dictCode)) {\n              _context.next = 7;\n              break;\n            }\n\n            _res = {};\n            _res.result = getDictItemsFromCache(dictCode);\n            _res.success = true;\n            return _context.abrupt(\"return\", _res);\n\n          case 7:\n            _context.next = 9;\n            return ajaxGetDictItems(dictCode);\n\n          case 9:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _initDictOptions.apply(this, arguments);\n}\n\nexport function filterDictText(dictOptions, text) {\n  // --update-begin----author:sunjianlei---date:20200323------for: 字典翻译 text 允许逗号分隔 ---\n  if (text != null && Array.isArray(dictOptions)) {\n    var result = []; // 允许多个逗号分隔，允许传数组对象\n\n    var splitText;\n\n    if (Array.isArray(text)) {\n      splitText = text;\n    } else {\n      splitText = text.toString().trim().split(',');\n    }\n\n    var _iterator = _createForOfIteratorHelper(splitText),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var txt = _step.value;\n        var dictText = txt;\n\n        var _iterator2 = _createForOfIteratorHelper(dictOptions),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var dictItem = _step2.value;\n\n            if (txt.toString() === dictItem.value.toString()) {\n              dictText = dictItem.text || dictItem.title || dictItem.label;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        result.push(dictText);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return result.join(',');\n  }\n\n  return text; // --update-end----author:sunjianlei---date:20200323------for: 字典翻译 text 允许逗号分隔 ---\n}\n/**\n * 字典值替换文本通用方法(多选)\n * @param dictOptions  字典数组\n * @param text  字典值\n * @return String\n */\n\nexport function filterMultiDictText(dictOptions, text) {\n  //js “!text” 认为0为空，所以做提前处理\n  if (text === 0 || text === '0') {\n    if (dictOptions) {\n      var _iterator3 = _createForOfIteratorHelper(dictOptions),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var dictItem = _step3.value;\n\n          if (text == dictItem.value) {\n            return dictItem.text;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }\n\n  if (!text || text == 'null' || !dictOptions || dictOptions.length == 0) {\n    return \"\";\n  }\n\n  var re = \"\";\n  text = text.toString();\n  var arr = text.split(\",\");\n  dictOptions.forEach(function (option) {\n    if (option) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] === option.value) {\n          re += option.text + \",\";\n          break;\n        }\n      }\n    }\n  });\n\n  if (re == \"\") {\n    return text;\n  }\n\n  return re.substring(0, re.length - 1);\n}\n/**\n * 翻译字段值对应的文本\n * @param children\n * @returns string\n */\n\nexport function filterDictTextByCache(dictCode, key) {\n  if (key == null || key.length == 0) {\n    return;\n  }\n\n  if (!dictCode) {\n    return '字典Code不能为空!';\n  } //优先从缓存中读取字典配置\n\n\n  if (getDictItemsFromCache(dictCode)) {\n    var item = getDictItemsFromCache(dictCode).filter(function (t) {\n      return t[\"value\"] == key;\n    });\n\n    if (item && item.length > 0) {\n      return item[0][\"text\"];\n    }\n  }\n}\n/** 通过code获取字典数组 */\n\nexport function getDictItems(_x2, _x3) {\n  return _getDictItems.apply(this, arguments);\n}\n\nfunction _getDictItems() {\n  _getDictItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dictCode, params) {\n    var desformDictItems;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!getDictItemsFromCache(dictCode)) {\n              _context2.next = 3;\n              break;\n            }\n\n            desformDictItems = getDictItemsFromCache(dictCode).map(function (item) {\n              return _objectSpread(_objectSpread({}, item), {}, {\n                label: item.text\n              });\n            });\n            return _context2.abrupt(\"return\", desformDictItems);\n\n          case 3:\n            _context2.next = 5;\n            return ajaxGetDictItems(dictCode, params).then(function (_ref) {\n              var success = _ref.success,\n                  result = _ref.result;\n\n              if (success) {\n                var _res2 = result.map(function (item) {\n                  return _objectSpread(_objectSpread({}, item), {}, {\n                    label: item.text\n                  });\n                });\n\n                console.log('------- 从DB中获取到了字典-------dictCode : ', dictCode, _res2);\n                return Promise.resolve(_res2);\n              } else {\n                console.error('getDictItems error: : ', res);\n                return Promise.resolve([]);\n              }\n            }).catch(function (res) {\n              console.error('getDictItems error: ', res);\n              return Promise.resolve([]);\n            });\n\n          case 5:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getDictItems.apply(this, arguments);\n}",{"version":3,"sources":["D:/云晟/前端/ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326/src/components/dict/JDictSelectUtil.js"],"names":["ajaxGetDictItems","getDictItemsFromCache","getAction","initDictOptions","dictCode","res","result","success","filterDictText","dictOptions","text","Array","isArray","splitText","toString","trim","split","txt","dictText","dictItem","value","title","label","push","join","filterMultiDictText","length","re","arr","forEach","option","i","substring","filterDictTextByCache","key","item","filter","t","getDictItems","params","desformDictItems","map","then","console","log","Promise","resolve","error","catch"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;AAMA,SAAQA,gBAAR,EAAyBC,qBAAzB,QAAqD,WAArD;AACA,SAAQC,SAAR,QAAwB,cAAxB;AAEA;;;;;;AAKA,gBAAsBC,eAAtB;AAAA;AAAA;AAgBA;;;;;;;;8EAhBO,iBAA+BC,QAA/B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBACAA,QADA;AAAA;AAAA;AAAA;;AAAA,6CAEI,aAFJ;;AAAA;AAAA,iBAKFH,qBAAqB,CAACG,QAAD,CALnB;AAAA;AAAA;AAAA;;AAMCC,YAAAA,IAND,GAMO,EANP;AAOHA,YAAAA,IAAG,CAACC,MAAJ,GAAaL,qBAAqB,CAACG,QAAD,CAAlC;AACAC,YAAAA,IAAG,CAACE,OAAJ,GAAc,IAAd;AARG,6CASIF,IATJ;;AAAA;AAAA;AAAA,mBAYWL,gBAAgB,CAACI,QAAD,CAZ3B;;AAAA;AAYDC,YAAAA,GAZC;AAAA,6CAaEA,GAbF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAsBP,OAAO,SAASG,cAAT,CAAwBC,WAAxB,EAAqCC,IAArC,EAA2C;AAChD;AACA,MAAIA,IAAI,IAAI,IAAR,IAAgBC,KAAK,CAACC,OAAN,CAAcH,WAAd,CAApB,EAAgD;AAC9C,QAAIH,MAAM,GAAG,EAAb,CAD8C,CAE9C;;AACA,QAAIO,SAAJ;;AACA,QAAIF,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AACvBG,MAAAA,SAAS,GAAGH,IAAZ;AACD,KAFD,MAEO;AACLG,MAAAA,SAAS,GAAGH,IAAI,CAACI,QAAL,GAAgBC,IAAhB,GAAuBC,KAAvB,CAA6B,GAA7B,CAAZ;AACD;;AAR6C,+CAS9BH,SAT8B;AAAA;;AAAA;AAS9C,0DAA2B;AAAA,YAAlBI,GAAkB;AACzB,YAAIC,QAAQ,GAAGD,GAAf;;AADyB,oDAEJR,WAFI;AAAA;;AAAA;AAEzB,iEAAkC;AAAA,gBAAzBU,QAAyB;;AAChC,gBAAIF,GAAG,CAACH,QAAJ,OAAmBK,QAAQ,CAACC,KAAT,CAAeN,QAAf,EAAvB,EAAkD;AAChDI,cAAAA,QAAQ,GAAIC,QAAQ,CAACT,IAAT,IAAiBS,QAAQ,CAACE,KAA1B,IAAmCF,QAAQ,CAACG,KAAxD;AACA;AACD;AACF;AAPwB;AAAA;AAAA;AAAA;AAAA;;AAQzBhB,QAAAA,MAAM,CAACiB,IAAP,CAAYL,QAAZ;AACD;AAlB6C;AAAA;AAAA;AAAA;AAAA;;AAmB9C,WAAOZ,MAAM,CAACkB,IAAP,CAAY,GAAZ,CAAP;AACD;;AACD,SAAOd,IAAP,CAvBgD,CAwBhD;AACD;AAED;;;;;;;AAMA,OAAO,SAASe,mBAAT,CAA6BhB,WAA7B,EAA0CC,IAA1C,EAAgD;AACrD;AACA,MAAGA,IAAI,KAAK,CAAT,IAAcA,IAAI,KAAK,GAA1B,EAA8B;AAC5B,QAAGD,WAAH,EAAe;AAAA,kDACQA,WADR;AAAA;;AAAA;AACb,+DAAkC;AAAA,cAAzBU,QAAyB;;AAChC,cAAIT,IAAI,IAAIS,QAAQ,CAACC,KAArB,EAA4B;AAC1B,mBAAOD,QAAQ,CAACT,IAAhB;AACD;AACF;AALY;AAAA;AAAA;AAAA;AAAA;AAMd;AACF;;AAED,MAAG,CAACA,IAAD,IAASA,IAAI,IAAE,MAAf,IAAyB,CAACD,WAA1B,IAAyCA,WAAW,CAACiB,MAAZ,IAAoB,CAAhE,EAAkE;AAChE,WAAO,EAAP;AACD;;AACD,MAAIC,EAAE,GAAG,EAAT;AACAjB,EAAAA,IAAI,GAAGA,IAAI,CAACI,QAAL,EAAP;AACA,MAAIc,GAAG,GAAGlB,IAAI,CAACM,KAAL,CAAW,GAAX,CAAV;AACAP,EAAAA,WAAW,CAACoB,OAAZ,CAAoB,UAAUC,MAAV,EAAkB;AACpC,QAAGA,MAAH,EAAU;AACR,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACH,GAAG,CAACF,MAAlB,EAAyBK,CAAC,EAA1B,EAA6B;AAC3B,YAAIH,GAAG,CAACG,CAAD,CAAH,KAAWD,MAAM,CAACV,KAAtB,EAA6B;AAC3BO,UAAAA,EAAE,IAAIG,MAAM,CAACpB,IAAP,GAAY,GAAlB;AACA;AACD;AACF;AACF;AACF,GATD;;AAUA,MAAGiB,EAAE,IAAE,EAAP,EAAU;AACR,WAAOjB,IAAP;AACD;;AACD,SAAOiB,EAAE,CAACK,SAAH,CAAa,CAAb,EAAeL,EAAE,CAACD,MAAH,GAAU,CAAzB,CAAP;AACD;AAED;;;;;;AAKA,OAAO,SAASO,qBAAT,CAA+B7B,QAA/B,EAAyC8B,GAAzC,EAA8C;AACnD,MAAGA,GAAG,IAAE,IAAL,IAAYA,GAAG,CAACR,MAAJ,IAAY,CAA3B,EAA6B;AAC3B;AACD;;AACD,MAAI,CAACtB,QAAL,EAAe;AACb,WAAO,aAAP;AACD,GANkD,CAOlD;;;AACD,MAAGH,qBAAqB,CAACG,QAAD,CAAxB,EAAmC;AACjC,QAAI+B,IAAI,GAAGlC,qBAAqB,CAACG,QAAD,CAArB,CAAgCgC,MAAhC,CAAuC,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAAC,OAAD,CAAD,IAAcH,GAAlB;AAAA,KAAxC,CAAX;;AACA,QAAGC,IAAI,IAAIA,IAAI,CAACT,MAAL,GAAY,CAAvB,EAAyB;AACvB,aAAOS,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,CAAP;AACD;AACF;AACF;AAED;;AACA,gBAAsBG,YAAtB;AAAA;AAAA;;;2EAAO,kBAA4BlC,QAA5B,EAAsCmC,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEAtC,qBAAqB,CAACG,QAAD,CAFrB;AAAA;AAAA;AAAA;;AAGGoC,YAAAA,gBAHH,GAGsBvC,qBAAqB,CAACG,QAAD,CAArB,CAAgCqC,GAAhC,CAAoC,UAAAN,IAAI;AAAA,qDAASA,IAAT;AAAeb,gBAAAA,KAAK,EAAEa,IAAI,CAACzB;AAA3B;AAAA,aAAxC,CAHtB;AAAA,8CAIM8B,gBAJN;;AAAA;AAAA;AAAA,mBAQUxC,gBAAgB,CAACI,QAAD,EAAWmC,MAAX,CAAhB,CAAmCG,IAAnC,CAAwC,gBAAuB;AAAA,kBAArBnC,OAAqB,QAArBA,OAAqB;AAAA,kBAAZD,MAAY,QAAZA,MAAY;;AAC1E,kBAAIC,OAAJ,EAAa;AACX,oBAAIF,KAAG,GAAGC,MAAM,CAACmC,GAAP,CAAW,UAAAN,IAAI;AAAA,yDAASA,IAAT;AAAeb,oBAAAA,KAAK,EAAEa,IAAI,CAACzB;AAA3B;AAAA,iBAAf,CAAV;;AACAiC,gBAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAAoDxC,QAApD,EAA8DC,KAA9D;AACA,uBAAOwC,OAAO,CAACC,OAAR,CAAgBzC,KAAhB,CAAP;AACD,eAJD,MAIO;AACLsC,gBAAAA,OAAO,CAACI,KAAR,CAAc,wBAAd,EAAwC1C,GAAxC;AACA,uBAAOwC,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACD;AACF,aATY,EASVE,KATU,CASJ,UAAC3C,GAAD,EAAS;AAChBsC,cAAAA,OAAO,CAACI,KAAR,CAAc,sBAAd,EAAsC1C,GAAtC;AACA,qBAAOwC,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACD,aAZY,CARV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/**\n * 字典 util\n * author: scott\n * date: 20190109\n */\n\nimport {ajaxGetDictItems,getDictItemsFromCache} from '@/api/api'\nimport {getAction} from '@/api/manage'\n\n/**\n * 获取字典数组\n * @param dictCode 字典Code\n * @return List<Map>\n */\nexport async function initDictOptions(dictCode) {\n  if (!dictCode) {\n    return '字典Code不能为空!';\n  }\n  //优先从缓存中读取字典配置\n  if(getDictItemsFromCache(dictCode)){\n    let res = {}\n    res.result = getDictItemsFromCache(dictCode);\n    res.success = true;\n    return res;\n  }\n  //获取字典数组\n  let res = await ajaxGetDictItems(dictCode);\n  return res;\n}\n\n/**\n * 字典值替换文本通用方法\n * @param dictOptions  字典数组\n * @param text  字典值\n * @return String\n */\nexport function filterDictText(dictOptions, text) {\n  // --update-begin----author:sunjianlei---date:20200323------for: 字典翻译 text 允许逗号分隔 ---\n  if (text != null && Array.isArray(dictOptions)) {\n    let result = []\n    // 允许多个逗号分隔，允许传数组对象\n    let splitText\n    if (Array.isArray(text)) {\n      splitText = text\n    } else {\n      splitText = text.toString().trim().split(',')\n    }\n    for (let txt of splitText) {\n      let dictText = txt\n      for (let dictItem of dictOptions) {\n        if (txt.toString() === dictItem.value.toString()) {\n          dictText = (dictItem.text || dictItem.title || dictItem.label)\n          break\n        }\n      }\n      result.push(dictText)\n    }\n    return result.join(',')\n  }\n  return text\n  // --update-end----author:sunjianlei---date:20200323------for: 字典翻译 text 允许逗号分隔 ---\n}\n\n/**\n * 字典值替换文本通用方法(多选)\n * @param dictOptions  字典数组\n * @param text  字典值\n * @return String\n */\nexport function filterMultiDictText(dictOptions, text) {\n  //js “!text” 认为0为空，所以做提前处理\n  if(text === 0 || text === '0'){\n    if(dictOptions){\n      for (let dictItem of dictOptions) {\n        if (text == dictItem.value) {\n          return dictItem.text\n        }\n      }\n    }\n  }\n\n  if(!text || text=='null' || !dictOptions || dictOptions.length==0){\n    return \"\"\n  }\n  let re = \"\";\n  text = text.toString()\n  let arr = text.split(\",\")\n  dictOptions.forEach(function (option) {\n    if(option){\n      for(let i=0;i<arr.length;i++){\n        if (arr[i] === option.value) {\n          re += option.text+\",\";\n          break;\n        }\n      }\n    }\n  });\n  if(re==\"\"){\n    return text;\n  }\n  return re.substring(0,re.length-1);\n}\n\n/**\n * 翻译字段值对应的文本\n * @param children\n * @returns string\n */\nexport function filterDictTextByCache(dictCode, key) {\n  if(key==null ||key.length==0){\n    return;\n  }\n  if (!dictCode) {\n    return '字典Code不能为空!';\n  }\n   //优先从缓存中读取字典配置\n  if(getDictItemsFromCache(dictCode)){\n    let item = getDictItemsFromCache(dictCode).filter(t => t[\"value\"] == key)\n    if(item && item.length>0){\n      return item[0][\"text\"]\n    }\n  }\n}\n\n/** 通过code获取字典数组 */\nexport async function getDictItems(dictCode, params) {\n    //优先从缓存中读取字典配置\n    if(getDictItemsFromCache(dictCode)){\n      let desformDictItems = getDictItemsFromCache(dictCode).map(item => ({...item, label: item.text}))\n      return desformDictItems;\n    }\n\n    //缓存中没有，就请求后台\n    return await ajaxGetDictItems(dictCode, params).then(({success, result}) => {\n      if (success) {\n        let res = result.map(item => ({...item, label: item.text}))\n        console.log('------- 从DB中获取到了字典-------dictCode : ', dictCode, res)\n        return Promise.resolve(res)\n      } else {\n        console.error('getDictItems error: : ', res)\n        return Promise.resolve([])\n      }\n    }).catch((res) => {\n      console.error('getDictItems error: ', res)\n      return Promise.resolve([])\n    })\n}"]}]}