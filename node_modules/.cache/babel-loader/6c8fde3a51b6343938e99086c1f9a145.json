{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\jeecg\\JTreeTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\jeecg\\JTreeTable.vue","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js","mtime":1665642924058}],"contextDependencies":[],"result":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getAction } from '@/api/manage';\nexport default {\n  name: 'JTreeTable',\n  props: {\n    rowKey: {\n      type: String,\n      default: 'id'\n    },\n    // 根据什么查询，如果传递 id 就根据 id 查询\n    queryKey: {\n      type: String,\n      default: 'parentId'\n    },\n    queryParams: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    // 查询顶级时的值，如果顶级为0，则传0\n    topValue: {\n      type: String,\n      default: null\n    },\n    columns: {\n      type: Array,\n      required: true\n    },\n    url: {\n      type: String,\n      required: true\n    },\n    childrenUrl: {\n      type: String,\n      default: null\n    },\n    tableProps: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n\n    /** 是否在创建组件的时候就查询数据 */\n    immediateRequest: {\n      type: Boolean,\n      default: true\n    },\n    condition: {\n      type: String,\n      default: '',\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      dataSource: [],\n      expandedRowKeys: []\n    };\n  },\n  computed: {\n    getChildrenUrl: function getChildrenUrl() {\n      if (this.childrenUrl) {\n        return this.childrenUrl;\n      } else {\n        return this.url;\n      }\n    },\n    slots: function slots() {\n      var slots = [];\n\n      var _iterator = _createForOfIteratorHelper(this.columns),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var column = _step.value;\n\n          if (column.scopedSlots && column.scopedSlots.customRender) {\n            slots.push(column.scopedSlots.customRender);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return slots;\n    },\n    tableAttrs: function tableAttrs() {\n      return Object.assign(this.$attrs, this.tableProps);\n    }\n  },\n  watch: {\n    queryParams: {\n      deep: true,\n      handler: function handler() {\n        this.loadData();\n      }\n    }\n  },\n  created: function created() {\n    if (this.immediateRequest) this.loadData();\n  },\n  methods: {\n    /** 加载数据*/\n    loadData: function loadData() {\n      var _this = this;\n\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.topValue;\n      var first = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var url = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.url;\n      this.$emit('requestBefore', {\n        first: first\n      });\n\n      if (first) {\n        this.expandedRowKeys = [];\n      }\n\n      var params = Object.assign({}, this.queryParams || {});\n      params[this.queryKey] = id;\n\n      if (this.condition && this.condition.length > 0) {\n        params['condition'] = this.condition;\n      }\n\n      return getAction(url, params).then(function (res) {\n        var list = [];\n\n        if (res.result instanceof Array) {\n          list = res.result;\n        } else if (res.result.records instanceof Array) {\n          list = res.result.records;\n        } else {\n          throw '返回数据类型不识别';\n        }\n\n        var dataSource = list.map(function (item) {\n          // 判断是否标记了带有子级\n          if (item.hasChildren === true) {\n            var _loadChild;\n\n            // 查找第一个带有dataIndex的值的列\n            var firstColumn;\n\n            var _iterator2 = _createForOfIteratorHelper(_this.columns),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var column = _step2.value;\n                firstColumn = column.dataIndex;\n                if (firstColumn) break;\n              } // 定义默认展开时显示的loading子级，实际子级数据只在展开时加载\n\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n            var loadChild = (_loadChild = {\n              id: \"\".concat(item.id, \"_loadChild\")\n            }, _defineProperty(_loadChild, firstColumn, 'loading...'), _defineProperty(_loadChild, \"isLoading\", true), _loadChild);\n            item.children = [loadChild];\n          }\n\n          return item;\n        });\n\n        if (first) {\n          _this.dataSource = dataSource;\n        }\n\n        _this.$emit('requestSuccess', {\n          first: first,\n          dataSource: dataSource,\n          res: res\n        });\n\n        return Promise.resolve(dataSource);\n      }).finally(function () {\n        return _this.$emit('requestFinally', {\n          first: first\n        });\n      });\n    },\n\n    /** 点击展开图标时触发 */\n    handleExpand: function handleExpand(expanded, record) {\n      // 判断是否是展开状态\n      if (expanded) {\n        // 判断子级的首个项的标记是否是“正在加载中”，如果是就加载数据\n        if (record.children[0].isLoading === true) {\n          this.loadData(record.id, false, this.getChildrenUrl).then(function (dataSource) {\n            // 处理好的数据可直接赋值给children\n            if (dataSource.length === 0) {\n              record.children = null;\n            } else {\n              record.children = dataSource;\n            }\n          });\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["JTreeTable.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <a-table\n    :rowKey=\"rowKey\"\n    :columns=\"columns\"\n    :dataSource=\"dataSource\"\n    :expandedRowKeys=\"expandedRowKeys\"\n    v-bind=\"tableAttrs\"\n    v-on=\"$listeners\"\n    @expand=\"handleExpand\"\n    @expandedRowsChange=\"expandedRowKeys=$event\">\n\n    <template v-for=\"(slotItem) of slots\" :slot=\"slotItem\" slot-scope=\"text, record, index\">\n      <slot :name=\"slotItem\" v-bind=\"{text,record,index}\"></slot>\n    </template>\n\n  </a-table>\n</template>\n\n<script>\n  import { getAction } from '@/api/manage'\n\n  export default {\n    name: 'JTreeTable',\n    props: {\n      rowKey: {\n        type: String,\n        default: 'id'\n      },\n      // 根据什么查询，如果传递 id 就根据 id 查询\n      queryKey: {\n        type: String,\n        default: 'parentId'\n      },\n      queryParams: {\n        type: Object,\n        default: () => ({})\n      },\n      // 查询顶级时的值，如果顶级为0，则传0\n      topValue: {\n        type: String,\n        default: null\n      },\n      columns: {\n        type: Array,\n        required: true\n      },\n      url: {\n        type: String,\n        required: true\n      },\n      childrenUrl: {\n        type: String,\n        default: null\n      },\n      tableProps: {\n        type: Object,\n        default: () => ({})\n      },\n      /** 是否在创建组件的时候就查询数据 */\n      immediateRequest: {\n        type: Boolean,\n        default: true\n      },\n      condition:{\n        type:String,\n        default:'',\n        required:false\n      }\n    },\n    data() {\n      return {\n        dataSource: [],\n        expandedRowKeys: []\n      }\n    },\n    computed: {\n      getChildrenUrl() {\n        if (this.childrenUrl) {\n          return this.childrenUrl\n        } else {\n          return this.url\n        }\n      },\n      slots() {\n        let slots = []\n        for (let column of this.columns) {\n          if (column.scopedSlots && column.scopedSlots.customRender) {\n            slots.push(column.scopedSlots.customRender)\n          }\n        }\n        return slots\n      },\n      tableAttrs() {\n        return Object.assign(this.$attrs, this.tableProps)\n      }\n    },\n    watch: {\n      queryParams: {\n        deep: true,\n        handler() {\n          this.loadData()\n        }\n      }\n    },\n    created() {\n      if (this.immediateRequest) this.loadData()\n    },\n    methods: {\n\n      /** 加载数据*/\n      loadData(id = this.topValue, first = true, url = this.url) {\n        this.$emit('requestBefore', { first })\n\n        if (first) {\n          this.expandedRowKeys = []\n        }\n\n        let params = Object.assign({}, this.queryParams || {})\n        params[this.queryKey] = id\n        if(this.condition && this.condition.length>0){\n          params['condition'] = this.condition\n        }\n\n        return getAction(url, params).then(res => {\n          let list = []\n          if (res.result instanceof Array) {\n            list = res.result\n          } else if (res.result.records instanceof Array) {\n            list = res.result.records\n          } else {\n            throw '返回数据类型不识别'\n          }\n          let dataSource = list.map(item => {\n            // 判断是否标记了带有子级\n            if (item.hasChildren === true) {\n              // 查找第一个带有dataIndex的值的列\n              let firstColumn\n              for (let column of this.columns) {\n                firstColumn = column.dataIndex\n                if (firstColumn) break\n              }\n              // 定义默认展开时显示的loading子级，实际子级数据只在展开时加载\n              let loadChild = { id: `${item.id}_loadChild`, [firstColumn]: 'loading...', isLoading: true }\n              item.children = [loadChild]\n            }\n            return item\n          })\n          if (first) {\n            this.dataSource = dataSource\n          }\n          this.$emit('requestSuccess', { first, dataSource, res })\n          return Promise.resolve(dataSource)\n        }).finally(() => this.$emit('requestFinally', { first }))\n      },\n\n      /** 点击展开图标时触发 */\n      handleExpand(expanded, record) {\n        // 判断是否是展开状态\n        if (expanded) {\n          // 判断子级的首个项的标记是否是“正在加载中”，如果是就加载数据\n          if (record.children[0].isLoading === true) {\n            this.loadData(record.id, false, this.getChildrenUrl).then(dataSource => {\n              // 处理好的数据可直接赋值给children\n              if (dataSource.length === 0) {\n                record.children = null\n              } else {\n                record.children = dataSource\n              }\n            })\n          }\n        }\n      }\n\n    }\n  }\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/components/jeecg"}]}