{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\jeecg\\JVxeTable\\components\\cells\\JVxeTagsCell.js","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\jeecg\\JVxeTable\\components\\cells\\JVxeTagsCell.js","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1665642923347}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport JVxeCellMixins from '@/components/jeecg/JVxeTable/mixins/JVxeCellMixins'; // tags 组件的显示组件\n\nexport var TagsSpanCell = {\n  name: 'JVxeTagsCell',\n  mixins: [JVxeCellMixins],\n  data: function data() {\n    return {\n      innerTags: []\n    };\n  },\n  watch: {\n    innerValue: {\n      immediate: true,\n      handler: function handler(value) {\n        if (value !== this.innerTags.join(';')) {\n          var rv = replaceValue(value);\n          this.innerTags = rv.split(';');\n          this.handleChangeCommon(rv);\n        }\n      }\n    }\n  },\n  methods: {\n    renderTags: function renderTags(h) {\n      var tags = [];\n\n      var _iterator = _createForOfIteratorHelper(this.innerTags),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var tag = _step.value;\n\n          if (tag) {\n            var tagProps = {};\n            var tagStyle = {};\n            var setTagColor = this.originColumn.setTagColor;\n\n            if (typeof setTagColor === 'function') {\n              /**\n               * 设置 tag 颜色\n               *\n               * @param event 包含的字段：\n               * event.tagValue 当前tag的值\n               * event.value 当前原始值\n               * event.row 当前行的所有值\n               * event.column 当前列的配置\n               * event.column.own 当前列的原始配置\n               * @return Array | String 可以返回一个数组，数据第一项是tag背景颜色，第二项是字体颜色。也可以返回一个字符串，即tag背景颜色\n               */\n              var color = setTagColor({\n                tagValue: tag,\n                value: this.innerValue,\n                row: this.row,\n                column: this.column\n              });\n\n              if (Array.isArray(color)) {\n                tagProps.color = color[0];\n                tagStyle.color = color[1];\n              } else if (color && typeof color === 'string') {\n                tagProps.color = color;\n              }\n            }\n\n            tags.push(h('a-tag', {\n              props: tagProps,\n              style: tagStyle\n            }, [tag]));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return tags;\n    }\n  },\n  render: function render(h) {\n    return h('div', {}, [this.renderTags(h)]);\n  }\n}; // tags 组件的输入框\n\nexport var TagsInputCell = {\n  name: 'JVxeTagsInputCell',\n  mixins: [JVxeCellMixins],\n  data: function data() {\n    return {\n      innerTagValue: ''\n    };\n  },\n  watch: {\n    innerValue: {\n      immediate: true,\n      handler: function handler(value) {\n        if (value !== this.innerTagValue) {\n          this.handleInputChange(value);\n        }\n      }\n    }\n  },\n  methods: {\n    handleInputChange: function handleInputChange(value, event) {\n      this.innerTagValue = replaceValue(value, event);\n      this.handleChangeCommon(this.innerTagValue);\n      return this.innerTagValue;\n    }\n  },\n  render: function render(h) {\n    var _this = this;\n\n    return h('a-input', {\n      props: _objectSpread({\n        value: this.innerValue\n      }, this.cellProps),\n      on: {\n        change: function change(event) {\n          var target = event.target,\n              value = event.target.value;\n\n          var newValue = _this.handleInputChange(value, event);\n\n          if (newValue !== value) {\n            target.value = newValue;\n          }\n        }\n      }\n    });\n  }\n}; // 将值每隔两位加上一个分号\n\nfunction replaceValue(value, event) {\n  if (value) {\n    // 首先去掉现有的分号\n    value = value.replace(/;/g, ''); // 然后再遍历添加分号\n\n    var rv = '';\n    var splitArr = value.split('');\n    var count = 0;\n    splitArr.forEach(function (val, index) {\n      rv += val;\n      var position = index + 1;\n\n      if (position % 2 === 0 && position < splitArr.length) {\n        count++;\n        rv += ';';\n      }\n    });\n\n    if (event && count > 0) {\n      var target = event.target,\n          selectionStart = event.target.selectionStart;\n      target.selectionStart = selectionStart + count;\n      target.selectionEnd = selectionStart + count;\n    }\n\n    return rv;\n  }\n\n  return '';\n}",{"version":3,"sources":["D:/云晟/前端/ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326/src/components/jeecg/JVxeTable/components/cells/JVxeTagsCell.js"],"names":["JVxeCellMixins","TagsSpanCell","name","mixins","data","innerTags","watch","innerValue","immediate","handler","value","join","rv","replaceValue","split","handleChangeCommon","methods","renderTags","h","tags","tag","tagProps","tagStyle","setTagColor","originColumn","color","tagValue","row","column","Array","isArray","push","props","style","render","TagsInputCell","innerTagValue","handleInputChange","event","cellProps","on","change","target","newValue","replace","splitArr","count","forEach","val","index","position","length","selectionStart","selectionEnd"],"mappings":"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","sourcesContent":["import JVxeCellMixins from '@/components/jeecg/JVxeTable/mixins/JVxeCellMixins'\n\n// tags 组件的显示组件\nexport const TagsSpanCell = {\n  name: 'JVxeTagsCell',\n  mixins: [JVxeCellMixins],\n  data() {\n    return {\n      innerTags: [],\n    }\n  },\n  watch: {\n    innerValue: {\n      immediate: true,\n      handler(value) {\n        if (value !== this.innerTags.join(';')) {\n          let rv = replaceValue(value)\n          this.innerTags = rv.split(';')\n          this.handleChangeCommon(rv)\n        }\n      },\n    },\n  },\n  methods: {\n    renderTags(h) {\n      let tags = []\n      for (let tag of this.innerTags) {\n        if (tag) {\n          let tagProps = {}\n          let tagStyle = {}\n          let setTagColor = this.originColumn.setTagColor\n          if (typeof setTagColor === 'function') {\n            /**\n             * 设置 tag 颜色\n             *\n             * @param event 包含的字段：\n             * event.tagValue 当前tag的值\n             * event.value 当前原始值\n             * event.row 当前行的所有值\n             * event.column 当前列的配置\n             * event.column.own 当前列的原始配置\n             * @return Array | String 可以返回一个数组，数据第一项是tag背景颜色，第二项是字体颜色。也可以返回一个字符串，即tag背景颜色\n             */\n            let color = setTagColor({\n              tagValue: tag,\n              value: this.innerValue,\n              row: this.row,\n              column: this.column,\n            })\n            if (Array.isArray(color)) {\n              tagProps.color = color[0]\n              tagStyle.color = color[1]\n            } else if (color && typeof color === 'string') {\n              tagProps.color = color\n            }\n          }\n          tags.push(h('a-tag', {\n            props: tagProps,\n            style: tagStyle,\n          }, [tag]))\n        }\n      }\n      return tags\n    },\n  },\n  render(h) {\n    return h('div', {}, [\n      this.renderTags(h)\n    ])\n  },\n}\n\n// tags 组件的输入框\nexport const TagsInputCell = {\n  name: 'JVxeTagsInputCell',\n  mixins: [JVxeCellMixins],\n  data() {\n    return {\n      innerTagValue: '',\n    }\n  },\n  watch: {\n    innerValue: {\n      immediate: true,\n      handler(value) {\n        if (value !== this.innerTagValue) {\n          this.handleInputChange(value)\n        }\n      },\n    },\n  },\n  methods: {\n\n    handleInputChange(value, event) {\n      this.innerTagValue = replaceValue(value, event)\n      this.handleChangeCommon(this.innerTagValue)\n      return this.innerTagValue\n    },\n\n  },\n  render(h) {\n    return h('a-input', {\n      props: {\n        value: this.innerValue,\n        ...this.cellProps\n      },\n      on: {\n        change: (event) => {\n          let {target, target: {value}} = event\n          let newValue = this.handleInputChange(value, event)\n          if (newValue !== value) {\n            target.value = newValue\n          }\n        }\n      },\n    })\n  },\n}\n\n// 将值每隔两位加上一个分号\nfunction replaceValue(value, event) {\n  if (value) {\n    // 首先去掉现有的分号\n    value = value.replace(/;/g, '')\n    // 然后再遍历添加分号\n    let rv = ''\n    let splitArr = value.split('')\n    let count = 0\n    splitArr.forEach((val, index) => {\n      rv += val\n      let position = index + 1\n      if (position % 2 === 0 && position < splitArr.length) {\n        count++\n        rv += ';'\n      }\n    })\n    if (event && count > 0) {\n      let {target, target: {selectionStart}} = event\n      target.selectionStart = selectionStart + count\n      target.selectionEnd = selectionStart + count\n    }\n    return rv\n  }\n  return ''\n}\n"]}]}