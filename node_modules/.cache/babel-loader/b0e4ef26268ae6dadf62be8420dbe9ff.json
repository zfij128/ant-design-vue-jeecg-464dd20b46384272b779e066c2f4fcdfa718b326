{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\jeecg\\JModal\\ModalDragMixins.js","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\jeecg\\JModal\\ModalDragMixins.js","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1665642923347}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"D:/\\u4E91\\u665F/\\u524D\\u7AEF/ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { getRefPromise } from '@/utils/util';\n/** JModal 的拖拽混入 */\n\nexport default {\n  data: function data() {\n    return {\n      // 拖动配置\n      dragSettings: {\n        // 上次拖动top记录\n        top: null,\n        // 上次拖动left记录\n        left: null,\n        wrapEl: null,\n        dragEl: null,\n        headerEl: null\n      }\n    };\n  },\n  watch: {\n    visible: function visible() {\n      if (!this.visible || !this.draggable) {\n        return;\n      }\n\n      this.handleDrag();\n    },\n    draggable: function draggable() {\n      if (!this.visible || !this.draggable) {\n        return;\n      }\n\n      this.handleDrag();\n    }\n  },\n  methods: {\n    handleDrag: function () {\n      var _handleDrag = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var modalRef, dragWraps, wrapEl, display, draggable;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getRefPromise(this, 'modal');\n\n              case 2:\n                modalRef = _context.sent;\n                dragWraps = modalRef.$el.querySelectorAll('.ant-modal-wrap');\n                wrapEl = dragWraps[0];\n\n                if (wrapEl) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 7:\n                this.dragSettings.wrapEl = wrapEl;\n                this.dragSettings.dragEl = wrapEl.querySelector('.ant-modal');\n                this.dragSettings.headerEl = wrapEl.querySelector('.ant-modal-header');\n                display = getStyle(wrapEl, 'display');\n                draggable = wrapEl.getAttribute('data-drag');\n\n                if (display !== 'none') {\n                  // 拖拽位置\n                  if (draggable === null || this.destroyOnClose) {\n                    this.enableDrag(wrapEl);\n                  }\n                }\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleDrag() {\n        return _handleDrag.apply(this, arguments);\n      }\n\n      return handleDrag;\n    }(),\n\n    /** 启用拖拽 */\n    enableDrag: function enableDrag() {\n      var _this = this;\n\n      var _this$dragSettings = this.dragSettings,\n          wrapEl = _this$dragSettings.wrapEl,\n          dragEl = _this$dragSettings.dragEl,\n          headerEl = _this$dragSettings.headerEl;\n      if (!wrapEl) return;\n      wrapEl.setAttribute('data-drag', this.draggable);\n      if (!headerEl || !dragEl || !this.draggable) return; // 还原上一次移动的位置\n\n      this.resetModalPosition();\n      headerEl.style.cursor = 'move';\n\n      headerEl.onmousedown = function (e) {\n        if (!e) return; // 鼠标按下，计算当前元素距离可视区的距离\n\n        var disX = e.clientX;\n        var disY = e.clientY;\n        var screenWidth = document.body.clientWidth; // body当前宽度\n\n        var screenHeight = document.documentElement.clientHeight; // 可见区域高度(应为body高度，可某些环境下无法获取)\n\n        var dragElWidth = dragEl.offsetWidth; // 对话框宽度\n\n        var dragElHeight = dragEl.offsetHeight; // 对话框高度\n\n        var minDragElLeft = dragEl.offsetLeft;\n        var maxDragElLeft = screenWidth - dragEl.offsetLeft - dragElWidth;\n        var minDragElTop = dragEl.offsetTop;\n        var maxDragElTop = screenHeight - dragEl.offsetTop - dragElHeight; // 获取到的值带px 正则匹配替换\n\n        var domLeft = getStyle(dragEl, 'left');\n        var domTop = getStyle(dragEl, 'top');\n        var styL = +domLeft;\n        var styT = +domTop; // 注意在ie中 第一次获取到的值为组件自带50% 移动之后赋值为px\n\n        if (domLeft.includes('%')) {\n          styL = +document.body.clientWidth * (+domLeft.replace(/%/g, '') / 100);\n          styT = +document.body.clientHeight * (+domTop.replace(/%/g, '') / 100);\n        } else {\n          styL = +domLeft.replace(/px/g, '');\n          styT = +domTop.replace(/px/g, '');\n        }\n\n        document.onmousemove = function (e) {\n          // 全屏时不触发移动方法\n          if (_this.innerFullscreen) {\n            return;\n          } // 通过事件委托，计算移动的距离\n\n\n          var left = e.clientX - disX;\n          var top = e.clientY - disY; // 边界处理\n\n          if (-left > minDragElLeft) {\n            left = -minDragElLeft;\n          } else if (left > maxDragElLeft) {\n            left = maxDragElLeft;\n          }\n\n          if (-top > minDragElTop) {\n            top = -minDragElTop;\n          } else if (top > maxDragElTop) {\n            top = maxDragElTop;\n          }\n\n          _this.setModalPosition(top + styT, left + styL);\n        };\n\n        document.onmouseup = function () {\n          document.onmousemove = null;\n          document.onmouseup = null;\n        };\n      };\n    },\n\n    /**\n     * 移动弹窗位置\n     * @param top 顶部位置\n     * @param left 左侧位置\n     * @param remember 是否记录位置，默认 true\n     */\n    setModalPosition: function setModalPosition(top, left) {\n      var remember = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      // 记录移动位置\n      if (remember) {\n        this.dragSettings.top = top;\n        this.dragSettings.left = left;\n      } // 移动当前元素\n\n\n      this.dragSettings.dragEl.style.cssText += \";left:\".concat(left, \"px;top:\").concat(top, \"px;\");\n    },\n\n    /**\n     * 将弹窗移动到上次记录的位置\n     */\n    resetModalPosition: function resetModalPosition() {\n      this.setModalPosition(this.dragSettings.top, this.dragSettings.left, false);\n    }\n  }\n};\n\nfunction getStyle(dom, attr) {\n  return getComputedStyle(dom)[attr];\n}",{"version":3,"sources":["D:/云晟/前端/ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326/src/components/jeecg/JModal/ModalDragMixins.js"],"names":["getRefPromise","data","dragSettings","top","left","wrapEl","dragEl","headerEl","watch","visible","draggable","handleDrag","methods","modalRef","dragWraps","$el","querySelectorAll","querySelector","display","getStyle","getAttribute","destroyOnClose","enableDrag","setAttribute","resetModalPosition","style","cursor","onmousedown","e","disX","clientX","disY","clientY","screenWidth","document","body","clientWidth","screenHeight","documentElement","clientHeight","dragElWidth","offsetWidth","dragElHeight","offsetHeight","minDragElLeft","offsetLeft","maxDragElLeft","minDragElTop","offsetTop","maxDragElTop","domLeft","domTop","styL","styT","includes","replace","onmousemove","innerFullscreen","setModalPosition","onmouseup","remember","cssText","dom","attr","getComputedStyle"],"mappings":";;;;;;AAAA,SAAQA,aAAR,QAA4B,cAA5B;AAEA;;AACA,eAAe;AACbC,EAAAA,IADa,kBACN;AACL,WAAO;AACL;AACAC,MAAAA,YAAY,EAAE;AACZ;AACAC,QAAAA,GAAG,EAAE,IAFO;AAGZ;AACAC,QAAAA,IAAI,EAAE,IAJM;AAKZC,QAAAA,MAAM,EAAE,IALI;AAMZC,QAAAA,MAAM,EAAE,IANI;AAOZC,QAAAA,QAAQ,EAAE;AAPE;AAFT,KAAP;AAYD,GAdY;AAebC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OADK,qBACK;AACR,UAAI,CAAC,KAAKA,OAAN,IAAiB,CAAC,KAAKC,SAA3B,EAAsC;AACpC;AACD;;AACD,WAAKC,UAAL;AACD,KANI;AAOLD,IAAAA,SAPK,uBAOO;AACV,UAAI,CAAC,KAAKD,OAAN,IAAiB,CAAC,KAAKC,SAA3B,EAAsC;AACpC;AACD;;AACD,WAAKC,UAAL;AACD;AAZI,GAfM;AA6BbC,EAAAA,OAAO,EAAE;AACDD,IAAAA,UADC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEgBX,aAAa,CAAC,IAAD,EAAO,OAAP,CAF7B;;AAAA;AAEDa,gBAAAA,QAFC;AAGCC,gBAAAA,SAHD,GAGaD,QAAQ,CAACE,GAAT,CAAaC,gBAAb,CAA8B,iBAA9B,CAHb;AAIDX,gBAAAA,MAJC,GAIQS,SAAS,CAAC,CAAD,CAJjB;;AAAA,oBAKAT,MALA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAML,qBAAKH,YAAL,CAAkBG,MAAlB,GAA2BA,MAA3B;AACA,qBAAKH,YAAL,CAAkBI,MAAlB,GAA2BD,MAAM,CAACY,aAAP,CAAqB,YAArB,CAA3B;AACA,qBAAKf,YAAL,CAAkBK,QAAlB,GAA6BF,MAAM,CAACY,aAAP,CAAqB,mBAArB,CAA7B;AACMC,gBAAAA,OATD,GASWC,QAAQ,CAACd,MAAD,EAAS,SAAT,CATnB;AAUCK,gBAAAA,SAVD,GAUaL,MAAM,CAACe,YAAP,CAAoB,WAApB,CAVb;;AAWL,oBAAIF,OAAO,KAAK,MAAhB,EAAwB;AACtB;AACA,sBAAIR,SAAS,KAAK,IAAd,IAAsB,KAAKW,cAA/B,EAA+C;AAC7C,yBAAKC,UAAL,CAAgBjB,MAAhB;AACD;AACF;;AAhBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAkBP;AACAiB,IAAAA,UAnBO,wBAmBM;AAAA;;AAAA,+BACsB,KAAKpB,YAD3B;AAAA,UACNG,MADM,sBACNA,MADM;AAAA,UACEC,MADF,sBACEA,MADF;AAAA,UACUC,QADV,sBACUA,QADV;AAEX,UAAI,CAACF,MAAL,EAAa;AACbA,MAAAA,MAAM,CAACkB,YAAP,CAAoB,WAApB,EAAiC,KAAKb,SAAtC;AACA,UAAI,CAACH,QAAD,IAAa,CAACD,MAAd,IAAwB,CAAC,KAAKI,SAAlC,EAA6C,OAJlC,CAMX;;AACA,WAAKc,kBAAL;AAEAjB,MAAAA,QAAQ,CAACkB,KAAT,CAAeC,MAAf,GAAwB,MAAxB;;AACAnB,MAAAA,QAAQ,CAACoB,WAAT,GAAuB,UAACC,CAAD,EAAO;AAC5B,YAAI,CAACA,CAAL,EAAQ,OADoB,CAE5B;;AACA,YAAMC,IAAI,GAAGD,CAAC,CAACE,OAAf;AACA,YAAMC,IAAI,GAAGH,CAAC,CAACI,OAAf;AACA,YAAMC,WAAW,GAAGC,QAAQ,CAACC,IAAT,CAAcC,WAAlC,CAL4B,CAKkB;;AAC9C,YAAMC,YAAY,GAAGH,QAAQ,CAACI,eAAT,CAAyBC,YAA9C,CAN4B,CAM+B;;AAE3D,YAAMC,WAAW,GAAGlC,MAAM,CAACmC,WAA3B,CAR4B,CAQW;;AACvC,YAAMC,YAAY,GAAGpC,MAAM,CAACqC,YAA5B,CAT4B,CASa;;AAEzC,YAAMC,aAAa,GAAGtC,MAAM,CAACuC,UAA7B;AAEA,YAAMC,aAAa,GAAGb,WAAW,GAAG3B,MAAM,CAACuC,UAArB,GAAkCL,WAAxD;AACA,YAAMO,YAAY,GAAGzC,MAAM,CAAC0C,SAA5B;AACA,YAAMC,YAAY,GAAGZ,YAAY,GAAG/B,MAAM,CAAC0C,SAAtB,GAAkCN,YAAvD,CAf4B,CAgB5B;;AACA,YAAMQ,OAAO,GAAG/B,QAAQ,CAACb,MAAD,EAAS,MAAT,CAAxB;AACA,YAAM6C,MAAM,GAAGhC,QAAQ,CAACb,MAAD,EAAS,KAAT,CAAvB;AACA,YAAI8C,IAAI,GAAG,CAACF,OAAZ;AACA,YAAIG,IAAI,GAAG,CAACF,MAAZ,CApB4B,CAsB5B;;AACA,YAAID,OAAO,CAACI,QAAR,CAAiB,GAAjB,CAAJ,EAA2B;AACzBF,UAAAA,IAAI,GAAG,CAAClB,QAAQ,CAACC,IAAT,CAAcC,WAAf,IAA8B,CAACc,OAAO,CAACK,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAAD,GAA6B,GAA3D,CAAP;AACAF,UAAAA,IAAI,GAAG,CAACnB,QAAQ,CAACC,IAAT,CAAcI,YAAf,IAA+B,CAACY,MAAM,CAACI,OAAP,CAAe,IAAf,EAAqB,EAArB,CAAD,GAA4B,GAA3D,CAAP;AACD,SAHD,MAGO;AACLH,UAAAA,IAAI,GAAG,CAACF,OAAO,CAACK,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAR;AACAF,UAAAA,IAAI,GAAG,CAACF,MAAM,CAACI,OAAP,CAAe,KAAf,EAAsB,EAAtB,CAAR;AACD;;AAEDrB,QAAAA,QAAQ,CAACsB,WAAT,GAAuB,UAAC5B,CAAD,EAAO;AAC5B;AACA,cAAI,KAAI,CAAC6B,eAAT,EAA0B;AACxB;AACD,WAJ2B,CAK5B;;;AACA,cAAIrD,IAAI,GAAGwB,CAAC,CAACE,OAAF,GAAYD,IAAvB;AACA,cAAI1B,GAAG,GAAGyB,CAAC,CAACI,OAAF,GAAYD,IAAtB,CAP4B,CAS5B;;AACA,cAAI,CAAC3B,IAAD,GAAQwC,aAAZ,EAA2B;AACzBxC,YAAAA,IAAI,GAAG,CAACwC,aAAR;AACD,WAFD,MAEO,IAAIxC,IAAI,GAAG0C,aAAX,EAA0B;AAC/B1C,YAAAA,IAAI,GAAG0C,aAAP;AACD;;AAED,cAAI,CAAC3C,GAAD,GAAO4C,YAAX,EAAyB;AACvB5C,YAAAA,GAAG,GAAG,CAAC4C,YAAP;AACD,WAFD,MAEO,IAAI5C,GAAG,GAAG8C,YAAV,EAAwB;AAC7B9C,YAAAA,GAAG,GAAG8C,YAAN;AACD;;AAED,UAAA,KAAI,CAACS,gBAAL,CAAsBvD,GAAG,GAAGkD,IAA5B,EAAkCjD,IAAI,GAAGgD,IAAzC;AACD,SAvBD;;AAyBAlB,QAAAA,QAAQ,CAACyB,SAAT,GAAqB,YAAM;AACzBzB,UAAAA,QAAQ,CAACsB,WAAT,GAAuB,IAAvB;AACAtB,UAAAA,QAAQ,CAACyB,SAAT,GAAqB,IAArB;AACD,SAHD;AAID,OA5DD;AA6DD,KA1FM;;AA4FP;;;;;;AAMAD,IAAAA,gBAlGO,4BAkGUvD,GAlGV,EAkGeC,IAlGf,EAkGsC;AAAA,UAAjBwD,QAAiB,uEAAN,IAAM;;AAC3C;AACA,UAAIA,QAAJ,EAAc;AACZ,aAAK1D,YAAL,CAAkBC,GAAlB,GAAwBA,GAAxB;AACA,aAAKD,YAAL,CAAkBE,IAAlB,GAAyBA,IAAzB;AACD,OAL0C,CAM3C;;;AACA,WAAKF,YAAL,CAAkBI,MAAlB,CAAyBmB,KAAzB,CAA+BoC,OAA/B,oBAAmDzD,IAAnD,oBAAiED,GAAjE;AACD,KA1GM;;AA2GP;;;AAGAqB,IAAAA,kBA9GO,gCA8Gc;AACnB,WAAKkC,gBAAL,CAAsB,KAAKxD,YAAL,CAAkBC,GAAxC,EAA6C,KAAKD,YAAL,CAAkBE,IAA/D,EAAqE,KAArE;AACD;AAhHM;AA7BI,CAAf;;AAkJA,SAASe,QAAT,CAAkB2C,GAAlB,EAAuBC,IAAvB,EAA6B;AAC3B,SAAOC,gBAAgB,CAACF,GAAD,CAAhB,CAAsBC,IAAtB,CAAP;AACD","sourcesContent":["import {getRefPromise} from '@/utils/util'\n\n/** JModal 的拖拽混入 */\nexport default {\n  data() {\n    return {\n      // 拖动配置\n      dragSettings: {\n        // 上次拖动top记录\n        top: null,\n        // 上次拖动left记录\n        left: null,\n        wrapEl: null,\n        dragEl: null,\n        headerEl: null,\n      },\n    }\n  },\n  watch: {\n    visible() {\n      if (!this.visible || !this.draggable) {\n        return\n      }\n      this.handleDrag()\n    },\n    draggable() {\n      if (!this.visible || !this.draggable) {\n        return\n      }\n      this.handleDrag()\n    },\n  },\n  methods: {\n    async handleDrag() {\n      let modalRef = await getRefPromise(this, 'modal')\n      const dragWraps = modalRef.$el.querySelectorAll('.ant-modal-wrap')\n      let wrapEl = dragWraps[0]\n      if (!wrapEl) return\n      this.dragSettings.wrapEl = wrapEl\n      this.dragSettings.dragEl = wrapEl.querySelector('.ant-modal')\n      this.dragSettings.headerEl = wrapEl.querySelector('.ant-modal-header')\n      const display = getStyle(wrapEl, 'display')\n      const draggable = wrapEl.getAttribute('data-drag')\n      if (display !== 'none') {\n        // 拖拽位置\n        if (draggable === null || this.destroyOnClose) {\n          this.enableDrag(wrapEl)\n        }\n      }\n    },\n    /** 启用拖拽 */\n    enableDrag() {\n      let {wrapEl, dragEl, headerEl} = this.dragSettings\n      if (!wrapEl) return\n      wrapEl.setAttribute('data-drag', this.draggable)\n      if (!headerEl || !dragEl || !this.draggable) return\n\n      // 还原上一次移动的位置\n      this.resetModalPosition()\n\n      headerEl.style.cursor = 'move'\n      headerEl.onmousedown = (e) => {\n        if (!e) return\n        // 鼠标按下，计算当前元素距离可视区的距离\n        const disX = e.clientX\n        const disY = e.clientY\n        const screenWidth = document.body.clientWidth // body当前宽度\n        const screenHeight = document.documentElement.clientHeight // 可见区域高度(应为body高度，可某些环境下无法获取)\n\n        const dragElWidth = dragEl.offsetWidth // 对话框宽度\n        const dragElHeight = dragEl.offsetHeight // 对话框高度\n\n        const minDragElLeft = dragEl.offsetLeft\n\n        const maxDragElLeft = screenWidth - dragEl.offsetLeft - dragElWidth\n        const minDragElTop = dragEl.offsetTop\n        const maxDragElTop = screenHeight - dragEl.offsetTop - dragElHeight\n        // 获取到的值带px 正则匹配替换\n        const domLeft = getStyle(dragEl, 'left')\n        const domTop = getStyle(dragEl, 'top')\n        let styL = +domLeft\n        let styT = +domTop\n\n        // 注意在ie中 第一次获取到的值为组件自带50% 移动之后赋值为px\n        if (domLeft.includes('%')) {\n          styL = +document.body.clientWidth * (+domLeft.replace(/%/g, '') / 100)\n          styT = +document.body.clientHeight * (+domTop.replace(/%/g, '') / 100)\n        } else {\n          styL = +domLeft.replace(/px/g, '')\n          styT = +domTop.replace(/px/g, '')\n        }\n\n        document.onmousemove = (e) => {\n          // 全屏时不触发移动方法\n          if (this.innerFullscreen) {\n            return\n          }\n          // 通过事件委托，计算移动的距离\n          let left = e.clientX - disX\n          let top = e.clientY - disY\n\n          // 边界处理\n          if (-left > minDragElLeft) {\n            left = -minDragElLeft\n          } else if (left > maxDragElLeft) {\n            left = maxDragElLeft\n          }\n\n          if (-top > minDragElTop) {\n            top = -minDragElTop\n          } else if (top > maxDragElTop) {\n            top = maxDragElTop\n          }\n\n          this.setModalPosition(top + styT, left + styL)\n        }\n\n        document.onmouseup = () => {\n          document.onmousemove = null\n          document.onmouseup = null\n        }\n      }\n    },\n\n    /**\n     * 移动弹窗位置\n     * @param top 顶部位置\n     * @param left 左侧位置\n     * @param remember 是否记录位置，默认 true\n     */\n    setModalPosition(top, left, remember = true) {\n      // 记录移动位置\n      if (remember) {\n        this.dragSettings.top = top\n        this.dragSettings.left = left\n      }\n      // 移动当前元素\n      this.dragSettings.dragEl.style.cssText += `;left:${left}px;top:${top}px;`\n    },\n    /**\n     * 将弹窗移动到上次记录的位置\n     */\n    resetModalPosition() {\n      this.setModalPosition(this.dragSettings.top, this.dragSettings.left, false)\n    },\n\n  },\n}\n\nfunction getStyle(dom, attr) {\n  return getComputedStyle(dom)[attr]\n}\n"]}]}