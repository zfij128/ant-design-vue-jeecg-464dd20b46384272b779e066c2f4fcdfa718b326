{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\utils\\JEditableTableUtil.js","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\utils\\JEditableTableUtil.js","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1665642923347}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport { getVmParentByName } from '@/utils/util';\nvar FormTypes = {\n  normal: 'normal',\n  input: 'input',\n  inputNumber: 'inputNumber',\n  checkbox: 'checkbox',\n  select: 'select',\n  date: 'date',\n  datetime: 'datetime',\n  time: 'time',\n  upload: 'upload',\n  file: 'file',\n  image: 'image',\n  popup: 'popup',\n  list_multi: \"list_multi\",\n  sel_search: \"sel_search\",\n  sel_search_async: \"sel_search_async\",\n  radio: 'radio',\n  checkbox_meta: \"checkbox_meta\",\n  input_pop: 'input_pop',\n  sel_depart: 'sel_depart',\n  sel_user: 'sel_user',\n  slot: 'slot',\n  hidden: 'hidden'\n};\nvar VALIDATE_NO_PASSED = Symbol();\nexport { FormTypes, VALIDATE_NO_PASSED };\n/**\n * 获取指定的 $refs 对象\n * 有时候可能会遇到组件未挂载到页面中的情况，导致无法获取 $refs 中的某个对象\n * 这个方法可以等待挂载完成之后再返回 $refs 的对象，避免报错\n * @author sunjianlei\n **/\n\nexport function getRefPromise(vm, name) {\n  return new Promise(function (resolve) {\n    (function next() {\n      var ref = vm.$refs[name];\n\n      if (ref) {\n        resolve(ref);\n      } else {\n        setTimeout(function () {\n          next();\n        }, 10);\n      }\n    })();\n  });\n}\n/**\n * 一次性验证主表单和所有的次表单\n * @param form 主表单 form 对象\n * @param cases 接收一个数组，每项都是一个JEditableTable实例\n * @returns {Promise<any>}\n * @author sunjianlei\n */\n\nexport function validateFormAndTables(form, cases) {\n  if (!(form && typeof form.validateFields === 'function')) {\n    throw \"form \\u53C2\\u6570\\u9700\\u8981\\u7684\\u662F\\u4E00\\u4E2Aform\\u5BF9\\u8C61\\uFF0C\\u800C\\u4F20\\u5165\\u7684\\u5374\\u662F\".concat(_typeof(form));\n  }\n\n  var options = {};\n  return new Promise(function (resolve, reject) {\n    // 验证主表表单\n    form.validateFields(function (err, values) {\n      err ? reject({\n        error: VALIDATE_NO_PASSED\n      }) : resolve(values);\n    });\n  }).then(function (values) {\n    Object.assign(options, {\n      formValue: values\n    }); // 验证所有子表的表单\n\n    return validateTables(cases);\n  }).then(function (all) {\n    Object.assign(options, {\n      tablesValue: all\n    });\n    return Promise.resolve(options);\n  }).catch(function (error) {\n    return Promise.reject(error);\n  });\n}\n/**\n * 一次性验证主表单和所有的次表单(新版本)\n * @param form 主表单 form 对象\n * @param cases 接收一个数组，每项都是一个JEditableTable实例\n * @returns {Promise<any>}\n * @author sunjianlei\n */\n\nexport function validateFormModelAndTables(form, values, cases) {\n  if (!(form && typeof form.validate === 'function')) {\n    throw \"form \\u53C2\\u6570\\u9700\\u8981\\u7684\\u662F\\u4E00\\u4E2Aform\\u5BF9\\u8C61\\uFF0C\\u800C\\u4F20\\u5165\\u7684\\u5374\\u662F\".concat(_typeof(form));\n  }\n\n  var options = {};\n  return new Promise(function (resolve, reject) {\n    // 验证主表表单\n    form.validate(function (valid, obj) {\n      valid ? resolve(values) : reject({\n        error: VALIDATE_NO_PASSED\n      });\n    });\n  }).then(function (values) {\n    Object.assign(options, {\n      formValue: values\n    }); // 验证所有子表的表单\n\n    return validateTables(cases);\n  }).then(function (all) {\n    Object.assign(options, {\n      tablesValue: all\n    });\n    return Promise.resolve(options);\n  }).catch(function (error) {\n    return Promise.reject(error);\n  });\n}\n/**\n * 验证并获取一个或多个表格的所有值\n * @param cases 接收一个数组，每项都是一个JEditableTable实例\n * @param deleteTempId 是否删除临时ID，如果设为true，行编辑就不返回新增行的ID，ID需要后台生成\n * @author sunjianlei\n */\n\nexport function validateTables(cases, deleteTempId) {\n  if (!(cases instanceof Array)) {\n    throw \"'validateTables'\\u51FD\\u6570\\u7684'cases'\\u53C2\\u6570\\u9700\\u8981\\u7684\\u662F\\u4E00\\u4E2A\\u6570\\u7EC4\\uFF0C\\u800C\\u4F20\\u5165\\u7684\\u5374\\u662F\".concat(_typeof(cases));\n  }\n\n  return new Promise(function (resolve, reject) {\n    var tables = [];\n    var index = 0;\n\n    if (!cases || cases.length === 0) {\n      resolve();\n    }\n\n    (function next() {\n      var vm = cases[index];\n      vm.getAll(true, deleteTempId).then(function (all) {\n        tables[index] = all; // 判断校验是否全部完成，完成返回成功，否则继续进行下一步校验\n\n        if (++index === cases.length) {\n          resolve(tables);\n        } else next();\n      }, function (error) {\n        // 出现未验证通过的表单，不再进行下一步校验，直接返回失败并跳转到该表格\n        if (error === VALIDATE_NO_PASSED) {\n          // 尝试获取tabKey，如果在ATab组件内即可获取\n          var paneKey;\n          var tabPane = getVmParentByName(vm, 'ATabPane');\n\n          if (tabPane) {\n            paneKey = tabPane.$vnode.key;\n          }\n\n          reject({\n            error: VALIDATE_NO_PASSED,\n            index: index,\n            paneKey: paneKey\n          });\n        }\n\n        reject(error);\n      });\n    })();\n  });\n}",{"version":3,"sources":["D:/云晟/前端/ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326/src/utils/JEditableTableUtil.js"],"names":["getVmParentByName","FormTypes","normal","input","inputNumber","checkbox","select","date","datetime","time","upload","file","image","popup","list_multi","sel_search","sel_search_async","radio","checkbox_meta","input_pop","sel_depart","sel_user","slot","hidden","VALIDATE_NO_PASSED","Symbol","getRefPromise","vm","name","Promise","resolve","next","ref","$refs","setTimeout","validateFormAndTables","form","cases","validateFields","options","reject","err","values","error","then","Object","assign","formValue","validateTables","all","tablesValue","catch","validateFormModelAndTables","validate","valid","obj","deleteTempId","Array","tables","index","length","getAll","paneKey","tabPane","$vnode","key"],"mappings":"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","sourcesContent":["import { getVmParentByName } from '@/utils/util'\n\nconst FormTypes = {\n  normal: 'normal',\n  input: 'input',\n  inputNumber: 'inputNumber',\n  checkbox: 'checkbox',\n  select: 'select',\n  date: 'date',\n  datetime: 'datetime',\n  time: 'time',\n  upload: 'upload',\n  file: 'file',\n  image: 'image',\n  popup:'popup',\n  list_multi:\"list_multi\",\n  sel_search:\"sel_search\",\n  sel_search_async:\"sel_search_async\",\n  radio:'radio',\n  checkbox_meta:\"checkbox_meta\",\n  input_pop:'input_pop',\n  sel_depart: 'sel_depart',\n  sel_user: 'sel_user',\n  slot: 'slot',\n  hidden: 'hidden'\n}\nconst VALIDATE_NO_PASSED = Symbol()\nexport { FormTypes, VALIDATE_NO_PASSED }\n\n/**\n * 获取指定的 $refs 对象\n * 有时候可能会遇到组件未挂载到页面中的情况，导致无法获取 $refs 中的某个对象\n * 这个方法可以等待挂载完成之后再返回 $refs 的对象，避免报错\n * @author sunjianlei\n **/\nexport function getRefPromise(vm, name) {\n  return new Promise((resolve) => {\n    (function next() {\n      let ref = vm.$refs[name]\n      if (ref) {\n        resolve(ref)\n      } else {\n        setTimeout(() => {\n          next()\n        }, 10)\n      }\n    })()\n  })\n}\n\n/**\n * 一次性验证主表单和所有的次表单\n * @param form 主表单 form 对象\n * @param cases 接收一个数组，每项都是一个JEditableTable实例\n * @returns {Promise<any>}\n * @author sunjianlei\n */\nexport function validateFormAndTables(form, cases) {\n\n  if (!(form && typeof form.validateFields === 'function')) {\n    throw `form 参数需要的是一个form对象，而传入的却是${typeof form}`\n  }\n\n  let options = {}\n  return new Promise((resolve, reject) => {\n    // 验证主表表单\n    form.validateFields((err, values) => {\n      err ? reject({ error: VALIDATE_NO_PASSED }) : resolve(values)\n    })\n  }).then(values => {\n    Object.assign(options, { formValue: values })\n    // 验证所有子表的表单\n    return validateTables(cases)\n  }).then(all => {\n    Object.assign(options, { tablesValue: all })\n    return Promise.resolve(options)\n  }).catch(error => {\n    return Promise.reject(error)\n  })\n\n}\n/**\n * 一次性验证主表单和所有的次表单(新版本)\n * @param form 主表单 form 对象\n * @param cases 接收一个数组，每项都是一个JEditableTable实例\n * @returns {Promise<any>}\n * @author sunjianlei\n */\nexport function validateFormModelAndTables(form,values, cases) {\n\n  if (!(form && typeof form.validate === 'function')) {\n    throw `form 参数需要的是一个form对象，而传入的却是${typeof form}`\n  }\n  let options = {}\n  return new Promise((resolve, reject) => {\n    // 验证主表表单\n    form.validate((valid,obj) => {\n      valid ?resolve(values):reject({ error: VALIDATE_NO_PASSED })\n    })\n  }).then(values => {\n    Object.assign(options, { formValue: values })\n    // 验证所有子表的表单\n    return validateTables(cases)\n  }).then(all => {\n    Object.assign(options, { tablesValue: all })\n    return Promise.resolve(options)\n  }).catch(error => {\n    return Promise.reject(error)\n  })\n\n}\n\n/**\n * 验证并获取一个或多个表格的所有值\n * @param cases 接收一个数组，每项都是一个JEditableTable实例\n * @param deleteTempId 是否删除临时ID，如果设为true，行编辑就不返回新增行的ID，ID需要后台生成\n * @author sunjianlei\n */\nexport function validateTables(cases, deleteTempId) {\n  if (!(cases instanceof Array)) {\n    throw `'validateTables'函数的'cases'参数需要的是一个数组，而传入的却是${typeof cases}`\n  }\n  return new Promise((resolve, reject) => {\n    let tables = []\n    let index = 0;\n    if(!cases || cases.length === 0){\n      resolve()\n    }\n    (function next() {\n      let vm = cases[index]\n      vm.getAll(true, deleteTempId).then(all => {\n        tables[index] = all\n        // 判断校验是否全部完成，完成返回成功，否则继续进行下一步校验\n        if (++index === cases.length) {\n          resolve(tables)\n        } else (\n          next()\n        )\n      }, error => {\n        // 出现未验证通过的表单，不再进行下一步校验，直接返回失败并跳转到该表格\n        if (error === VALIDATE_NO_PASSED) {\n          // 尝试获取tabKey，如果在ATab组件内即可获取\n          let paneKey;\n          let tabPane = getVmParentByName(vm, 'ATabPane')\n          if (tabPane) {\n            paneKey = tabPane.$vnode.key\n          }\n          reject({error: VALIDATE_NO_PASSED, index, paneKey})\n        }\n        reject(error)\n      })\n    })()\n  })\n}"]}]}