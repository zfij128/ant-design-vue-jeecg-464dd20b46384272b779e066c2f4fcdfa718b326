{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\views\\user\\register\\Register.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\views\\user\\register\\Register.vue","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js","mtime":1665642924058}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mixinDevice } from '@/utils/mixin.js';\nimport { getSmsCaptcha } from '@/api/login';\nimport { getAction, postAction } from '@/api/manage';\nimport { checkOnlyUser } from '@/api/api';\nvar levelNames = {\n  0: '低',\n  1: '低',\n  2: '中',\n  3: '强'\n};\nvar levelClass = {\n  0: 'error',\n  1: 'error',\n  2: 'warning',\n  3: 'success'\n};\nvar levelColor = {\n  0: '#ff0000',\n  1: '#ff0000',\n  2: '#ff7e05',\n  3: '#52c41a'\n};\nexport default {\n  name: \"Register\",\n  components: {},\n  mixins: [mixinDevice],\n  data: function data() {\n    return {\n      model: {},\n      validatorRules: {\n        username: [{\n          required: false\n        }, {\n          validator: this.checkUsername\n        }],\n        password: [{\n          required: false\n        }, {\n          validator: this.handlePasswordLevel\n        }],\n        password2: [{\n          required: false\n        }, {\n          validator: this.handlePasswordCheck\n        }],\n        mobile: [{\n          required: false\n        }, {\n          validator: this.handlePhoneCheck\n        }],\n        captcha: [{\n          required: false\n        }, {\n          validator: this.handleCaptchaCheck\n        }]\n      },\n      state: {\n        time: 60,\n        smsSendBtn: false,\n        passwordLevel: 0,\n        passwordLevelChecked: false,\n        percent: 10,\n        progressColor: '#FF0000'\n      },\n      registerBtn: false\n    };\n  },\n  computed: {\n    passwordLevelClass: function passwordLevelClass() {\n      return levelClass[this.state.passwordLevel];\n    },\n    passwordLevelName: function passwordLevelName() {\n      return levelNames[this.state.passwordLevel];\n    },\n    passwordLevelColor: function passwordLevelColor() {\n      return levelColor[this.state.passwordLevel];\n    }\n  },\n  methods: {\n    checkUsername: function checkUsername(rule, value, callback) {\n      if (!value) {\n        callback(new Error(\"请输入用户名\"));\n      } else {\n        var params = {\n          username: value\n        };\n        checkOnlyUser(params).then(function (res) {\n          if (res.success) {\n            callback();\n          } else {\n            callback(\"用户名已存在!\");\n          }\n        });\n      }\n    },\n    handleEmailCheck: function handleEmailCheck(rule, value, callback) {\n      var params = {\n        email: value\n      };\n      checkOnlyUser(params).then(function (res) {\n        if (res.success) {\n          callback();\n        } else {\n          callback(\"邮箱已存在!\");\n        }\n      });\n    },\n    handlePasswordLevel: function handlePasswordLevel(rule, value, callback) {\n      var level = 0;\n      var reg = /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[~!@#$%^&*()_+`\\-={}:\";'<>?,./]).{8,}$/;\n\n      if (!reg.test(value)) {\n        callback(new Error('密码由8位数字、大小写字母和特殊符号组成!'));\n      } // 判断这个字符串中有没有数字\n\n\n      if (/[0-9]/.test(value)) {\n        level++;\n      } // 判断字符串中有没有字母\n\n\n      if (/[a-zA-Z]/.test(value)) {\n        level++;\n      } // 判断字符串中有没有特殊符号\n\n\n      if (/[^0-9a-zA-Z_]/.test(value)) {\n        level++;\n      }\n\n      this.state.passwordLevel = level;\n      this.state.percent = level * 30;\n\n      if (level >= 2) {\n        if (level >= 3) {\n          this.state.percent = 100;\n        }\n\n        callback();\n      } else {\n        if (level === 0) {\n          this.state.percent = 10;\n        }\n\n        callback(new Error('密码强度不够'));\n      }\n    },\n    handlePasswordCheck: function handlePasswordCheck(rule, value, callback) {\n      var password = this.model['password']; //console.log('value', value)\n\n      if (value === undefined) {\n        callback(new Error('请输入密码'));\n      }\n\n      if (value && password && value.trim() !== password.trim()) {\n        callback(new Error('两次密码不一致'));\n      }\n\n      callback();\n    },\n    handleCaptchaCheck: function handleCaptchaCheck(rule, value, callback) {\n      if (!value) {\n        callback(new Error(\"请输入验证码\"));\n      } else {\n        callback();\n      }\n    },\n    handlePhoneCheck: function handlePhoneCheck(rule, value, callback) {\n      var reg = /^1[3456789]\\d{9}$/;\n\n      if (!reg.test(value)) {\n        callback(new Error(\"请输入正确手机号\"));\n      } else {\n        var params = {\n          phone: value\n        };\n        checkOnlyUser(params).then(function (res) {\n          if (res.success) {\n            callback();\n          } else {\n            callback(\"手机号已存在!\");\n          }\n        });\n      }\n    },\n    handlePasswordInputClick: function handlePasswordInputClick() {\n      if (!this.isMobile()) {\n        this.state.passwordLevelChecked = true;\n        return;\n      }\n\n      this.state.passwordLevelChecked = false;\n    },\n    handleSubmit: function handleSubmit() {\n      var _this = this;\n\n      this.$refs['form'].validate(function (success) {\n        if (success == true) {\n          var values = _this.model;\n          var register = {\n            username: values.username,\n            password: values.password,\n            phone: values.mobile,\n            smscode: values.captcha\n          };\n          postAction(\"/sys/user/register\", register).then(function (res) {\n            if (!res.success) {\n              _this.registerFailed(res.message);\n            } else {\n              _this.$router.push({\n                name: 'registerResult',\n                params: _objectSpread({}, values)\n              });\n            }\n          });\n        }\n      });\n    },\n    getCaptcha: function getCaptcha(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n      var that = this;\n      this.$refs['form'].validateField(['mobile'], function (err) {\n        if (!err) {\n          _this2.state.smsSendBtn = true;\n          var interval = window.setInterval(function () {\n            if (that.state.time-- <= 0) {\n              that.state.time = 60;\n              that.state.smsSendBtn = false;\n              window.clearInterval(interval);\n            }\n          }, 1000);\n\n          var hide = _this2.$message.loading('验证码发送中..', 3);\n\n          var params = {\n            mobile: _this2.model.mobile,\n            smsmode: \"1\"\n          };\n          postAction(\"/sys/sms\", params).then(function (res) {\n            if (!res.success) {\n              _this2.registerFailed(res.message);\n\n              setTimeout(hide, 0);\n            }\n\n            setTimeout(hide, 500);\n          }).catch(function (err) {\n            setTimeout(hide, 1);\n            clearInterval(interval);\n            that.state.time = 60;\n            that.state.smsSendBtn = false;\n\n            _this2.requestFailed(err);\n          });\n        }\n      });\n    },\n    registerFailed: function registerFailed(message) {\n      this.$notification['error']({\n        message: \"注册失败\",\n        description: message,\n        duration: 2\n      });\n    },\n    requestFailed: function requestFailed(err) {\n      this.$notification['error']({\n        message: '错误',\n        description: ((err.response || {}).data || {}).message || \"请求出现错误，请稍后再试\",\n        duration: 4\n      });\n      this.registerBtn = false;\n    }\n  },\n  watch: {\n    'state.passwordLevel': function statePasswordLevel(val) {\n      console.log(val);\n    }\n  }\n};",{"version":3,"sources":["Register.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"main user-layout-register\">\n    <h3><span>注册</span></h3>\n    <a-form-model ref=\"form\" :model=\"model\" :rules=\"validatorRules\">\n      <a-form-model-item prop=\"username\">\n        <a-input v-model=\"model.username\" size=\"large\" type=\"text\" autocomplete=\"false\" placeholder=\"请输入用户名\"/>\n      </a-form-model-item>\n\n      <a-popover placement=\"rightTop\" trigger=\"click\" :visible=\"state.passwordLevelChecked\">\n        <template slot=\"content\">\n          <div :style=\"{ width: '240px' }\">\n            <div :class=\"['user-register', passwordLevelClass]\">强度：<span>{{ passwordLevelName }}</span></div>\n            <a-progress :percent=\"state.percent\" :showInfo=\"false\" :strokeColor=\" passwordLevelColor \"/>\n            <div style=\"margin-top: 10px;\">\n              <span>请至少输入 8 个字符。请不要使用容易被猜到的密码。</span>\n            </div>\n          </div>\n        </template>\n        <a-form-model-item prop=\"password\">\n          <a-input\n            v-model=\"model.password\"\n            size=\"large\"\n            type=\"password\"\n            @click=\"handlePasswordInputClick\"\n            autocomplete=\"false\"\n            placeholder=\"至少8位密码，区分大小写\">\n          </a-input>\n        </a-form-model-item>\n      </a-popover>\n\n      <a-form-model-item prop=\"password2\">\n        <a-input v-model=\"model.password2\" size=\"large\" type=\"password\" autocomplete=\"false\" placeholder=\"确认密码\"></a-input>\n      </a-form-model-item>\n\n      <a-form-model-item prop=\"mobile\">\n        <a-input v-model=\"model.mobile\" size=\"large\" placeholder=\"11 位手机号\">\n          <a-select slot=\"addonBefore\" size=\"large\" defaultValue=\"+86\">\n            <a-select-option value=\"+86\">+86</a-select-option>\n            <a-select-option value=\"+87\">+87</a-select-option>\n          </a-select>\n        </a-input>\n      </a-form-model-item>\n      <!--<a-input-group size=\"large\" compact>\n            <a-select style=\"width: 20%\" size=\"large\" defaultValue=\"+86\">\n              <a-select-option value=\"+86\">+86</a-select-option>\n              <a-select-option value=\"+87\">+87</a-select-option>\n            </a-select>\n            <a-input style=\"width: 80%\" size=\"large\" placeholder=\"11 位手机号\"></a-input>\n          </a-input-group>-->\n\n      <a-row :gutter=\"16\">\n        <a-col class=\"gutter-row\" :span=\"16\">\n          <a-form-model-item prop=\"captcha\">\n            <a-input v-model=\"model.captcha\" size=\"large\" type=\"text\" placeholder=\"验证码\">\n              <a-icon slot=\"prefix\" type=\"mail\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n            </a-input>\n          </a-form-model-item>\n        </a-col>\n        <a-col class=\"gutter-row\" :span=\"8\">\n          <a-button\n            class=\"getCaptcha\"\n            size=\"large\"\n            :disabled=\"state.smsSendBtn\"\n            @click.stop.prevent=\"getCaptcha\"\n            v-text=\"!state.smsSendBtn && '获取验证码'||(state.time+' s')\"></a-button>\n        </a-col>\n      </a-row>\n\n      <a-form-model-item>\n        <a-button\n          size=\"large\"\n          type=\"primary\"\n          htmlType=\"submit\"\n          class=\"register-button\"\n          :loading=\"registerBtn\"\n          @click.stop.prevent=\"handleSubmit\"\n          :disabled=\"registerBtn\">注册\n        </a-button>\n        <router-link class=\"login\" :to=\"{ name: 'login' }\">使用已有账户登录</router-link>\n      </a-form-model-item>\n\n    </a-form-model>\n  </div>\n</template>\n\n<script>\n  import {mixinDevice} from '@/utils/mixin.js'\n  import {getSmsCaptcha} from '@/api/login'\n  import {getAction, postAction} from '@/api/manage'\n  import {checkOnlyUser} from '@/api/api'\n\n  const levelNames = {\n    0: '低',\n    1: '低',\n    2: '中',\n    3: '强'\n  }\n  const levelClass = {\n    0: 'error',\n    1: 'error',\n    2: 'warning',\n    3: 'success'\n  }\n  const levelColor = {\n    0: '#ff0000',\n    1: '#ff0000',\n    2: '#ff7e05',\n    3: '#52c41a',\n  }\n  export default {\n    name: \"Register\",\n    components: {},\n    mixins: [mixinDevice],\n    data() {\n      return {\n        model: {},\n        validatorRules: {\n          username: [\n            { required: false },\n            { validator: this.checkUsername }\n          ],\n          password: [\n            { required: false},\n            { validator: this.handlePasswordLevel }\n          ],\n          password2: [\n            { required: false },\n            { validator: this.handlePasswordCheck }\n          ],\n          mobile: [\n            { required: false },\n            { validator: this.handlePhoneCheck }\n          ],\n          captcha: [\n            { required: false },\n            { validator: this.handleCaptchaCheck }\n          ]\n        },\n        state: {\n          time: 60,\n          smsSendBtn: false,\n          passwordLevel: 0,\n          passwordLevelChecked: false,\n          percent: 10,\n          progressColor: '#FF0000'\n        },\n        registerBtn: false\n      }\n    },\n    computed: {\n      passwordLevelClass() {\n        return levelClass[this.state.passwordLevel]\n      },\n      passwordLevelName() {\n        return levelNames[this.state.passwordLevel]\n      },\n      passwordLevelColor() {\n        return levelColor[this.state.passwordLevel]\n      }\n    },\n    methods: {\n      checkUsername(rule, value, callback) {\n        if(!value){\n          callback(new Error(\"请输入用户名\"))\n        }else{\n        var params = {\n          username: value,\n        };\n        checkOnlyUser(params).then((res) => {\n          if (res.success) {\n            callback()\n          } else {\n            callback(\"用户名已存在!\")\n          }\n        })\n      }\n    },\n      handleEmailCheck(rule, value, callback) {\n        let params = {\n          email: value,\n        };\n        checkOnlyUser(params).then((res) => {\n          if (res.success) {\n            callback()\n          } else {\n            callback(\"邮箱已存在!\")\n          }\n        })\n      },\n      handlePasswordLevel(rule, value, callback) {\n        let level = 0\n        let reg = /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[~!@#$%^&*()_+`\\-={}:\";'<>?,./]).{8,}$/;\n        if (!reg.test(value)) {\n          callback(new Error('密码由8位数字、大小写字母和特殊符号组成!'))\n        }\n        // 判断这个字符串中有没有数字\n        if (/[0-9]/.test(value)) {\n          level++\n        }\n        // 判断字符串中有没有字母\n        if (/[a-zA-Z]/.test(value)) {\n          level++\n        }\n        // 判断字符串中有没有特殊符号\n        if (/[^0-9a-zA-Z_]/.test(value)) {\n          level++\n        }\n        this.state.passwordLevel = level\n        this.state.percent = level * 30\n        if (level >= 2) {\n          if (level >= 3) {\n            this.state.percent = 100\n          }\n          callback()\n        } else {\n          if (level === 0) {\n            this.state.percent = 10\n          }\n          callback(new Error('密码强度不够'))\n        }\n      },\n\n      handlePasswordCheck(rule, value, callback) {\n        let password = this.model['password']\n        //console.log('value', value)\n        if (value === undefined) {\n          callback(new Error('请输入密码'))\n        }\n        if (value && password && value.trim() !== password.trim()) {\n          callback(new Error('两次密码不一致'))\n        }\n        callback()\n      },\n      handleCaptchaCheck(rule, value, callback){\n        if(!value){\n          callback(new Error(\"请输入验证码\"))\n        }else{\n          callback();\n        }\n      },\n      handlePhoneCheck(rule, value, callback) {\n        var reg=/^1[3456789]\\d{9}$/\n        if(!reg.test(value)){\n          callback(new Error(\"请输入正确手机号\"))\n        }else{\n        var params = {\n          phone: value,\n        };\n        checkOnlyUser(params).then((res) => {\n          if (res.success) {\n            callback()\n          } else {\n            callback(\"手机号已存在!\")\n          }\n        })\n      }\n    },\n\n      handlePasswordInputClick() {\n        if (!this.isMobile()) {\n          this.state.passwordLevelChecked = true\n          return;\n        }\n        this.state.passwordLevelChecked = false\n      },\n\n      handleSubmit() {\n        this.$refs['form'].validate((success) => {\n          if (success==true) {\n            let values = this.model\n            let register = {\n              username: values.username,\n              password: values.password,\n              phone: values.mobile,\n              smscode: values.captcha\n            };\n            postAction(\"/sys/user/register\", register).then((res) => {\n              if (!res.success) {\n                this.registerFailed(res.message)\n              } else {\n                this.$router.push({name: 'registerResult', params: {...values}})\n              }\n            })\n          }\n        })\n      },\n\n      getCaptcha(e) {\n        e.preventDefault()\n        let that = this\n        this.$refs['form'].validateField(['mobile'], (err) => {\n            if (!err) {\n              this.state.smsSendBtn = true;\n              let interval = window.setInterval(() => {\n                if (that.state.time-- <= 0) {\n                  that.state.time = 60;\n                  that.state.smsSendBtn = false;\n                  window.clearInterval(interval);\n                }\n              }, 1000);\n              const hide = this.$message.loading('验证码发送中..', 3);\n              const params = {\n                mobile: this.model.mobile,\n                smsmode: \"1\"\n              };\n              postAction(\"/sys/sms\", params).then((res) => {\n                if (!res.success) {\n                  this.registerFailed(res.message);\n                  setTimeout(hide, 0);\n                }\n                setTimeout(hide, 500);\n              }).catch(err => {\n                setTimeout(hide, 1);\n                clearInterval(interval);\n                that.state.time = 60;\n                that.state.smsSendBtn = false;\n                this.requestFailed(err);\n              });\n            }\n          }\n        );\n      },\n      registerFailed(message) {\n        this.$notification['error']({\n          message: \"注册失败\",\n          description: message,\n          duration: 2,\n        });\n\n      },\n      requestFailed(err) {\n        this.$notification['error']({\n          message: '错误',\n          description: ((err.response || {}).data || {}).message || \"请求出现错误，请稍后再试\",\n          duration: 4,\n        });\n        this.registerBtn = false;\n      },\n    },\n    watch: {\n      'state.passwordLevel'(val) {\n        console.log(val)\n\n      }\n    }\n  }\n</script>\n<style lang=\"less\">\n  .user-register {\n\n    &.error {\n      color: #ff0000;\n    }\n\n    &.warning {\n      color: #ff7e05;\n    }\n\n    &.success {\n      color: #52c41a;\n    }\n\n  }\n\n  .user-layout-register {\n    .ant-input-group-addon:first-child {\n      background-color: #fff;\n    }\n  }\n</style>\n<style lang=\"less\" scoped>\n  .user-layout-register {\n\n    & > h3 {\n      font-size: 16px;\n      margin-bottom: 20px;\n    }\n\n    .getCaptcha {\n      display: block;\n      width: 100%;\n      height: 40px;\n    }\n\n    .register-button {\n      width: 50%;\n    }\n\n    .login {\n      float: right;\n      line-height: 40px;\n    }\n  }\n</style>"],"sourceRoot":"src/views/user/register"}]}