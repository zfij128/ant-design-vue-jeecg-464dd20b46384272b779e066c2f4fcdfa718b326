{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\jeecgbiz\\modal\\JSelectUserByDepModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\jeecgbiz\\modal\\JSelectUserByDepModal.vue","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js","mtime":1665642924058}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"D:/\\u4E91\\u665F/\\u524D\\u7AEF/ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { pushIfNotExist, filterObj } from '@/utils/util';\nimport { queryDepartTreeList, getUserList, queryUserByDepId, queryDepartTreeSync } from '@/api/api';\nimport { getAction } from '@/api/manage';\nexport default {\n  name: 'JSelectUserByDepModal',\n  components: {},\n  props: ['modalWidth', 'multi', 'userIds', 'store', 'text'],\n  data: function data() {\n    return {\n      queryParam: {\n        username: \"\"\n      },\n      columns: [{\n        title: '用户账号',\n        align: 'center',\n        dataIndex: 'username'\n      }, {\n        title: '用户姓名',\n        align: 'center',\n        dataIndex: 'realname'\n      }, {\n        title: '性别',\n        align: 'center',\n        dataIndex: 'sex',\n        customRender: function customRender(text) {\n          if (text === 1) {\n            return '男';\n          } else if (text === 2) {\n            return '女';\n          } else {\n            return text;\n          }\n        }\n      }, {\n        title: '手机',\n        align: 'center',\n        dataIndex: 'phone'\n      }, {\n        title: '部门',\n        align: 'center',\n        dataIndex: 'orgCodeTxt'\n      }],\n      scrollTrigger: {},\n      dataSource: [],\n      selectionRows: [],\n      selectedRowKeys: [],\n      selectUserRows: [],\n      selectUserIds: [],\n      title: '根据部门选择用户',\n      ipagination: {\n        current: 1,\n        pageSize: 10,\n        pageSizeOptions: ['10', '20', '30'],\n        showTotal: function showTotal(total, range) {\n          return range[0] + '-' + range[1] + ' 共' + total + '条';\n        },\n        showQuickJumper: true,\n        showSizeChanger: true,\n        total: 0\n      },\n      isorter: {\n        column: 'createTime',\n        order: 'desc'\n      },\n      selectedDepIds: [],\n      departTree: [],\n      visible: false,\n      form: this.$form.createForm(this),\n      loading: false,\n      expandedKeys: [],\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 4\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 10\n        }\n      }\n    };\n  },\n  computed: {\n    // 计算属性的 getter\n    getType: function getType() {\n      return this.multi == true ? 'checkbox' : 'radio';\n    }\n  },\n  watch: {\n    userIds: {\n      immediate: true,\n      handler: function handler() {\n        this.initUserNames();\n      }\n    }\n  },\n  created: function created() {\n    // 该方法触发屏幕自适应\n    this.resetScreenSize();\n    this.loadData();\n  },\n  methods: {\n    initUserNames: function initUserNames() {\n      var _this = this;\n\n      if (this.userIds) {\n        // 这里最后加一个 , 的原因是因为无论如何都要使用 in 查询，防止后台进行了模糊匹配，导致查询结果不准确\n        var values = this.userIds.split(',') + ',';\n\n        var param = _defineProperty({}, this.store, values);\n\n        getAction('/sys/user/getMultiUser', param).then(function (list) {\n          _this.selectionRows = [];\n          var selectedRowKeys = [];\n          var textArray = [];\n\n          if (list && list.length > 0) {\n            var _iterator = _createForOfIteratorHelper(list),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var user = _step.value;\n                textArray.push(user[_this.text]);\n                selectedRowKeys.push(user['id']);\n\n                _this.selectionRows.push(user);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          }\n\n          _this.selectedRowKeys = selectedRowKeys;\n\n          _this.$emit('initComp', textArray.join(','));\n        });\n      } else {\n        // JSelectUserByDep组件bug issues/I16634\n        this.$emit('initComp', ''); // 前端用户选择单选无法置空的问题 #2610\n\n        this.selectedRowKeys = [];\n      }\n    },\n    loadData: function () {\n      var _loadData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(arg) {\n        var _this2 = this;\n\n        var params;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (arg === 1) {\n                  this.ipagination.current = 1;\n                }\n\n                params = this.getQueryParams(); //查询条件\n\n                this.loading = true;\n                getAction('/sys/user/queryUserComponentData', params).then(function (res) {\n                  if (res.success) {\n                    _this2.dataSource = res.result.records;\n                    _this2.ipagination.total = res.result.total;\n                  }\n                }).finally(function () {\n                  _this2.loading = false;\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadData(_x) {\n        return _loadData.apply(this, arguments);\n      }\n\n      return loadData;\n    }(),\n    // 触发屏幕自适应\n    resetScreenSize: function resetScreenSize() {\n      var screenWidth = document.body.clientWidth;\n\n      if (screenWidth < 500) {\n        this.scrollTrigger = {\n          x: 800\n        };\n      } else {\n        this.scrollTrigger = {};\n      }\n    },\n    showModal: function showModal() {\n      this.visible = true;\n      this.queryDepartTree();\n      this.initUserNames();\n      this.loadData();\n      this.form.resetFields();\n    },\n    getQueryParams: function getQueryParams() {\n      var param = Object.assign({}, this.queryParam, this.isorter);\n      param.field = this.getQueryField();\n      param.pageNo = this.ipagination.current;\n      param.pageSize = this.ipagination.pageSize;\n      param.departId = this.selectedDepIds.join(',');\n      return filterObj(param);\n    },\n    getQueryField: function getQueryField() {\n      var str = 'id,';\n\n      for (var a = 0; a < this.columns.length; a++) {\n        str += ',' + this.columns[a].dataIndex;\n      }\n\n      return str;\n    },\n    searchReset: function searchReset(num) {\n      var that = this;\n      that.selectedRowKeys = [];\n      that.selectUserIds = [];\n      that.selectedDepIds = [];\n\n      if (num !== 0) {\n        that.queryParam = {};\n        that.loadData(1);\n      }\n    },\n    close: function close() {\n      this.searchReset(0);\n      this.visible = false;\n    },\n    handleTableChange: function handleTableChange(pagination, filters, sorter) {\n      //TODO 筛选\n      if (Object.keys(sorter).length > 0) {\n        this.isorter.column = sorter.field;\n        this.isorter.order = 'ascend' === sorter.order ? 'asc' : 'desc';\n      }\n\n      this.ipagination = pagination;\n      this.loadData();\n    },\n    handleSubmit: function handleSubmit() {\n      var that = this;\n      this.getSelectUserRows();\n      that.$emit('ok', that.selectUserRows);\n      that.searchReset(0);\n      that.close();\n    },\n    //获取选择用户信息\n    getSelectUserRows: function getSelectUserRows() {\n      this.selectUserRows = [];\n\n      var _iterator2 = _createForOfIteratorHelper(this.selectionRows),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var row = _step2.value;\n\n          if (this.selectedRowKeys.includes(row.id)) {\n            this.selectUserRows.push(row);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.selectUserIds = this.selectUserRows.map(function (row) {\n        return row.username;\n      }).join(',');\n    },\n    // 点击树节点,筛选出对应的用户\n    onDepSelect: function onDepSelect(selectedDepIds) {\n      if (selectedDepIds[0] != null) {\n        if (this.selectedDepIds[0] !== selectedDepIds[0]) {\n          this.selectedDepIds = [selectedDepIds[0]];\n        }\n\n        this.loadData(1);\n      }\n    },\n    onSelectChange: function onSelectChange(selectedRowKeys, selectionRows) {\n      var _this3 = this;\n\n      this.selectedRowKeys = selectedRowKeys;\n      selectionRows.forEach(function (row) {\n        return pushIfNotExist(_this3.selectionRows, row, 'id');\n      });\n    },\n    onSearch: function onSearch() {\n      this.loadData(1);\n    },\n    // 根据选择的id来查询用户信息\n    initQueryUserByDepId: function initQueryUserByDepId(selectedDepIds) {\n      var _this4 = this;\n\n      this.loading = true;\n      return queryUserByDepId({\n        id: selectedDepIds.toString()\n      }).then(function (res) {\n        if (res.success) {\n          _this4.dataSource = res.result;\n          _this4.ipagination.total = res.result.length;\n        }\n      }).finally(function () {\n        _this4.loading = false;\n      });\n    },\n    queryDepartTree: function queryDepartTree() {\n      var _this5 = this;\n\n      //update-begin-author:taoyan date:20211202 for: 异步加载部门树 https://github.com/jeecgboot/jeecg-boot/issues/3196\n      this.expandedKeys = [];\n      this.departTree = [];\n      queryDepartTreeSync().then(function (res) {\n        if (res.success) {\n          for (var i = 0; i < res.result.length; i++) {\n            var temp = res.result[i];\n\n            _this5.departTree.push(temp);\n          }\n        }\n      });\n    },\n    onLoadDepartment: function onLoadDepartment(treeNode) {\n      return new Promise(function (resolve) {\n        queryDepartTreeSync({\n          pid: treeNode.dataRef.id\n        }).then(function (res) {\n          if (res.success) {\n            //判断chidlren是否为空，并修改isLeaf属性值\n            if (res.result.length == 0) {\n              treeNode.dataRef['isLeaf'] = true;\n              return;\n            } else {\n              treeNode.dataRef['children'] = res.result;\n            }\n          }\n        });\n        resolve();\n      });\n    },\n    //update-end-author:taoyan date:20211202 for: 异步加载部门树 https://github.com/jeecgboot/jeecg-boot/issues/3196\n    modalFormOk: function modalFormOk() {\n      this.loadData();\n    }\n  }\n};",{"version":3,"sources":["JSelectUserByDepModal.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <j-modal\n    :width=\"modalWidth\"\n    :visible=\"visible\"\n    :title=\"title\"\n    switchFullscreen\n    wrapClassName=\"j-user-select-modal\"\n    @ok=\"handleSubmit\"\n    @cancel=\"close\"\n    style=\"top:50px\"\n    cancelText=\"关闭\"\n  >\n    <a-row :gutter=\"10\" style=\"background-color: #ececec; padding: 10px; margin: -10px\">\n      <a-col :md=\"6\" :sm=\"24\">\n        <a-card :bordered=\"false\">\n          <!--组织机构-->\n          <a-directory-tree\n            selectable\n            :selectedKeys=\"selectedDepIds\"\n            :checkStrictly=\"true\"\n            :dropdownStyle=\"{maxHeight:'200px',overflow:'auto'}\"\n            :treeData=\"departTree\"\n            :expandAction=\"false\"\n            @select=\"onDepSelect\"\n            :load-data=\"onLoadDepartment\"\n          />\n        </a-card>\n      </a-col>\n      <a-col :md=\"18\" :sm=\"24\">\n        <a-card :bordered=\"false\">\n          <a-form-model>\n            <a-form-model-item label=\"用户账号\" :labelCol=\"labelCol\" :wrapperCol=\"wrapperCol\">\n              <a-row type=\"flex\" :gutter=\"8\">\n                <a-col :span=\"18\">\n                  <a-input-search\n                      :style=\"{width:'100%'}\"\n                      placeholder=\"请输入账号\"\n                      v-model=\"queryParam.username\"\n                      @search=\"onSearch\"\n                  ></a-input-search>\n                </a-col>\n                <a-col :span=\"6\">\n                  <a-button @click=\"searchReset(1)\" icon=\"redo\">重置</a-button>\n                </a-col>\n              </a-row>\n            </a-form-model-item>\n          </a-form-model>\n          <!--用户列表-->\n          <a-table\n            ref=\"table\"\n            :scroll=\"scrollTrigger\"\n            size=\"middle\"\n            rowKey=\"id\"\n            :columns=\"columns\"\n            :dataSource=\"dataSource\"\n            :pagination=\"ipagination\"\n            :rowSelection=\"{selectedRowKeys: selectedRowKeys, onChange: onSelectChange,type: getType}\"\n            :loading=\"loading\"\n            @change=\"handleTableChange\">\n          </a-table>\n        </a-card>\n      </a-col>\n    </a-row>\n  </j-modal>\n</template>\n\n<script>\n  import { pushIfNotExist, filterObj } from '@/utils/util'\n  import {queryDepartTreeList, getUserList, queryUserByDepId, queryDepartTreeSync} from '@/api/api'\n  import { getAction } from '@/api/manage'\n\n  export default {\n    name: 'JSelectUserByDepModal',\n    components: {},\n    props: ['modalWidth', 'multi', 'userIds', 'store', 'text'],\n    data() {\n      return {\n        queryParam: {\n          username: \"\",\n        },\n        columns: [\n          {\n            title: '用户账号',\n            align: 'center',\n            dataIndex: 'username'\n          },\n          {\n            title: '用户姓名',\n            align: 'center',\n            dataIndex: 'realname'\n          },\n          {\n            title: '性别',\n            align: 'center',\n            dataIndex: 'sex',\n            customRender: function (text) {\n              if (text === 1) {\n                return '男'\n              } else if (text === 2) {\n                return '女'\n              } else {\n                return text\n              }\n            }\n          },\n          {\n            title: '手机',\n            align: 'center',\n            dataIndex: 'phone'\n          },\n          {\n            title: '部门',\n            align: 'center',\n            dataIndex: 'orgCodeTxt'\n          }\n        ],\n        scrollTrigger: {},\n        dataSource: [],\n        selectionRows: [],\n        selectedRowKeys: [],\n        selectUserRows: [],\n        selectUserIds: [],\n        title: '根据部门选择用户',\n        ipagination: {\n          current: 1,\n          pageSize: 10,\n          pageSizeOptions: ['10', '20', '30'],\n          showTotal: (total, range) => {\n            return range[0] + '-' + range[1] + ' 共' + total + '条'\n          },\n          showQuickJumper: true,\n          showSizeChanger: true,\n          total: 0\n        },\n        isorter: {\n          column: 'createTime',\n          order: 'desc'\n        },\n        selectedDepIds: [],\n        departTree: [],\n        visible: false,\n        form: this.$form.createForm(this),\n        loading: false,\n        expandedKeys: [],\n        labelCol: {\n          xs: { span: 24 },\n          sm: { span: 4 },\n        },\n        wrapperCol: {\n          xs: { span: 24 },\n          sm: { span: 10 },\n        },\n      }\n    },\n    computed: {\n      // 计算属性的 getter\n      getType: function () {\n        return this.multi == true ? 'checkbox' : 'radio';\n      }\n    },\n    watch: {\n      userIds: {\n        immediate: true,\n        handler() {\n          this.initUserNames()\n        }\n      },\n    },\n    created() {\n      // 该方法触发屏幕自适应\n      this.resetScreenSize();\n      this.loadData()\n    },\n    methods: {\n      initUserNames() {\n        if (this.userIds) {\n          // 这里最后加一个 , 的原因是因为无论如何都要使用 in 查询，防止后台进行了模糊匹配，导致查询结果不准确\n          let values = this.userIds.split(',') + ','\n          let param = {[this.store]: values}\n          getAction('/sys/user/getMultiUser', param).then((list)=>{\n            this.selectionRows = []\n            let selectedRowKeys = []\n            let textArray = []\n            if(list && list.length>0){\n              for(let user of list){\n                textArray.push(user[this.text])\n                selectedRowKeys.push(user['id'])\n                this.selectionRows.push(user)\n              }\n            }\n            this.selectedRowKeys = selectedRowKeys\n            this.$emit('initComp', textArray.join(','))\n          })\n\n        } else {\n          // JSelectUserByDep组件bug issues/I16634\n          this.$emit('initComp', '')\n          // 前端用户选择单选无法置空的问题 #2610\n          this.selectedRowKeys = []\n        }\n      },\n      async loadData(arg) {\n        if (arg === 1) {\n          this.ipagination.current = 1;\n        }\n        let params = this.getQueryParams()//查询条件\n        this.loading = true\n        getAction('/sys/user/queryUserComponentData', params).then(res=>{\n          if (res.success) {\n            this.dataSource = res.result.records\n            this.ipagination.total = res.result.total\n          }\n        }).finally(() => {\n          this.loading = false\n        })\n      },\n      // 触发屏幕自适应\n      resetScreenSize() {\n        let screenWidth = document.body.clientWidth;\n        if (screenWidth < 500) {\n          this.scrollTrigger = {x: 800};\n        } else {\n          this.scrollTrigger = {};\n        }\n      },\n      showModal() {\n        this.visible = true;\n        this.queryDepartTree();\n        this.initUserNames()\n        this.loadData();\n        this.form.resetFields();\n      },\n      getQueryParams() {\n        let param = Object.assign({}, this.queryParam, this.isorter);\n        param.field = this.getQueryField();\n        param.pageNo = this.ipagination.current;\n        param.pageSize = this.ipagination.pageSize;\n        param.departId = this.selectedDepIds.join(',')\n        return filterObj(param);\n      },\n      getQueryField() {\n        let str = 'id,';\n        for (let a = 0; a < this.columns.length; a++) {\n          str += ',' + this.columns[a].dataIndex;\n        }\n        return str;\n      },\n      searchReset(num) {\n        let that = this;\n        that.selectedRowKeys = [];\n        that.selectUserIds = [];\n        that.selectedDepIds = [];\n        if (num !== 0) {\n          that.queryParam = {};\n          that.loadData(1);\n        }\n      },\n      close() {\n        this.searchReset(0);\n        this.visible = false;\n      },\n      handleTableChange(pagination, filters, sorter) {\n        //TODO 筛选\n        if (Object.keys(sorter).length > 0) {\n          this.isorter.column = sorter.field;\n          this.isorter.order = 'ascend' === sorter.order ? 'asc' : 'desc';\n        }\n        this.ipagination = pagination;\n        this.loadData();\n      },\n      handleSubmit() {\n        let that = this;\n        this.getSelectUserRows();\n        that.$emit('ok', that.selectUserRows);\n        that.searchReset(0)\n        that.close();\n      },\n      //获取选择用户信息\n      getSelectUserRows() {\n        this.selectUserRows = []\n        for (let row of this.selectionRows) {\n          if (this.selectedRowKeys.includes(row.id)) {\n            this.selectUserRows.push(row)\n          }\n        }\n        this.selectUserIds = this.selectUserRows.map(row => row.username).join(',')\n      },\n      // 点击树节点,筛选出对应的用户\n      onDepSelect(selectedDepIds) {\n        if (selectedDepIds[0] != null) {\n          if (this.selectedDepIds[0] !== selectedDepIds[0]) {\n            this.selectedDepIds = [selectedDepIds[0]];\n          }\n          this.loadData(1);\n        }\n      },\n      onSelectChange(selectedRowKeys, selectionRows) {\n        this.selectedRowKeys = selectedRowKeys;\n        selectionRows.forEach(row => pushIfNotExist(this.selectionRows, row, 'id'))\n      },\n      onSearch() {\n        this.loadData(1);\n      },\n      // 根据选择的id来查询用户信息\n      initQueryUserByDepId(selectedDepIds) {\n        this.loading = true\n        return queryUserByDepId({id: selectedDepIds.toString()}).then((res) => {\n          if (res.success) {\n            this.dataSource = res.result;\n            this.ipagination.total = res.result.length;\n          }\n        }).finally(() => {\n          this.loading = false\n        })\n      },\n      queryDepartTree() {\n        //update-begin-author:taoyan date:20211202 for: 异步加载部门树 https://github.com/jeecgboot/jeecg-boot/issues/3196\n        this.expandedKeys = []\n        this.departTree = []\n        queryDepartTreeSync().then((res) => {\n          if (res.success) {\n            for (let i = 0; i < res.result.length; i++) {\n              let temp = res.result[i]\n              this.departTree.push(temp)\n            }\n          }\n        })\n      },\n      onLoadDepartment(treeNode){\n        return new Promise(resolve => {\n          queryDepartTreeSync({pid:treeNode.dataRef.id}).then((res) =>  {\n            if (res.success) {\n              //判断chidlren是否为空，并修改isLeaf属性值\n              if(res.result.length == 0){\n                treeNode.dataRef['isLeaf']=true\n                return;\n              }else{\n                treeNode.dataRef['children']= res.result;\n              }\n            }\n          })\n          resolve();\n        });\n      },\n      //update-end-author:taoyan date:20211202 for: 异步加载部门树 https://github.com/jeecgboot/jeecg-boot/issues/3196\n      modalFormOk() {\n        this.loadData();\n      }\n    }\n  }\n</script>\n\n<style scoped>\n  .ant-table-tbody .ant-table-row td {\n    padding-top: 10px;\n    padding-bottom: 10px;\n  }\n\n  #components-layout-demo-custom-trigger .trigger {\n    font-size: 18px;\n    line-height: 64px;\n    padding: 0 24px;\n    cursor: pointer;\n    transition: color .3s;\n  }\n</style>\n"],"sourceRoot":"src/components/jeecgbiz/modal"}]}