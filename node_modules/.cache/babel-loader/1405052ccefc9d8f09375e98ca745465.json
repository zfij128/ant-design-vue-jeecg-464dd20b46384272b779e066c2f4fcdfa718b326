{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\jeecg\\JVxeTable\\mixins\\vxe.web.socket.mixins.js","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\jeecg\\JVxeTable\\mixins\\vxe.web.socket.mixins.js","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1665642923347}],"contextDependencies":[],"result":["import store from '@/store/';\nimport { randomUUID } from '@/utils/util';\nimport Vue from 'vue';\nimport { ACCESS_TOKEN } from '@/store/mutation-types'; // vxe socket\n\nvar vs = {\n  // 页面唯一 id，用于标识同一用户，不同页面的websocket\n  pageId: randomUUID(),\n  // webSocket 对象\n  ws: null,\n  // 一些常量\n  constants: {\n    // 消息类型\n    TYPE: 'type',\n    // 消息数据\n    DATA: 'data',\n    // 消息类型：心跳检测\n    TYPE_HB: 'heart_beat',\n    // 消息类型：通用数据传递\n    TYPE_CSD: 'common_send_date',\n    // 消息类型：更新vxe table数据\n    TYPE_UVT: 'update_vxe_table'\n  },\n  // 心跳检测\n  heartCheck: {\n    // 间隔时间，间隔多久发送一次心跳消息\n    interval: 10000,\n    // 心跳消息超时时间，心跳消息多久没有回复后重连\n    timeout: 6000,\n    timeoutTimer: null,\n    clear: function clear() {\n      clearTimeout(this.timeoutTimer);\n      return this;\n    },\n    start: function start() {\n      vs.sendMessage(vs.constants.TYPE_HB, ''); // 如果超过一定时间还没重置，说明后端主动断开了\n\n      this.timeoutTimer = window.setTimeout(function () {\n        vs.reconnect();\n      }, this.timeout);\n      return this;\n    },\n    // 心跳消息返回\n    back: function back() {\n      var _this = this;\n\n      this.clear();\n      window.setTimeout(function () {\n        return _this.start();\n      }, this.interval);\n    }\n  },\n\n  /** 初始化 WebSocket */\n  initialWebSocket: function initialWebSocket() {\n    if (this.ws === null) {\n      var userId = store.getters.userInfo.id;\n\n      var domain = window._CONFIG['domianURL'].replace('https://', 'wss://').replace('http://', 'ws://');\n\n      var url = \"\".concat(domain, \"/vxeSocket/\").concat(userId, \"/\").concat(this.pageId); //update-begin-author:taoyan date:2022-4-22 for:  v2.4.6 的 websocket 服务端，存在性能和安全问题。 #3278\n\n      var token = Vue.ls.get(ACCESS_TOKEN);\n      this.ws = new WebSocket(url, [token]); //update-end-author:taoyan date:2022-4-22 for:  v2.4.6 的 websocket 服务端，存在性能和安全问题。 #3278\n\n      this.ws.onopen = this.on.open.bind(this);\n      this.ws.onerror = this.on.error.bind(this);\n      this.ws.onmessage = this.on.message.bind(this);\n      this.ws.onclose = this.on.close.bind(this);\n      console.log('this.ws: ', this.ws);\n    }\n  },\n  // 发送消息\n  sendMessage: function sendMessage(type, message) {\n    try {\n      var ws = this.ws;\n\n      if (ws != null && ws.readyState === ws.OPEN) {\n        ws.send(JSON.stringify({\n          type: type,\n          data: message\n        }));\n      }\n    } catch (err) {\n      console.warn('【VXEWebSocket】发送消息失败：(' + err.code + ')');\n    }\n  },\n\n  /** 绑定全局VXE表格 */\n  tableMap: new Map(),\n  CSDMap: new Map(),\n\n  /** 添加绑定 */\n  addBind: function addBind(map, key, value) {\n    var binds = map.get(key);\n\n    if (Array.isArray(binds)) {\n      binds.push(value);\n    } else {\n      map.set(key, [value]);\n    }\n  },\n\n  /** 移除绑定 */\n  removeBind: function removeBind(map, key, value) {\n    var binds = map.get(key);\n\n    if (Array.isArray(binds)) {\n      for (var i = 0; i < binds.length; i++) {\n        var bind = binds[i];\n\n        if (bind === value) {\n          binds.splice(i, 1);\n          break;\n        }\n      }\n\n      if (binds.length === 0) {\n        map.delete(key);\n      }\n    } else {\n      map.delete(key);\n    }\n  },\n  // 呼叫绑定的表单\n  callBind: function callBind(map, key, callback) {\n    var binds = map.get(key);\n\n    if (Array.isArray(binds)) {\n      binds.forEach(callback);\n    }\n  },\n  lockReconnect: false,\n\n  /** 尝试重连 */\n  reconnect: function reconnect() {\n    var _this2 = this;\n\n    if (this.lockReconnect) return;\n    this.lockReconnect = true;\n    setTimeout(function () {\n      if (_this2.ws && _this2.ws.close) {\n        _this2.ws.close();\n      }\n\n      _this2.ws = null;\n      console.info('【VXEWebSocket】尝试重连...');\n\n      _this2.initialWebSocket();\n\n      _this2.lockReconnect = false;\n    }, 5000);\n  },\n  on: {\n    open: function open() {\n      console.log('【VXEWebSocket】连接成功');\n      this.heartCheck.start();\n    },\n    error: function error(e) {\n      console.warn('【VXEWebSocket】连接发生错误:', e);\n      this.reconnect();\n    },\n    message: function message(e) {\n      var _this3 = this;\n\n      // 解析消息\n      var json;\n\n      try {\n        json = JSON.parse(e.data);\n      } catch (e) {\n        console.warn('【VXEWebSocket】收到无法解析的消息:', e.data);\n        return;\n      }\n\n      var type = json[this.constants.TYPE];\n      var data = json[this.constants.DATA];\n\n      switch (type) {\n        // 心跳检测\n        case this.constants.TYPE_HB:\n          this.heartCheck.back();\n          break;\n        // 通用数据传递\n\n        case this.constants.TYPE_CSD:\n          this.callBind(this.CSDMap, data.key, function (fn) {\n            return fn.apply(_this3, data.args);\n          });\n          break;\n        // 更新form数据\n\n        case this.constants.TYPE_UVT:\n          this.callBind(this.tableMap, data.socketKey, function (vm) {\n            return _this3.onVM['onUpdateTable'].apply(vm, data.args);\n          });\n          break;\n\n        default:\n          console.warn('【VXEWebSocket】收到不识别的消息类型:' + type);\n          break;\n      }\n    },\n    close: function close(e) {\n      console.log('【VXEWebSocket】连接被关闭:', e);\n      this.reconnect();\n    }\n  },\n  onVM: {\n    /** 收到更新表格的消息 */\n    onUpdateTable: function onUpdateTable(row, caseId) {\n      var _this4 = this;\n\n      // 判断是不是自己发的消息\n      if (this.caseId !== caseId) {\n        var tableRow = this.getIfRowById(row.id).row; // 局部保更新数据\n\n        if (tableRow) {\n          // 特殊处理拖轮状态\n          if (row['tug_status'] && tableRow['tug_status']) {\n            row['tug_status'] = Object.assign({}, tableRow['tug_status'], row['tug_status']);\n          } // 判断是否启用重载特效\n\n\n          if (this.reloadEffect) {\n            this.$set(this.reloadEffectRowKeysMap, row.id, true);\n          }\n\n          Object.keys(row).forEach(function (key) {\n            if (key !== 'id') {\n              _this4.$set(tableRow, key, row[key]);\n            }\n          });\n          this.$refs.vxe.reloadRow(tableRow);\n        }\n      }\n    }\n  }\n};\nexport default {\n  props: {\n    // 是否开启使用 webSocket 无痕刷新\n    socketReload: {\n      type: Boolean,\n      default: false\n    },\n    socketKey: {\n      type: String,\n      default: 'vxe-default'\n    }\n  },\n  data: function data() {\n    return {};\n  },\n  mounted: function mounted() {\n    if (this.socketReload) {\n      vs.initialWebSocket();\n      vs.addBind(vs.tableMap, this.socketKey, this);\n    }\n  },\n  methods: {\n    /** 发送socket消息更新行 */\n    socketSendUpdateRow: function socketSendUpdateRow(row) {\n      vs.sendMessage(vs.constants.TYPE_UVT, {\n        socketKey: this.socketKey,\n        args: [row, this.caseId]\n      });\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    vs.removeBind(vs.tableMap, this.socketKey, this);\n  }\n};\n/**\n * 添加WebSocket通用数据传递绑定，相同的key可以添加多个方法绑定\n * @param key 唯一key\n * @param fn 当消息来的时候触发的回调方法\n */\n\nexport function addBindSocketCSD(key, fn) {\n  if (typeof fn === 'function') {\n    vs.addBind(vs.CSDMap, key, fn);\n  }\n}\n/**\n * 移除WebSocket通用数据传递绑定\n * @param key 唯一key\n * @param fn 要移除的方法，必须和添加时的方法内存层面上保持一致才可以正确移除\n */\n\nexport function removeBindSocketCSD(key, fn) {\n  if (typeof fn === 'function') {\n    vs.removeBind(vs.CSDMap, key, fn);\n  }\n}",{"version":3,"sources":["D:/云晟/前端/ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326/src/components/jeecg/JVxeTable/mixins/vxe.web.socket.mixins.js"],"names":["store","randomUUID","Vue","ACCESS_TOKEN","vs","pageId","ws","constants","TYPE","DATA","TYPE_HB","TYPE_CSD","TYPE_UVT","heartCheck","interval","timeout","timeoutTimer","clear","clearTimeout","start","sendMessage","window","setTimeout","reconnect","back","initialWebSocket","userId","getters","userInfo","id","domain","_CONFIG","replace","url","token","ls","get","WebSocket","onopen","on","open","bind","onerror","error","onmessage","message","onclose","close","console","log","type","readyState","OPEN","send","JSON","stringify","data","err","warn","code","tableMap","Map","CSDMap","addBind","map","key","value","binds","Array","isArray","push","set","removeBind","i","length","splice","delete","callBind","callback","forEach","lockReconnect","info","e","json","parse","fn","apply","args","socketKey","vm","onVM","onUpdateTable","row","caseId","tableRow","getIfRowById","Object","assign","reloadEffect","$set","reloadEffectRowKeysMap","keys","$refs","vxe","reloadRow","props","socketReload","Boolean","default","String","mounted","methods","socketSendUpdateRow","beforeDestroy","addBindSocketCSD","removeBindSocketCSD"],"mappings":"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","sourcesContent":["import store from '@/store/'\nimport { randomUUID } from '@/utils/util'\nimport Vue from 'vue'\nimport { ACCESS_TOKEN } from '@/store/mutation-types'\n\n// vxe socket\nconst vs = {\n  // 页面唯一 id，用于标识同一用户，不同页面的websocket\n  pageId: randomUUID(),\n  // webSocket 对象\n  ws: null,\n  // 一些常量\n  constants: {\n    // 消息类型\n    TYPE: 'type',\n    // 消息数据\n    DATA: 'data',\n    // 消息类型：心跳检测\n    TYPE_HB: 'heart_beat',\n    // 消息类型：通用数据传递\n    TYPE_CSD: 'common_send_date',\n    // 消息类型：更新vxe table数据\n    TYPE_UVT: 'update_vxe_table',\n  },\n  // 心跳检测\n  heartCheck: {\n    // 间隔时间，间隔多久发送一次心跳消息\n    interval: 10000,\n    // 心跳消息超时时间，心跳消息多久没有回复后重连\n    timeout: 6000,\n    timeoutTimer: null,\n    clear() {\n      clearTimeout(this.timeoutTimer)\n      return this\n    },\n    start() {\n      vs.sendMessage(vs.constants.TYPE_HB, '')\n      // 如果超过一定时间还没重置，说明后端主动断开了\n      this.timeoutTimer = window.setTimeout(() => {\n        vs.reconnect()\n      }, this.timeout)\n      return this\n    },\n    // 心跳消息返回\n    back() {\n      this.clear()\n      window.setTimeout(() => this.start(), this.interval)\n    },\n  },\n\n  /** 初始化 WebSocket */\n  initialWebSocket() {\n    if (this.ws === null) {\n      const userId = store.getters.userInfo.id\n      const domain = window._CONFIG['domianURL'].replace('https://', 'wss://').replace('http://', 'ws://')\n      const url = `${domain}/vxeSocket/${userId}/${this.pageId}`\n\n      //update-begin-author:taoyan date:2022-4-22 for:  v2.4.6 的 websocket 服务端，存在性能和安全问题。 #3278\n      let token = Vue.ls.get(ACCESS_TOKEN)\n      this.ws = new WebSocket(url, [token])\n      //update-end-author:taoyan date:2022-4-22 for:  v2.4.6 的 websocket 服务端，存在性能和安全问题。 #3278\n      this.ws.onopen = this.on.open.bind(this)\n      this.ws.onerror = this.on.error.bind(this)\n      this.ws.onmessage = this.on.message.bind(this)\n      this.ws.onclose = this.on.close.bind(this)\n\n      console.log('this.ws: ', this.ws)\n    }\n  },\n\n  // 发送消息\n  sendMessage(type, message) {\n    try {\n      let ws = this.ws\n      if (ws != null && ws.readyState === ws.OPEN) {\n        ws.send(JSON.stringify({\n          type: type,\n          data: message\n        }))\n      }\n    } catch (err) {\n      console.warn('【VXEWebSocket】发送消息失败：(' + err.code + ')')\n    }\n  },\n\n  /** 绑定全局VXE表格 */\n  tableMap: new Map(),\n  CSDMap: new Map(),\n  /** 添加绑定 */\n  addBind(map, key, value) {\n    let binds = map.get(key)\n    if (Array.isArray(binds)) {\n      binds.push(value)\n    } else {\n      map.set(key, [value])\n    }\n  },\n  /** 移除绑定 */\n  removeBind(map, key, value) {\n    let binds = map.get(key)\n    if (Array.isArray(binds)) {\n      for (let i = 0; i < binds.length; i++) {\n        let bind = binds[i]\n        if (bind === value) {\n          binds.splice(i, 1)\n          break\n        }\n      }\n      if (binds.length === 0) {\n        map.delete(key)\n      }\n    } else {\n      map.delete(key)\n    }\n  },\n  // 呼叫绑定的表单\n  callBind(map, key, callback) {\n    let binds = map.get(key)\n    if (Array.isArray(binds)) {\n      binds.forEach(callback)\n    }\n  },\n\n  lockReconnect: false,\n  /** 尝试重连 */\n  reconnect() {\n    if (this.lockReconnect) return\n    this.lockReconnect = true\n    setTimeout(() => {\n      if (this.ws && this.ws.close) {\n        this.ws.close()\n      }\n      this.ws = null\n      console.info('【VXEWebSocket】尝试重连...')\n      this.initialWebSocket()\n      this.lockReconnect = false\n    }, 5000)\n  },\n\n  on: {\n    open() {\n      console.log('【VXEWebSocket】连接成功')\n      this.heartCheck.start()\n    },\n    error(e) {\n      console.warn('【VXEWebSocket】连接发生错误:', e)\n      this.reconnect()\n    },\n    message(e) {\n      // 解析消息\n      let json\n      try {\n        json = JSON.parse(e.data)\n      } catch (e) {\n        console.warn('【VXEWebSocket】收到无法解析的消息:', e.data)\n        return\n      }\n      let type = json[this.constants.TYPE]\n      let data = json[this.constants.DATA]\n      switch (type) {\n        // 心跳检测\n        case this.constants.TYPE_HB:\n          this.heartCheck.back()\n          break\n        // 通用数据传递\n        case this.constants.TYPE_CSD:\n          this.callBind(this.CSDMap, data.key, (fn) => fn.apply(this, data.args))\n          break\n        // 更新form数据\n        case this.constants.TYPE_UVT:\n          this.callBind(this.tableMap, data.socketKey, (vm) => this.onVM['onUpdateTable'].apply(vm, data.args))\n          break\n        default:\n          console.warn('【VXEWebSocket】收到不识别的消息类型:' + type)\n          break\n      }\n    },\n    close(e) {\n      console.log('【VXEWebSocket】连接被关闭:', e)\n      this.reconnect()\n    },\n  },\n\n  onVM: {\n    /** 收到更新表格的消息 */\n    onUpdateTable(row, caseId) {\n      // 判断是不是自己发的消息\n      if (this.caseId !== caseId) {\n        const tableRow = this.getIfRowById(row.id).row\n        // 局部保更新数据\n        if (tableRow) {\n          // 特殊处理拖轮状态\n          if (row['tug_status'] && tableRow['tug_status']) {\n            row['tug_status'] = Object.assign({}, tableRow['tug_status'], row['tug_status'])\n          }\n          // 判断是否启用重载特效\n          if (this.reloadEffect) {\n            this.$set(this.reloadEffectRowKeysMap, row.id, true)\n          }\n          Object.keys(row).forEach(key => {\n            if (key !== 'id') {\n              this.$set(tableRow, key, row[key])\n            }\n          })\n          this.$refs.vxe.reloadRow(tableRow)\n        }\n      }\n    },\n  },\n\n}\n\nexport default {\n  props: {\n    // 是否开启使用 webSocket 无痕刷新\n    socketReload: {\n      type: Boolean,\n      default: false\n    },\n    socketKey: {\n      type: String,\n      default: 'vxe-default'\n    },\n  },\n  data() {\n    return {}\n  },\n  mounted() {\n    if (this.socketReload) {\n      vs.initialWebSocket()\n      vs.addBind(vs.tableMap, this.socketKey, this)\n    }\n  },\n  methods: {\n\n    /** 发送socket消息更新行 */\n    socketSendUpdateRow(row) {\n      vs.sendMessage(vs.constants.TYPE_UVT, {\n        socketKey: this.socketKey,\n        args: [row, this.caseId],\n      })\n    },\n\n  },\n  beforeDestroy() {\n    vs.removeBind(vs.tableMap, this.socketKey, this)\n  },\n}\n\n/**\n * 添加WebSocket通用数据传递绑定，相同的key可以添加多个方法绑定\n * @param key 唯一key\n * @param fn 当消息来的时候触发的回调方法\n */\nexport function addBindSocketCSD(key, fn) {\n  if (typeof fn === 'function') {\n    vs.addBind(vs.CSDMap, key, fn)\n  }\n}\n\n/**\n * 移除WebSocket通用数据传递绑定\n * @param key 唯一key\n * @param fn 要移除的方法，必须和添加时的方法内存层面上保持一致才可以正确移除\n */\nexport function removeBindSocketCSD(key, fn) {\n  if (typeof fn === 'function') {\n    vs.removeBind(vs.CSDMap, key, fn)\n  }\n}\n"]}]}