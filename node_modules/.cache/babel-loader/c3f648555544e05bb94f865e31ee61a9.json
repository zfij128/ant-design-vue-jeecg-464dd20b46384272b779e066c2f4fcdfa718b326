{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\views\\user\\LoginPhone.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\views\\user\\LoginPhone.vue","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js","mtime":1665642924058}],"contextDependencies":[],"result":["function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { postAction } from '@/api/manage';\nimport { mapActions } from 'vuex';\nexport default {\n  name: 'LoginPhone',\n  data: function data() {\n    return {\n      model: {\n        mobile: '',\n        captcha: ''\n      },\n      //手机号登录用\n      state: {\n        time: 60,\n        smsSendBtn: false\n      },\n      validatorRules: {\n        mobile: [{\n          required: true,\n          message: '请输入手机号码!'\n        }, {\n          validator: this.validateMobile\n        }],\n        captcha: [{\n          required: true,\n          message: '请输入验证码!'\n        }]\n      }\n    };\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions(['PhoneLogin'])), {}, {\n    handleLogin: function handleLogin(rememberMe) {\n      var _this = this;\n\n      this.validateFields(['mobile', 'captcha'], function (err) {\n        if (!err) {\n          var loginParams = {\n            mobile: _this.model.mobile,\n            captcha: _this.model.captcha,\n            remember_me: rememberMe\n          };\n          console.log(\"登录参数\", loginParams);\n\n          _this.PhoneLogin(loginParams).then(function (res) {\n            _this.$emit('success', res.result);\n          }).catch(function (err) {\n            _this.$emit('fail', err);\n          });\n        } else {\n          _this.$emit('validateFail');\n        }\n      });\n    },\n    // 校验手机号\n    validateMobile: function validateMobile(rule, value, callback) {\n      if (!value || new RegExp(/^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\\d{8}$/).test(value)) {\n        callback();\n      } else {\n        callback(\"您的手机号码格式不正确!\");\n      }\n    },\n    //获取验证码\n    getCaptcha: function getCaptcha(e) {\n      e.preventDefault();\n      var that = this;\n      that.validateFields(['mobile'], function (err) {\n        if (!err) {\n          that.state.smsSendBtn = true;\n          var interval = window.setInterval(function () {\n            if (that.state.time-- <= 0) {\n              that.state.time = 60;\n              that.state.smsSendBtn = false;\n              window.clearInterval(interval);\n            }\n          }, 1000);\n          var hide = that.$message.loading('验证码发送中..', 0);\n          var smsParams = {};\n          smsParams.mobile = that.model.mobile;\n          smsParams.smsmode = \"0\";\n          postAction(\"/sys/sms\", smsParams).then(function (res) {\n            if (!res.success) {\n              setTimeout(hide, 0);\n              that.cmsFailed(res.message);\n            }\n\n            console.log(res);\n            setTimeout(hide, 500);\n          }).catch(function (err) {\n            setTimeout(hide, 1);\n            clearInterval(interval);\n            that.state.time = 60;\n            that.state.smsSendBtn = false;\n            that.requestFailed(err);\n          });\n        }\n      });\n    },\n    cmsFailed: function cmsFailed(err) {\n      this.$notification['error']({\n        message: '获取验证码失败',\n        description: err,\n        duration: 4\n      });\n    },\n\n    /**\n     * 验证字段\n     * @param arr\n     * @param callback\n     */\n    validateFields: function validateFields(arr, callback) {\n      var _this2 = this;\n\n      var promiseArray = [];\n\n      var _iterator = _createForOfIteratorHelper(arr),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var item = _step.value;\n          var p = new Promise(function (resolve, reject) {\n            _this2.$refs['form'].validateField(item, function (err) {\n              if (!err) {\n                resolve();\n              } else {\n                reject(err);\n              }\n            });\n          });\n          promiseArray.push(p);\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      Promise.all(promiseArray).then(function () {\n        callback();\n      }).catch(function (err) {\n        callback(err);\n      });\n    }\n  })\n};",{"version":3,"sources":["LoginPhone.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <a-form-model ref=\"form\" :model=\"model\" :rules=\"validatorRules\">\n      <a-form-model-item required prop=\"mobile\">\n        <a-input v-model=\"model.mobile\" size=\"large\" type=\"text\" placeholder=\"请输入手机号\">\n          <a-icon slot=\"prefix\" type=\"mobile\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n        </a-input>\n      </a-form-model-item>\n      <a-row :gutter=\"16\">\n        <a-col class=\"gutter-row\" :span=\"16\">\n          <a-form-model-item required prop=\"captcha\">\n            <a-input v-model=\"model.captcha\" size=\"large\" type=\"text\" placeholder=\"请输入验证码\">\n              <a-icon slot=\"prefix\" type=\"mail\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\n            </a-input>\n          </a-form-model-item>\n        </a-col>\n        <a-col class=\"gutter-row\" :span=\"8\">\n          <a-button\n            class=\"getCaptcha\"\n            tabindex=\"-1\"\n            :disabled=\"state.smsSendBtn\"\n            @click.stop.prevent=\"getCaptcha\"\n            v-text=\"!state.smsSendBtn && '获取验证码' || (state.time+' s')\"></a-button>\n        </a-col>\n      </a-row>\n    </a-form-model>\n  </div>\n</template>\n\n<script>\n  import { postAction } from '@/api/manage'\n  import { mapActions } from 'vuex'\n\n  export default {\n    name: 'LoginPhone',\n    data(){\n      return {\n        model:{\n          mobile: '',\n          captcha: ''\n        },\n        //手机号登录用\n        state: {\n          time: 60,\n          smsSendBtn: false,\n        },\n        validatorRules:{\n          mobile: [\n            { required: true, message: '请输入手机号码!' },\n            { validator: this.validateMobile }\n          ],\n          captcha: [{\n            required: true, message: '请输入验证码!'\n          }]\n        }\n\n      }\n    },\n    methods:{\n      ...mapActions(['PhoneLogin']),\n      handleLogin(rememberMe){\n        this.validateFields([ 'mobile', 'captcha' ], (err) => {\n          if (!err) {\n            let loginParams = {\n              mobile: this.model.mobile,\n              captcha: this.model.captcha,\n              remember_me: rememberMe\n            }\n            console.log(\"登录参数\", loginParams)\n            this.PhoneLogin(loginParams).then((res) => {\n              this.$emit('success', res.result)\n            }).catch((err) => {\n              this.$emit('fail', err)\n            });\n          }else{\n            this.$emit('validateFail')\n          }\n        })\n      },\n      // 校验手机号\n      validateMobile(rule,value,callback){\n        if (!value || new RegExp(/^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\\d{8}$/).test(value)){\n          callback();\n        }else{\n          callback(\"您的手机号码格式不正确!\");\n        }\n      },\n      //获取验证码\n      getCaptcha (e) {\n        e.preventDefault();\n        let that = this;\n        that.validateFields([ 'mobile' ], (err) => {\n            if (!err) {\n              that.state.smsSendBtn = true;\n              let interval = window.setInterval(() => {\n                if (that.state.time-- <= 0) {\n                  that.state.time = 60;\n                  that.state.smsSendBtn = false;\n                  window.clearInterval(interval);\n                }\n              }, 1000);\n\n              const hide = that.$message.loading('验证码发送中..', 0);\n              let smsParams = {};\n              smsParams.mobile=that.model.mobile;\n              smsParams.smsmode=\"0\";\n              postAction(\"/sys/sms\",smsParams)\n                .then(res => {\n                  if(!res.success){\n                    setTimeout(hide, 0);\n                    that.cmsFailed(res.message);\n                  }\n                  console.log(res);\n                  setTimeout(hide, 500);\n                })\n                .catch(err => {\n                  setTimeout(hide, 1);\n                  clearInterval(interval);\n                  that.state.time = 60;\n                  that.state.smsSendBtn = false;\n                  that.requestFailed(err);\n                });\n            }\n          }\n        );\n      },\n      cmsFailed(err){\n        this.$notification[ 'error' ]({\n          message: '获取验证码失败',\n          description:err,\n          duration: 4,\n        });\n      },\n      /**\n       * 验证字段\n       * @param arr\n       * @param callback\n       */\n      validateFields(arr, callback){\n        let promiseArray = []\n        for(let item of arr){\n          let p = new Promise((resolve, reject) => {\n            this.$refs['form'].validateField(item, (err)=>{\n              if(!err){\n                resolve();\n              }else{\n                reject(err);\n              }\n            })\n          });\n          promiseArray.push(p)\n        }\n        Promise.all(promiseArray).then(()=>{\n          callback()\n        }).catch(err=>{\n          callback(err)\n        })\n      },\n\n\n    }\n\n  }\n</script>\n\n<style scoped>\n.getCaptcha{\n  display: block;\n  width: 100%;\n  height: 40px;\n}\n</style>"],"sourceRoot":"src/views/user"}]}