{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\jeecg\\JEditableTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\jeecg\\JEditableTable.vue","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js","mtime":1665642924058}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"D:/\\u4E91\\u665F/\\u524D\\u7AEF/ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from 'vue';\nimport Draggable from 'vuedraggable';\nimport { ACCESS_TOKEN } from '@/store/mutation-types';\nimport { FormTypes, VALIDATE_NO_PASSED } from '@/utils/JEditableTableUtil';\nimport { cloneObject, getEventPath, randomNumber, randomString } from '@/utils/util';\nimport JDate from '@/components/jeecg/JDate';\nimport { filterDictText, initDictOptions } from '@/components/dict/JDictSelectUtil';\nimport { getFileAccessHttpUrl } from '@/api/manage';\nimport JInputPop from '@/components/jeecg/minipop/JInputPop';\nimport JFilePop from '@/components/jeecg/minipop/JFilePop';\nimport { getNoAuthCols } from '@/utils/authFilter'; // 行高，需要在实例加载完成前用到\n\nvar rowHeight = 61;\nexport default {\n  name: 'JEditableTable',\n  components: {\n    JDate: JDate,\n    Draggable: Draggable,\n    JInputPop: JInputPop,\n    JFilePop: JFilePop\n  },\n  provide: function provide() {\n    var _this = this;\n\n    return {\n      parentIsJEditableTable: true,\n      getDestroyCleanGroupRequest: function getDestroyCleanGroupRequest() {\n        return _this.destroyCleanGroupRequest;\n      }\n    };\n  },\n  props: {\n    // 列信息\n    columns: {\n      type: Array,\n      required: true\n    },\n    // 数据源\n    dataSource: {\n      type: Array,\n      required: true,\n      default: function _default() {\n        return [];\n      }\n    },\n    // 是否显示操作按钮\n    actionButton: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示添加按钮选项\n    addButtonSettings: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示行号\n    rowNumber: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可选择行\n    rowSelection: {\n      type: Boolean,\n      default: false\n    },\n    // 页面是否在加载中\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    // 表格内容区域最大高度\n    maxHeight: {\n      type: Number,\n      default: 400\n    },\n    // 要禁用的行\n    disabledRows: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    // 是否禁用全部组件\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可拖拽排序\n    dragSort: {\n      type: Boolean,\n      default: false\n    },\n    dragSortKey: {\n      type: String,\n      default: 'orderNum'\n    },\n    // 是否一直显示编辑框，如果为false则只有点击的时候才出现输入框\n    alwaysEdit: {\n      type: Boolean,\n      default: true\n    },\n    authPre: {\n      type: String,\n      required: false,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      // 是否首次运行\n      isFirst: true,\n      // 当前实例是否是行编辑\n      isJEditableTable: true,\n      // caseId，用于防止有多个实例的时候会冲突\n      caseId: \"_jet-\".concat(randomString(6), \"-\"),\n      // 临时ID标识，凡是以该标识结尾的ID都是临时ID，不添加到数据库中\n      tempId: \"_tid-\".concat(randomString(6)),\n      // 存储document element 对象\n      el: {\n        inputTable: null,\n        tbody: null\n      },\n      // 存储各个div的style\n      style: {\n        // 'max-height': '400px'\n        tbody: {\n          left: '0px'\n        },\n        // 左侧固定td的style\n        tdLeft: {}\n      },\n      // 表单的类型\n      formTypes: FormTypes,\n      // 行数据\n      rows: [],\n      // 行高，height + padding + border\n      rowHeight: rowHeight,\n      // 滚动条顶部距离\n      scrollTop: 0,\n      // 绑定 select 的值\n      selectValues: {},\n      // 绑定 checkbox 的值\n      checkboxValues: {},\n      // 绑定 jdate 的值\n      jdateValues: {},\n      // 绑定jinputpop\n      jInputPopValues: {},\n      // 绑定插槽数据\n      slotValues: {},\n      // file 信息\n      uploadValues: {},\n      //popup信息\n      popupValues: {},\n      //部门组件信息\n      departCompValues: {},\n      //用户组件信息\n      userCompValues: {},\n      radioValues: {},\n      metaCheckboxValues: {},\n      multiSelectValues: {},\n      searchSelectValues: {},\n      searchSelectAsyncValues: {},\n      // 绑定左侧选择框已选择的id\n      selectedRowIds: [],\n      // 存储被删除行的id\n      deleteIds: [],\n      // 存储显示tooltip的信息\n      tooltips: {},\n      // 存储没有通过验证的inputId\n      notPassedIds: [],\n      // 当前是否正在拖拽排序\n      dragging: false,\n      // 是否有统计列\n      hasStatisticsColumn: false,\n      statisticsColumns: {},\n      // 只有在行编辑被销毁时才主动清空GroupRequest的内存\n      destroyCleanGroupRequest: false,\n      // 当前正在编辑的行的id\n      currentEditRows: {},\n      // 上次push数据的事件，用于判断是否点击过快\n      lastPushTimeMap: new Map(),\n      number: 0,\n      //不显示的按钮编码\n      excludeCode: [],\n      // 选项配置\n      settings: {\n        // 添加行数\n        addRowNum: 1,\n        // 添加位置（下标），0 = 最底部\n        addIndex: 0,\n        // 添加后滚动到底部\n        addScrollToBottom: false\n      }\n    };\n  },\n  created: function created() {\n    var _this2 = this;\n\n    this.inputValues = []; // 当前显示的tr\n\n    this.visibleTrEls = [];\n    this.disabledRowIds = this.disabledRowIds || []; // 解决火狐浏览器下拖拽会打开新的Tab的问题\n\n    document.body.ondrop = function (event) {\n      if (_this2.dragging) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    };\n\n    this.getSavedAddButtonSettings();\n  },\n  // 计算属性\n  computed: {\n    // expandHeight = rows.length * rowHeight\n    getExpandHeight: function getExpandHeight() {\n      var length = this.rows.length * this.rowHeight;\n\n      if (this.showStatisticsRow) {\n        length += 34;\n      }\n\n      return length;\n    },\n    // 是否显示统计行\n    showStatisticsRow: function showStatisticsRow() {\n      return this.hasStatisticsColumn && this.rows.length > 0;\n    },\n    // 获取是否选择了部分\n    getSelectIndeterminate: function getSelectIndeterminate() {\n      return this.selectedRowIds.length > 0 && this.selectedRowIds.length < this.rows.length;\n    },\n    // 获取是否选择了全部\n    getSelectAll: function getSelectAll() {\n      return this.selectedRowIds.length === this.rows.length && this.rows.length > 0;\n    },\n    tbodyStyle: function tbodyStyle() {\n      var style = Object.assign({}, this.style.tbody); // style['max-height'] = `${this.maxHeight}px`\n\n      style['width'] = this.realTrWidth;\n      return style;\n    },\n    showClearSelectButton: function showClearSelectButton() {\n      var count = 0;\n\n      for (var key in this.disabledRows) {\n        if (this.disabledRows.hasOwnProperty(key)) count++;\n      }\n\n      return count > 0;\n    },\n    accessToken: function accessToken() {\n      return Vue.ls.get(ACCESS_TOKEN);\n    },\n    realTrWidth: function realTrWidth() {\n      var splice = ' + ';\n      var calcWidth = 'calc(';\n      this.columns.forEach(function (column, i) {\n        var type = column.type,\n            width = column.width; // 隐藏字段不参与计算\n\n        if (type !== FormTypes.hidden) {\n          if (typeof width === 'number') {\n            calcWidth += width + 'px';\n          } else if (typeof width === 'string') {\n            calcWidth += width;\n          } else {\n            calcWidth += '120px';\n          }\n\n          calcWidth += splice;\n        }\n      });\n\n      if (calcWidth.endsWith(splice)) {\n        calcWidth = calcWidth.substring(0, calcWidth.length - splice.length);\n      }\n\n      calcWidth += ')'; // console.log('calcWidth: ', calcWidth)\n\n      return calcWidth;\n    }\n  },\n  // 侦听器\n  watch: {\n    rows: {\n      immediate: true,\n      handler: function handler(val, old) {// val.forEach(item => {\n        //   for (let inputValue of  this.inputValues) {\n        //     if (inputValue.id === item.id) {\n        //       item['dbFieldName'] = inputValue['dbFieldName']\n        //       break\n        //     }\n        //   }\n        // })\n        // console.log('watch.rows:', cloneObject({ val, old }))\n      }\n    },\n    dataSource: {\n      immediate: true,\n      handler: function handler(newValue) {\n        var _this3 = this;\n\n        // 兼容IE\n        this.getElementPromise('tbody').then(function () {\n          _this3.initialize();\n\n          _this3._pushByDataSource(newValue);\n        });\n      }\n    },\n    columns: {\n      immediate: true,\n      handler: function handler(columns) {\n        var _this4 = this;\n\n        //列改变的时候重新设置按钮权限信息\n        this.loadExcludeCode(); // 兼容IE\n\n        this.getElementPromise('tbody').then(function () {\n          columns.forEach(function (column) {\n            if (column.type === FormTypes.select || column.type === FormTypes.list_multi || column.type === FormTypes.sel_search) {\n              // 兼容 旧版本 options\n              if (column.options instanceof Array) {\n                column.options = column.options.map(function (item) {\n                  if (item) {\n                    return _objectSpread(_objectSpread({}, item), {}, {\n                      text: item.text || item.title,\n                      title: item.text || item.title\n                    });\n                  }\n\n                  return {};\n                });\n              }\n\n              if (column.dictCode) {\n                _this4._loadDictConcatToOptions(column);\n              }\n            }\n          });\n        });\n      }\n    },\n    // 当selectRowIds改变时触发事件\n    selectedRowIds: function selectedRowIds(newValue) {\n      var _this5 = this;\n\n      this.$emit('selectRowChange', cloneObject(newValue).map(function (i) {\n        return _this5.getCleanId(i);\n      }));\n    }\n  },\n  mounted: function mounted() {\n    var vm = this;\n    /** 监听滚动条事件 */\n\n    this.getElement('inputTable').onscroll = function (event) {\n      vm.syncScrollBar(event.target.scrollLeft);\n    };\n\n    this.getElement('tbody').onscroll = function (event) {// vm.recalcTrHiddenItem(event.target.scrollTop)\n    };\n\n    var _this$$refs = this.$refs,\n        thead = _this$$refs.thead,\n        scrollView = _this$$refs.scrollView;\n\n    scrollView.onscroll = function (event) {\n      // console.log(event.target.scrollTop, ' - ', event.target.scrollLeft)\n      thead.scrollLeft = event.target.scrollLeft;\n      vm.recalcTrHiddenItem(event.target.scrollTop);\n    }; // 添加事件监听\n\n\n    this.addEventListener();\n  },\n  methods: {\n    // 判断文件/图片是否存在\n    hasUploadValue: function hasUploadValue(id) {\n      var flag = this.uploadValues[id] != null && this.uploadValues[id].toString().length > 0;\n      return flag;\n    },\n    getElement: function getElement(id) {\n      var noCaseId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!this.el[id]) {\n        this.el[id] = document.getElementById((noCaseId ? '' : this.caseId) + id);\n      }\n\n      return this.el[id];\n    },\n    getElementPromise: function getElementPromise(id) {\n      var _this6 = this;\n\n      var noCaseId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return new Promise(function (resolve) {\n        var timer = setInterval(function () {\n          var element = _this6.getElement(id, noCaseId);\n\n          if (element) {\n            clearInterval(timer);\n            resolve(element);\n          }\n        }, 10);\n      });\n    },\n\n    /** 初始化列表 */\n    initialize: function initialize() {\n      this.visibleTrEls = []; // 判断是否是首次进入该方法，如果是就不清空行，防止删除了预添加的数据\n\n      if (!this.isFirst) {\n        this.clearRow();\n      } else {\n        this.isFirst = false;\n      }\n    },\n\n    /**清空行*/\n    clearRow: function clearRow() {\n      var _this7 = this;\n\n      // inputValues：用来存储input表单的值\n      // 数组里的每项都是一个对象，对象里每个key都是input的rowKey，值就是input的值，其中有个id的字段来区分\n      // 示例：\n      // [{\n      //    id: \"_jet-4sp0iu-15541771111770\"\n      //    dbDefaultVal: \"aaa\",\n      //    dbFieldName: \"bbb\",\n      //    dbFieldTxt: \"ccc\",\n      //    dbLength: 32\n      // }]\n      this.inputValues = [];\n      this.rows = [];\n      this.deleteIds = [];\n      this.selectedRowIds = [];\n      this.tooltips = {};\n      this.notPassedIds = []; // 重置values\n\n      this.selectValues = {};\n      this.checkboxValues = {};\n      this.jdateValues = {};\n      this.jInputPopValues = {};\n      this.departCompValues = {};\n      this.userCompValues = {};\n      this.slotValues = {}; //update-begin-author:shunjlei date:20210415 for:类型赋值错误\n\n      this.uploadValues = {};\n      this.popupValues = {};\n      this.radioValues = {};\n      this.multiSelectValues = {};\n      this.searchSelectValues = {};\n      this.searchSelectAsyncValues = {}; //update-end-author:shunjlei date:20210415 for:类型赋值错误\n      // 重置滚动条\n\n      this.scrollTop = 0;\n      this.$nextTick(function () {\n        _this7.getElement('tbody').scrollTop = 0;\n      });\n    },\n\n    /** 同步滚动条状态 */\n    syncScrollBar: function syncScrollBar(scrollLeft) {// this.style.tbody.left = `${scrollLeft}px`\n      // this.getElement('tbody').scrollLeft = scrollLeft\n    },\n\n    /** 重置滚动条位置，参数留空则滚动到上次记录的位置 */\n    resetScrollTop: function resetScrollTop(top) {\n      var scrollView = this.$refs.scrollView;\n\n      if (top != null && typeof top === 'number') {\n        scrollView.scrollTop = top;\n      } else {\n        scrollView.scrollTop = this.scrollTop;\n      }\n    },\n\n    /** 重新计算需要隐藏或显示的tr */\n    recalcTrHiddenItem: function recalcTrHiddenItem(top) {\n      var _this8 = this;\n\n      var diff = top - this.scrollTop;\n\n      if (diff < 0) {\n        diff = this.scrollTop - top;\n      } // 只有在滚动了百分之三十的行高的距离时才进行更新\n\n\n      if (diff >= this.rowHeight * 0.3) {\n        this.scrollTop = top; // 更新form表单的值\n\n        this.$nextTick(function () {\n          _this8.updateFormValues();\n        });\n      }\n    },\n\n    /** 生成id */\n    generateId: function generateId(rows) {\n      if (!(rows instanceof Array)) {\n        rows = this.rows || [];\n      }\n\n      var timestamp = new Date().getTime();\n      return \"\".concat(this.caseId).concat(timestamp).concat(rows.length).concat(randomNumber(6)).concat(this.tempId);\n    },\n\n    /** push 一条数据 */\n    push: function push(record) {\n      var update = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rows = arguments.length > 2 ? arguments[2] : undefined;\n      var insertIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var setDefaultValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n      return this._pushByDataSource([record], [insertIndex], update, rows, setDefaultValue);\n    },\n\n    /**\n     * push 数据\n     *\n     * @param dataSource 数据源\n     * @param insertIndexes 行插入位置，和dataSource的下标一一对应\n     * @param update 是否更新\n     * @param rows 若不传就使用 this.rows\n     * @param setDefaultValue 是否填充默认值\n     *\n     */\n    _pushByDataSource: function _pushByDataSource(dataSource) {\n      var _this9 = this;\n\n      var insertIndexes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var rows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var setDefaultValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      if (!(rows instanceof Array)) {\n        rows = _toConsumableArray(this.rows) || [];\n      }\n\n      var checkboxValues = _objectSpread({}, this.checkboxValues);\n\n      var selectValues = _objectSpread({}, this.selectValues);\n\n      var jdateValues = _objectSpread({}, this.jdateValues);\n\n      var departCompValues = _objectSpread({}, this.departCompValues);\n\n      var userCompValues = _objectSpread({}, this.userCompValues);\n\n      var jInputPopValues = _objectSpread({}, this.jInputPopValues);\n\n      var slotValues = _objectSpread({}, this.slotValues);\n\n      var uploadValues = _objectSpread({}, this.uploadValues);\n\n      var popupValues = _objectSpread({}, this.popupValues);\n\n      var radioValues = _objectSpread({}, this.radioValues);\n\n      var multiSelectValues = _objectSpread({}, this.multiSelectValues);\n\n      var searchSelectValues = _objectSpread({}, this.searchSelectValues);\n\n      var searchSelectAsyncValues = _objectSpread({}, this.searchSelectAsyncValues); // 禁用行的id\n\n\n      var disabledRowIds = this.disabledRowIds || [];\n      dataSource.forEach(function (data, newValueIndex) {\n        // 不能直接更改数据源的id\n        var dataId = data.id; // 判断源数据是否带有id\n\n        if (dataId == null || dataId === '') {\n          dataId = _this9.generateId(rows);\n        } else if (!_this9.hasCaseId(dataId)) {\n          dataId = _this9.caseId + dataId;\n        }\n\n        var row = {\n          id: dataId\n        };\n        var value = {\n          id: dataId\n        };\n        var disabled = false;\n\n        _this9.columns.forEach(function (column) {\n          var inputId = column.key + value.id;\n          var sourceValue = (data[column.key] == null ? '' : data[column.key]).toString();\n          var defaultValue = null;\n\n          if (setDefaultValue) {\n            defaultValue = column.defaultValue || (column.defaultValue === 0 ? 0 : '');\n\n            if (defaultValue instanceof Array) {\n              defaultValue = defaultValue.join(',');\n            }\n\n            sourceValue = typeof sourceValue === 'number' || sourceValue ? sourceValue : defaultValue;\n          }\n\n          var sourceValueIsEmpty = sourceValue == null || sourceValue === '';\n\n          if (column.type === FormTypes.inputNumber) {\n            // 判断是否是排序字段，如果是就赋最大值\n            if (column.isOrder === true) {\n              value[column.key] = _this9.getInputNumberMaxValue(column) + 1;\n            } else {\n              value[column.key] = sourceValue;\n            } // 判断是否是统计列\n\n\n            if (column.statistics) {\n              _this9.hasStatisticsColumn = true;\n\n              if (!_this9.statisticsColumns[column.key]) {\n                _this9.$set(_this9.statisticsColumns, column.key, 0);\n              }\n            }\n          } else if (column.type === FormTypes.checkbox) {\n            // 判断是否设定了customValue（自定义值）\n            if (column.customValue instanceof Array) {\n              var customValue = (column.customValue[0] || '').toString();\n\n              if (sourceValueIsEmpty && setDefaultValue) {\n                sourceValue = column.defaultChecked ? customValue : sourceValue;\n              }\n\n              checkboxValues[inputId] = sourceValue === customValue;\n            } else {\n              if (sourceValueIsEmpty && setDefaultValue) {\n                checkboxValues[inputId] = !!column.defaultChecked;\n              } else {\n                checkboxValues[inputId] = sourceValue;\n              }\n            }\n          } else if (column.type === FormTypes.select) {\n            if (!sourceValueIsEmpty) {\n              // 判断是否是多选\n              if (typeof sourceValue === 'string' && (column.props || {})['mode'] === 'multiple') {\n                sourceValue = sourceValue === '' ? [] : sourceValue.split(',');\n              }\n\n              selectValues[inputId] = sourceValue;\n            } else {\n              selectValues[inputId] = undefined;\n            }\n          } else if (column.type === FormTypes.date || column.type === FormTypes.datetime || column.type === FormTypes.time) {\n            jdateValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.slot) {\n            slotValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.popup) {\n            popupValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.sel_depart) {\n            departCompValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.sel_user) {\n            userCompValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.input_pop || column.type === 'textarea') {\n            jInputPopValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.radio) {\n            radioValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.sel_search) {\n            searchSelectValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.sel_search_async) {\n            searchSelectAsyncValues[inputId] = sourceValue;\n          } else if (column.type === FormTypes.list_multi) {\n            if (typeof sourceValue === 'string' && sourceValue.length > 0) {\n              multiSelectValues[inputId] = sourceValue.split(',');\n            } else {\n              multiSelectValues[inputId] = [];\n            }\n          } else if (column.type === FormTypes.upload || column.type === FormTypes.file || column.type === FormTypes.image) {\n            if (sourceValue) {\n              var fileName = '';\n\n              if (sourceValue.indexOf(',') > 0) {\n                var sourceValue2 = sourceValue.split(',')[0];\n                fileName = sourceValue2.substring(sourceValue2.lastIndexOf('/') + 1);\n              } else {\n                fileName = sourceValue.substring(sourceValue.lastIndexOf('/') + 1);\n              }\n\n              uploadValues[inputId] = {\n                name: fileName,\n                status: 'done',\n                path: sourceValue\n              };\n            } else {\n              uploadValues[inputId] = null;\n            }\n          } else {\n            value[column.key] = sourceValue;\n          } // 解析disabledRows\n\n\n          for (var columnKey in _this9.disabledRows) {\n            // 判断是否有该属性\n            if (_this9.disabledRows.hasOwnProperty(columnKey) && data.hasOwnProperty(columnKey)) {\n              if (disabled !== true) {\n                var temp = _this9.disabledRows[columnKey]; // 禁用规则可以是一个数组\n\n                if (temp instanceof Array) {\n                  disabled = temp.includes(data[columnKey]);\n                } else {\n                  disabled = temp === data[columnKey];\n                }\n\n                if (disabled) {\n                  disabledRowIds.push(row.id);\n                }\n              }\n            }\n          }\n        }); // 插入行而不是添加到最后\n\n\n        var added = false;\n\n        if (insertIndexes instanceof Array) {\n          var insertIndex = insertIndexes[newValueIndex];\n\n          if (typeof insertIndex === 'number') {\n            added = true;\n            rows.splice(insertIndex, 0, row);\n\n            _this9.inputValues.splice(insertIndex, 0, value);\n          }\n        } //update-begin-author:lvdandan date:20201105 for:LOWCOD-987 【online】js增强的问题--数据对象带有id，且和现有数据一致时，替换患有数据\n\n\n        if (-1 !== rows.findIndex(function (item) {\n          return item.id === row.id;\n        })) {\n          added = true;\n          _this9.inputValues = _this9.inputValues.map(function (item) {\n            return item.id === row.id ? value : item;\n          });\n        } //update-begin-author:lvdandan date:20201105 for:LOWCOD-987 【online】js增强的问题--数据对象带有id，且和现有数据一致时，替换患有数据\n\n\n        if (!added) {\n          rows.push(row);\n\n          _this9.inputValues.push(value);\n        }\n      }); // 启用了拖动排序，就重新计算排序编号\n\n      if (this.dragSort) {\n        this.inputValues.forEach(function (item, index) {\n          item[_this9.dragSortKey] = index + 1;\n        });\n      }\n\n      this.disabledRowIds = disabledRowIds;\n      this.checkboxValues = checkboxValues;\n      this.selectValues = selectValues;\n      this.jdateValues = jdateValues;\n      this.departCompValues = departCompValues;\n      this.userCompValues = userCompValues;\n      this.jInputPopValues = jInputPopValues;\n      this.slotValues = slotValues;\n      this.uploadValues = uploadValues;\n      this.popupValues = popupValues;\n      this.radioValues = radioValues;\n      this.multiSelectValues = multiSelectValues;\n      this.searchSelectValues = searchSelectValues;\n      this.searchSelectAsyncValues = searchSelectAsyncValues; // 重新计算所有统计列\n\n      this.recalcAllStatisticsColumns(); // 更新到 dom\n\n      if (update) {\n        this.rows = rows; // 更新form表单的值\n\n        this.$nextTick(function () {\n          _this9.forceUpdateFormValues();\n        });\n      }\n\n      return rows;\n    },\n\n    /** 获取某一数字输入框列中的最大的值 */\n    getInputNumberMaxValue: function getInputNumberMaxValue(column) {\n      var maxNum = 0;\n      this.inputValues.forEach(function (item, index) {\n        var val = item[column.key],\n            num;\n\n        try {\n          num = parseInt(val);\n        } catch (_unused) {\n          num = 0;\n        } // 把首次循环的结果当成最大值\n\n\n        if (index === 0) {\n          maxNum = num;\n        } else {\n          maxNum = num > maxNum ? num : maxNum;\n        }\n      });\n      return maxNum;\n    },\n\n    /** 添加一行 */\n    add: function add() {\n      var _this10 = this;\n\n      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var forceScrollToBottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (num < 1) return; // let timestamp = new Date().getTime()\n\n      var rows = this.rows;\n      var row;\n\n      for (var i = 0; i < num; i++) {\n        rows = this.push({}, false, rows);\n        row = rows[rows.length - 1];\n      }\n\n      this.rows = rows;\n      this.$nextTick(function () {\n        _this10.updateFormValues();\n      }); // 触发add事件\n\n      this.$emit('added', {\n        row: function () {\n          var r = Object.assign({}, row);\n          r.id = _this10.getCleanId(r.id);\n          return r;\n        }(),\n        target: this\n      }); // 设置滚动条位置\n\n      var tbody = this.getElement('tbody');\n      var offsetHeight = tbody.offsetHeight;\n      var realScrollTop = tbody.scrollTop + offsetHeight;\n\n      if (forceScrollToBottom) {\n        this.$nextTick(function () {\n          _this10.resetScrollTop(_this10.$refs.scrollView.scrollHeight);\n        });\n      }\n    },\n\n    /**\n     * 在指定位置添加一行\n     * @param insertIndex 添加位置下标\n     * @param num 添加的行数，默认1\n     */\n    insert: function insert(insertIndex) {\n      var _this11 = this;\n\n      var num = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var forceScrollToBottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (this.checkTooFastClick('insert', 1500)) {\n        return;\n      }\n\n      if (!insertIndex && num < 1) return;\n      var rows = this.rows;\n      var newRows = [];\n\n      for (var i = 0; i < num; i++) {\n        var row = {\n          id: this.generateId(rows)\n        };\n        rows = this.push(row, false, rows, insertIndex);\n        newRows.push(row);\n      } // 同步更改\n\n\n      this.rows = rows;\n      this.$nextTick(function () {\n        _this11.recalcSortNumber();\n\n        _this11.forceUpdateFormValues();\n      }); // 触发 insert 事件\n\n      this.$emit('inserted', {\n        rows: newRows.map(function (row) {\n          var r = cloneObject(row);\n          r.id = _this11.getCleanId(r.id);\n          return r;\n        }),\n        num: num,\n        insertIndex: insertIndex,\n        target: this\n      }); // 设置滚动条位置\n\n      if (forceScrollToBottom) {\n        this.$nextTick(function () {\n          _this11.resetScrollTop(_this11.$refs.scrollView.scrollHeight);\n        });\n      }\n    },\n\n    /** 删除被选中的行 */\n    removeSelectedRows: function removeSelectedRows() {\n      this.removeRows(this.selectedRowIds);\n      this.selectedRowIds = [];\n    },\n\n    /** 删除一行或多行 */\n    removeRows: function removeRows(id) {\n      var _this12 = this;\n\n      var ids = id;\n\n      if (!(id instanceof Array)) {\n        if (typeof id === 'string') {\n          ids = [id];\n        } else {\n          throw \"JEditableTable.removeRows() \\u51FD\\u6570\\u9700\\u8981\\u7684\\u53C2\\u6570\\u53EF\\u4EE5\\u662Fstring\\u6216Array\\u7C7B\\u578B\\uFF0C\\u4F46\\u63D0\\u4F9B\\u7684\\u5374\\u662F\".concat(_typeof(id));\n        }\n      }\n\n      var rows = cloneObject(this.rows);\n      ids.forEach(function (removeId) {\n        removeId = _this12.getCleanId(removeId); // 找到每个id对应的真实index并删除\n\n        var findAndDelete = function findAndDelete(arr) {\n          for (var i = 0; i < arr.length; i++) {\n            var currentId = _this12.getCleanId(arr[i].id);\n\n            if (currentId === removeId) {\n              arr.splice(i, 1);\n              return true;\n            }\n          }\n        }; // 找到rows对应的index，并删除\n\n\n        if (findAndDelete(rows)) {\n          // 找到values对应的index，并删除\n          findAndDelete(_this12.inputValues); // 将caseId去除\n\n          var _id = _this12.getCleanId(removeId);\n\n          _this12.deleteIds.push(_id);\n        }\n      });\n      this.rows = rows;\n      this.$emit('deleted', this.getDeleteIds(), this);\n      this.$nextTick(function () {\n        // 更新formValues\n        _this12.updateFormValues(); // 重新计算统计\n\n\n        _this12.recalcAllStatisticsColumns();\n      });\n      return true;\n    },\n\n    /** 获取表格表单里的值（异步版） */\n    getValuesAsync: function getValuesAsync() {\n      var _this13 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments.length > 1 ? arguments[1] : undefined;\n      var validate = options.validate,\n          rowIds = options.rowIds,\n          deleteTempId = options.deleteTempId;\n      if (typeof validate !== 'boolean') validate = true;\n      if (!(rowIds instanceof Array)) rowIds = null; // 是否删除临时ID，默认为 false\n\n      if (typeof deleteTempId !== 'boolean') deleteTempId = false; // console.log('options:', { validate, rowIds })\n\n      var asyncCount = 0;\n      var error = 0;\n      var inputValues = cloneObject(this.inputValues);\n      var tooltips = Object.assign({}, this.tooltips);\n      var notPassedIds = cloneObject(this.notPassedIds); // 用于存储合并后的值\n\n      var values = []; // 遍历inputValues来获取每行的值\n\n      var _iterator = _createForOfIteratorHelper(inputValues),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var value = _step.value;\n          var rowIdsFlag = false; // 如果带有rowIds，那么就只存这几行的数据\n\n          if (rowIds == null) {\n            rowIdsFlag = true;\n          } else {\n            var _iterator2 = _createForOfIteratorHelper(rowIds),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var rowId = _step2.value;\n\n                if (_this13.getCleanId(rowId) === _this13.getCleanId(value.id)) {\n                  rowIdsFlag = true;\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n\n          if (!rowIdsFlag) return \"continue\";\n\n          _this13.columns.forEach(function (column) {\n            var inputId = column.key + value.id;\n\n            if (column.type === FormTypes.checkbox) {\n              var checked = _this13.checkboxValues[inputId];\n\n              if (column.customValue instanceof Array) {\n                value[column.key] = checked ? column.customValue[0] : column.customValue[1];\n              } else {\n                value[column.key] = checked;\n              }\n            } else if (column.type === FormTypes.select) {\n              var selected = _this13.selectValues[inputId];\n\n              if (selected instanceof Array) {\n                value[column.key] = cloneObject(selected);\n              } else {\n                value[column.key] = selected;\n              }\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime || column.type === FormTypes.time) {\n              value[column.key] = _this13.jdateValues[inputId];\n            } else if (column.type === FormTypes.sel_depart) {\n              value[column.key] = _this13.departCompValues[inputId];\n            } else if (column.type === FormTypes.sel_user) {\n              value[column.key] = _this13.userCompValues[inputId];\n            } else if (column.type === FormTypes.input_pop || column.type === 'textarea') {\n              value[column.key] = _this13.jInputPopValues[inputId];\n            } else if (column.type === FormTypes.upload) {\n              value[column.key] = cloneObject(_this13.uploadValues[inputId] || null);\n            } else if (column.type === FormTypes.image || column.type === FormTypes.file) {\n              var currUploadObj = cloneObject(_this13.uploadValues[inputId] || null);\n\n              if (currUploadObj) {\n                value[column.key] = currUploadObj['path'] || null;\n              }\n            } else if (column.type === FormTypes.popup) {\n              if (!value[column.key]) {\n                value[column.key] = _this13.popupValues[inputId] || null;\n              }\n            } else if (column.type === FormTypes.radio) {\n              value[column.key] = _this13.radioValues[inputId];\n            } else if (column.type === FormTypes.sel_search) {\n              value[column.key] = _this13.searchSelectValues[inputId];\n            } else if (column.type === FormTypes.sel_search_async) {\n              value[column.key] = _this13.searchSelectAsyncValues[inputId];\n            } else if (column.type === FormTypes.list_multi) {\n              if (!_this13.multiSelectValues[inputId] || _this13.multiSelectValues[inputId].length === 0) {\n                value[column.key] = '';\n              } else {\n                value[column.key] = _this13.multiSelectValues[inputId].join(',');\n              }\n            } else if (column.type === FormTypes.slot) {\n              value[column.key] = _this13.slotValues[inputId];\n            } // 检查表单验证\n\n\n            if (validate === true) {\n              var handleValidateOneInput = function handleValidateOneInput(results) {\n                tooltips[inputId] = results[0];\n\n                if (tooltips[inputId].passed === false) {\n                  error++; // if (error++ === 0) {\n                  // let element = document.getElementById(inputId)\n                  // while (element.className !== 'tr') {\n                  //   element = element.parentElement\n                  // }\n                  // this.jumpToId(inputId, element)\n                  // }\n                }\n\n                tooltips[inputId].visible = false;\n                notPassedIds = results[1];\n              };\n\n              asyncCount++;\n\n              var results = _this13.validateOneInputAsync(value[column.key], value, column, notPassedIds, false, 'getValues', function (results) {\n                handleValidateOneInput(results);\n                asyncCount--;\n              });\n\n              handleValidateOneInput(results);\n            }\n          }); // 删除 tempId\n\n\n          if (deleteTempId && _this13.isTempId(value.id)) {\n            delete value.id;\n          } else {\n            value.id = _this13.getCleanId(value.id);\n          }\n\n          values.push(value);\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (validate === true) {\n        this.tooltips = tooltips;\n        this.notPassedIds = notPassedIds;\n      }\n\n      var timer = setInterval(function () {\n        if (asyncCount === 0) {\n          clearInterval(timer);\n\n          if (typeof callback === 'function') {\n            callback({\n              error: error,\n              values: values\n            });\n          }\n        }\n      }, 10);\n      return {\n        error: error,\n        values: values\n      };\n    },\n\n    /** 获取表格表单里的值（同步版） */\n    getValuesSync: function getValuesSync() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.getValuesAsync(options);\n    },\n\n    /** 获取表格表单里的值 */\n    getValues: function getValues(callback) {\n      var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var rowIds = arguments.length > 2 ? arguments[2] : undefined;\n      this.getValuesAsync({\n        validate: validate,\n        rowIds: rowIds\n      }, function (_ref) {\n        var error = _ref.error,\n            values = _ref.values;\n\n        if (typeof callback === 'function') {\n          callback(error, values);\n        }\n      });\n    },\n\n    /** getValues的Promise版 */\n    getValuesPromise: function getValuesPromise() {\n      var _this14 = this;\n\n      var validate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var rowIds = arguments.length > 1 ? arguments[1] : undefined;\n      var deleteTempId = arguments.length > 2 ? arguments[2] : undefined;\n      return new Promise(function (resolve, reject) {\n        _this14.getValuesAsync({\n          validate: validate,\n          rowIds: rowIds,\n          deleteTempId: deleteTempId\n        }, function (_ref2) {\n          var error = _ref2.error,\n              values = _ref2.values;\n\n          if (error === 0) {\n            resolve(values);\n          } else {\n            reject(VALIDATE_NO_PASSED);\n          }\n        });\n      });\n    },\n\n    /** 获取被删除项的id */\n    getDeleteIds: function getDeleteIds() {\n      return cloneObject(this.deleteIds);\n    },\n\n    /** 获取所有的数据，包括values、deleteIds */\n    getAll: function getAll(validate, deleteTempId) {\n      var _this15 = this;\n\n      return new Promise(function (resolve, reject) {\n        var deleteIds = _this15.getDeleteIds();\n\n        _this15.getValuesPromise(validate, null, deleteTempId).then(function (values) {\n          resolve({\n            values: values,\n            deleteIds: deleteIds\n          });\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n\n    /** Sync 获取所有的数据，包括values、deleteIds */\n    getAllSync: function getAllSync(validate, rowIds, deleteTempId) {\n      var result = this.getValuesSync({\n        validate: validate,\n        rowIds: rowIds,\n        deleteTempId: deleteTempId\n      });\n      result.deleteIds = this.getDeleteIds();\n      return result;\n    },\n    // slot 获取值\n    _getValueForSlot: function _getValueForSlot(rowId) {\n      return this.getValuesSync({\n        rowIds: [rowId]\n      }).values[0];\n    },\n    _getAllValuesForSlot: function _getAllValuesForSlot() {\n      return cloneObject({\n        inputValues: this.inputValues,\n        selectValues: this.selectValues,\n        checkboxValues: this.checkboxValues,\n        jdateValues: this.jdateValues,\n        departCompValues: this.departCompValues,\n        userCompValues: this.userCompValues,\n        jInputPopValues: this.jInputPopValues,\n        slotValues: this.slotValues,\n        uploadValues: this.uploadValues,\n        popupValues: this.popupValues,\n        radioValues: this.radioValues,\n        multiSelectValues: this.multiSelectValues,\n        searchSelectValues: this.searchSelectValues,\n        searchSelectAsyncValues: this.searchSelectAsyncValues\n      });\n    },\n\n    /** 设置某行某列的值 */\n    setValues: function setValues(values) {\n      var _this16 = this;\n\n      values.forEach(function (item) {\n        var rowKey = item.rowKey,\n            newValues = item.values;\n        rowKey = _this16.getCleanId(rowKey);\n\n        var _loop2 = function _loop2(newValueKey) {\n          if (newValues.hasOwnProperty(newValueKey)) {\n            var edited = false; // 已被修改\n\n            var _iterator3 = _createForOfIteratorHelper(_this16.columns),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var column = _step3.value;\n\n                if (column.key === newValueKey) {\n                  (function () {\n                    var newValue = newValues[newValueKey];\n\n                    _this16.inputValues.forEach(function (value) {\n                      // 在inputValues中找到了该字段\n                      if (rowKey === _this16.getCleanId(value.id)) {\n                        if (value.hasOwnProperty(newValueKey)) {\n                          edited = true;\n                          value[newValueKey] = newValue;\n                        }\n                      }\n                    });\n\n                    if (!edited) {\n                      var modelKey = \"\".concat(newValueKey).concat(_this16.caseId).concat(rowKey);\n\n                      if (column.type === FormTypes.select) {\n                        if (newValue !== 0 && !newValue) {\n                          edited = _this16.setOneValue(_this16.selectValues, modelKey, undefined);\n                        } else {\n                          edited = _this16.setOneValue(_this16.selectValues, modelKey, newValue);\n                        }\n                      } else if (column.type === FormTypes.checkbox) {\n                        // checkbox 特殊处理 CustomValue\n                        var key = _this16.valuesHasOwnProperty(_this16.checkboxValues, modelKey); // 找到对应的column\n\n\n                        var sourceValue; // 判断是否设定了customValue（自定义值）\n\n                        if (column.customValue instanceof Array) {\n                          var customValue = (column.customValue[0] || '').toString();\n                          sourceValue = newValue === customValue;\n                        } else {\n                          sourceValue = !!newValue;\n                        }\n\n                        _this16.$set(_this16.checkboxValues, key, sourceValue);\n\n                        edited = true;\n                      } else if (column.type === FormTypes.date || column.type === FormTypes.datetime || column.type === FormTypes.time) {\n                        edited = _this16.setOneValue(_this16.jdateValues, modelKey, newValue);\n                      } else if (column.type === FormTypes.sel_depart) {\n                        edited = _this16.setOneValue(_this16.departCompValues, modelKey, newValue);\n                      } else if (column.type === FormTypes.sel_user) {\n                        edited = _this16.setOneValue(_this16.userCompValues, modelKey, newValue);\n                      } else if (column.type === FormTypes.input_pop || column.type === 'textarea') {\n                        edited = _this16.setOneValue(_this16.jInputPopValues, modelKey, newValue);\n                      } else if (column.type === FormTypes.slot) {\n                        edited = _this16.setOneValue(_this16.slotValues, modelKey, newValue);\n                      } else if (column.type === FormTypes.upload || column.type === FormTypes.image || column.type === FormTypes.file) {\n                        edited = _this16.setOneValue(_this16.uploadValues, modelKey, newValue);\n                      } else if (column.type === FormTypes.popup) {\n                        edited = _this16.setOneValue(_this16.popupValues, modelKey, newValue);\n                      } else if (column.type === FormTypes.radio) {\n                        edited = _this16.setOneValue(_this16.radioValues, modelKey, newValue);\n                      } else if (column.type === FormTypes.list_multi) {\n                        edited = _this16.setOneValue(_this16.multiSelectValues, modelKey, newValue, true);\n                      } else if (column.type === FormTypes.sel_search) {\n                        edited = _this16.setOneValue(_this16.searchSelectValues, modelKey, newValue);\n                      } else if (column.type === FormTypes.sel_search_async) {\n                        edited = _this16.setOneValue(_this16.searchSelectAsyncValues, modelKey, newValue);\n                      } else {\n                        edited = false;\n                      }\n                    }\n\n                    if (edited) {\n                      // update-begin-author:sunjianlei date:20211222 for: 修复 setValues 触发的 valueChange 事件没有id的问题\n                      _this16.elemValueChange(column.type, {\n                        id: rowKey\n                      }, column, newValue); // update-end-author:sunjianlei date:20211222 for: 修复 setValues 触发的 valueChange 事件没有id的问题\n\n                    }\n                  })();\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n            if (!edited) {\n              console.warn(\"JEditableTable.setValues\\uFF1A\\u6CA1\\u6709\\u627E\\u5230\\\"\".concat(newValueKey, \"\\\"\\u5217\"));\n            }\n          }\n        };\n\n        for (var newValueKey in newValues) {\n          _loop2(newValueKey);\n        }\n      }); // 强制更新formValues\n\n      this.forceUpdateFormValues(); // 【issues/3828】重新计算统计列\n\n      this.recalcAllStatisticsColumns();\n    },\n\n    /**\n     * 设置单个组件的值\n     * @param valuesObject 组件存储值的对象\n     * @param modelKey 组件存储值的对象里的key\n     * @param value 新值\n     * @param isMultiple 是否多选，如果是就会对 value 进行一个 split(',') 的操作\n     */\n    setOneValue: function setOneValue(valuesObject, modelKey, value) {\n      var isMultiple = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var key = this.valuesHasOwnProperty(valuesObject, modelKey);\n\n      if (key) {\n        // 处理多选数组\n        if (isMultiple && !Array.isArray(value)) {\n          value = (value || '').toString().trim();\n          value = value === '' ? [] : value.split(',');\n        }\n\n        this.$set(valuesObject, key, value);\n        return true;\n      }\n\n      return false;\n    },\n    valuesHasOwnProperty: function valuesHasOwnProperty(values, ownProperty) {\n      var key = ownProperty;\n\n      if (values.hasOwnProperty(key)) {\n        return key;\n      }\n\n      if (values.hasOwnProperty(key + this.tempId)) {\n        return key + this.tempId;\n      }\n\n      return null;\n    },\n\n    /** 跳转到指定位置 */\n    // jumpToId(id, element) {\n    //   if (element == null) {\n    //     element = document.getElementById(id)\n    //   }\n    //   if (element != null) {\n    //     console.log(this.getElement('tbody').scrollTop, element.offsetTop)\n    //     this.getElement('tbody').scrollTop = element.offsetTop\n    //     console.log(this.getElement('tbody').scrollTop, element.offsetTop)\n    //   }\n    // },\n\n    /**\n     * 验证单个表单，异步版\n     *\n     * @param value 校验的值\n     * @param row 校验的行\n     * @param column 校验的列\n     * @param notPassedIds 没有通过校验的 id\n     * @param update 是否更新到vue中\n     * @param validType 校验触发的方式（input、blur等）\n     * @param callback\n     */\n    validateOneInputAsync: function validateOneInputAsync(value, row, column, notPassedIds) {\n      var _this17 = this;\n\n      var update = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var validType = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'input';\n      var callback = arguments.length > 6 ? arguments[6] : undefined;\n      var tooltips = Object.assign({}, this.tooltips); // let notPassedIds = cloneObject(this.notPassedIds)\n\n      var inputId = column.key + row.id;\n      tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {};\n\n      var _this$validateValue = this.validateValue(column, value),\n          _this$validateValue2 = _slicedToArray(_this$validateValue, 2),\n          passed = _this$validateValue2[0],\n          message = _this$validateValue2[1];\n\n      var nextThen = function nextThen(res) {\n        var _res = _slicedToArray(res, 2),\n            passed = _res[0],\n            message = _res[1]; // !(passed == null && tooltips[inputId].visible != null)\n\n\n        if (passed != null) {\n          tooltips[inputId].visible = !passed;\n          tooltips[inputId].passed = passed;\n          var index = notPassedIds.indexOf(inputId);\n\n          if (!passed) {\n            tooltips[inputId].title = _this17.replaceProps(column, message);\n            if (index === -1) notPassedIds.push(inputId);\n          } else {\n            if (index !== -1) notPassedIds.splice(index, 1);\n          }\n        } // 是否更新到data\n\n\n        if (update) {\n          _this17.tooltips = tooltips;\n          _this17.notPassedIds = notPassedIds;\n        }\n\n        if (typeof callback === 'function') {\n          callback([tooltips[inputId], notPassedIds]);\n        }\n      };\n\n      if (typeof passed === 'function') {\n        var executed = false;\n        passed(validType, value, {\n          id: this.getCleanId(row.id)\n        }, _objectSpread({}, column), function (flag, msg) {\n          if (executed) return;\n          executed = true;\n\n          if (typeof msg === 'string') {\n            message = msg;\n          }\n\n          if (flag == null) {\n            nextThen([true, message]);\n          } else {\n            nextThen([!!flag, message]);\n          }\n        }, this);\n      } else {\n        nextThen([passed, message]);\n      }\n\n      return [tooltips[inputId], notPassedIds];\n    },\n\n    /** 验证单个表单 */\n    validateOneInput: function validateOneInput(value, row, column, notPassedIds) {\n      var update = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var validType = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'input';\n      return this.validateOneInputAsync(value, row, column, notPassedIds, update, validType);\n    },\n\n    /** 通过规则验证值是否正确 */\n    validateValue: function validateValue(column, value) {\n      var rules = column.validateRules;\n      var passed = true,\n          message = ''; // 判断有没有验证规则或验证规则格式正不正确，若条件不符合则默认通过\n\n      if (rules instanceof Array) {\n        var _iterator4 = _createForOfIteratorHelper(rules),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var rule = _step4.value;\n            // 当前值是否为空\n            var isNull = value == null || value === ''; // 验证规则：非空\n\n            if (rule.required === true && isNull) {\n              passed = false;\n            } else // 使用 else-if 是为了防止一个 rule 中出现两个规则\n              // 验证规则：唯一校验\n              if (rule.unique === true || rule.pattern === 'only') {\n                var _this$getValuesSync = this.getValuesSync({\n                  validate: false\n                }),\n                    values = _this$getValuesSync.values;\n\n                var findCount = 0;\n\n                var _iterator5 = _createForOfIteratorHelper(values),\n                    _step5;\n\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    var val = _step5.value;\n\n                    if (val[column.key] === value) {\n                      if (++findCount >= 2) {\n                        passed = false;\n                        break;\n                      }\n                    }\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n              } else // 验证规则：正则表达式\n                if (!!rule.pattern && !isNull) {\n                  // 兼容 online 的规则\n                  var foo = [{\n                    title: '6到16位数字',\n                    value: 'n6-16',\n                    pattern: /^\\d{6,16}$/\n                  }, {\n                    title: '6到16位任意字符',\n                    value: '*6-16',\n                    pattern: /^.{6,16}$/\n                  }, {\n                    title: '6到18位字母',\n                    value: 's6-18',\n                    pattern: /^[a-z|A-Z]{6,18}$/\n                  }, {\n                    title: '网址',\n                    value: 'url',\n                    pattern: /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/\n                  }, {\n                    title: '电子邮件',\n                    value: 'e',\n                    pattern: /^([\\w]+\\.*)([\\w]+)@[\\w]+\\.\\w{3}(\\.\\w{2}|)$/\n                  }, {\n                    title: '手机号码',\n                    value: 'm',\n                    pattern: /^1[3456789]\\d{9}$/\n                  }, {\n                    title: '邮政编码',\n                    value: 'p',\n                    pattern: /^[0-9]{6}$/\n                  }, {\n                    title: '字母',\n                    value: 's',\n                    pattern: /^[A-Z|a-z]+$/\n                  }, {\n                    title: '数字',\n                    value: 'n',\n                    pattern: /^-?\\d+(\\.?\\d+|\\d?)$/\n                  }, {\n                    title: '整数',\n                    value: 'z',\n                    pattern: /^-?\\d+$/\n                  }, {\n                    title: '非空',\n                    value: '*',\n                    pattern: /^.+$/\n                  }, {\n                    title: '金额',\n                    value: 'money',\n                    pattern: /^(([1-9][0-9]*)|([0]\\.\\d{0,2}|[1-9][0-9]*\\.\\d{0,2}))$/\n                  }];\n                  var flag = false;\n\n                  for (var _i2 = 0, _foo = foo; _i2 < _foo.length; _i2++) {\n                    var item = _foo[_i2];\n\n                    if (rule.pattern === item.value && item.pattern) {\n                      passed = new RegExp(item.pattern).test(value);\n                      flag = true;\n                      break;\n                    }\n                  }\n\n                  if (!flag) passed = new RegExp(rule.pattern).test(value);\n                } else // 校验规则：自定义函数校验\n                  if (typeof rule.handler === 'function') {\n                    return [rule.handler, rule.message];\n                  } // 如果没有通过验证，则跳出循环。如果通过了验证，则继续验证下一条规则\n\n\n            if (!passed) {\n              message = rule.message;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n\n      return [passed, message];\n    },\n\n    /** 动态更新表单的值 */\n    updateFormValues: function updateFormValues() {\n      var _this18 = this;\n\n      var trs = this.getElement('tbody').getElementsByClassName('tr');\n      var trEls = [];\n\n      var _iterator6 = _createForOfIteratorHelper(trs),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _tr = _step6.value;\n          trEls.push(_tr);\n        } // 获取新增的 tr\n\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var newTrEls = trEls;\n\n      if (this.visibleTrEls.length > 0) {\n        newTrEls = [];\n\n        var _iterator7 = _createForOfIteratorHelper(trEls),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var tr = _step7.value;\n            var isNewest = true;\n\n            var _iterator8 = _createForOfIteratorHelper(this.visibleTrEls),\n                _step8;\n\n            try {\n              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                var vtr = _step8.value;\n\n                if (vtr.id === tr.id) {\n                  isNewest = false;\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator8.e(err);\n            } finally {\n              _iterator8.f();\n            }\n\n            if (isNewest) {\n              newTrEls.push(tr);\n            }\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n\n      this.visibleTrEls = trEls; // 向新增的tr中赋值\n\n      newTrEls.forEach(function (tr) {\n        var idx = tr.dataset.idx;\n        var value = _this18.inputValues[idx];\n\n        for (var key in value) {\n          if (value.hasOwnProperty(key)) {\n            var elid = \"\".concat(key).concat(value.id);\n            var el = document.getElementById(elid);\n\n            if (el) {\n              el.value = value[key];\n            }\n          }\n        }\n      });\n    },\n\n    /** 强制更新FormValues */\n    forceUpdateFormValues: function forceUpdateFormValues() {\n      var _this19 = this;\n\n      this.visibleTrEls = [];\n      this.$forceUpdate();\n      this.$nextTick(function () {\n        return _this19.updateFormValues();\n      });\n    },\n    // 重新计算所有统计列\n    recalcAllStatisticsColumns: function recalcAllStatisticsColumns() {\n      var _this20 = this;\n\n      if (this.hasStatisticsColumn) {\n        Object.keys(this.statisticsColumns).forEach(function (key) {\n          return _this20.recalcOneStatisticsColumn(key);\n        });\n      }\n    },\n    // 重新计算单个统计列\n    recalcOneStatisticsColumn: function recalcOneStatisticsColumn(key) {\n      if (this.hasStatisticsColumn) {\n        if (this.statisticsColumns.hasOwnProperty(key)) {\n          // 计算合计值\n          var count = 0;\n          this.inputValues.forEach(function (item) {\n            var value = item[key];\n\n            if (value && count !== '-') {\n              try {\n                count += Number.parseInt(value);\n              } catch (e) {\n                count = '-';\n              }\n            }\n          });\n          this.statisticsColumns[key] = count;\n        }\n      }\n    },\n\n    /** 获取某个统计字段的值 */\n    getStatisticsValue: function getStatisticsValue(key) {\n      if (this.hasStatisticsColumn) {\n        if (this.statisticsColumns.hasOwnProperty(key)) {\n          return this.statisticsColumns[key];\n        }\n      }\n\n      return null;\n    },\n\n    /** 全选或取消全选 */\n    handleChangeCheckedAll: function handleChangeCheckedAll() {\n      var _this21 = this;\n\n      var selectedRowIds = [];\n\n      if (!this.getSelectAll) {\n        this.rows.forEach(function (row) {\n          if ((_this21.disabledRowIds || []).indexOf(row.id) === -1) {\n            selectedRowIds.push(row.id);\n          }\n        });\n      }\n\n      this.selectedRowIds = selectedRowIds;\n    },\n\n    /** 左侧行选择框change事件 */\n    handleChangeLeftCheckbox: function handleChangeLeftCheckbox(event) {\n      var id = event.target.id;\n\n      if ((this.disabledRowIds || []).indexOf(id) !== -1) {\n        return;\n      }\n\n      var index = this.selectedRowIds.indexOf(id);\n\n      if (index !== -1) {\n        this.selectedRowIds.splice(index, 1);\n      } else {\n        this.selectedRowIds.push(id);\n      }\n    },\n    handleClickAdd: function handleClickAdd() {\n      var _this$settings = this.settings,\n          addRowNum = _this$settings.addRowNum,\n          addIndex = _this$settings.addIndex,\n          addScrollToBottom = _this$settings.addScrollToBottom;\n\n      if (addIndex <= 0) {\n        this.add(addRowNum, addScrollToBottom);\n      } else {\n        this.insert(addIndex, addRowNum, addScrollToBottom);\n      }\n    },\n    handleConfirmDelete: function handleConfirmDelete() {\n      this.removeSelectedRows();\n    },\n    handleClickClearSelection: function handleClickClearSelection() {\n      this.clearSelection();\n    },\n    clearSelection: function clearSelection() {\n      this.selectedRowIds = [];\n    },\n    // 获取当前选中的行\n    getSelection: function getSelection() {\n      var _this22 = this;\n\n      return this.selectedRowIds.map(function (id) {\n        return _this22.getCleanId(id);\n      });\n    },\n    // 设置当前选中的行\n    setSelection: function () {\n      var _setSelection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(selectedRowIds) {\n        var _this23 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(Array.isArray(selectedRowIds) && selectedRowIds.length > 0)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.getElementPromise('tbody');\n\n              case 3:\n                _context.next = 5;\n                return this.$nextTick();\n\n              case 5:\n                this.selectedRowIds = selectedRowIds.map(function (id) {\n                  var temp = id;\n\n                  if (!_this23.hasCaseId(id)) {\n                    temp = _this23.caseId + id;\n                  }\n\n                  return temp;\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setSelection(_x) {\n        return _setSelection.apply(this, arguments);\n      }\n\n      return setSelection;\n    }(),\n    // 切换全选状态\n    toggleSelectionAll: function toggleSelectionAll() {\n      this.handleChangeCheckedAll();\n    },\n\n    /** 用于搜索下拉框中的内容 */\n    handleSelectFilterOption: function handleSelectFilterOption(input, option, column) {\n      if (column.allowSearch === true || column.allowInput === true) {\n        return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n      }\n\n      return true;\n    },\n\n    /** select 搜索时的事件，用于动态添加options */\n    handleSearchSelect: function handleSearchSelect(value, id, row, col) {\n      if (col.allowSearch !== true && col.allowInput === true) {\n        // 是否找到了对应的项，找不到则添加这一项\n        var flag = false;\n\n        var _iterator9 = _createForOfIteratorHelper(col.options),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var option = _step9.value;\n\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              flag = true;\n              break;\n            }\n          } // !!value ：不添加空值\n\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n\n        if (!flag && !!value) {\n          // searchAdd 是否是通过搜索添加的\n          col.options.push({\n            title: value,\n            value: value,\n            searchAdd: true\n          });\n        }\n      }\n    },\n    // blur 失去焦点\n    handleBlurSearch: function handleBlurSearch(value, id, row, col) {\n      if (col.allowInput === true) {\n        // 删除无用的因搜索（用户输入）而创建的项\n        if (typeof value === 'string') {\n          var indexs = [];\n          col.options.forEach(function (option, index) {\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              delete option.searchAdd;\n            } else if (option.searchAdd === true) {\n              indexs.push(index);\n            }\n          }); // 翻转删除数组中的项\n\n          var _iterator10 = _createForOfIteratorHelper(indexs.reverse()),\n              _step10;\n\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var index = _step10.value;\n              col.options.splice(index, 1);\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n        }\n      } // 做单个表单验证\n\n\n      this.validateOneInput(value, row, col, this.notPassedIds, true, 'blur');\n    },\n\n    /** 触发已拖动事件 */\n    emitDragged: function emitDragged(oldIndex, newIndex) {\n      this.$emit('dragged', {\n        oldIndex: oldIndex,\n        newIndex: newIndex,\n        target: this\n      });\n    },\n    handleDragMoveStart: function handleDragMoveStart(event) {\n      this.dragging = true;\n      this.$refs.scrollView.style.overflow = 'hidden';\n    },\n\n    /** 拖动结束，交换inputValue中的值 */\n    handleDragMoveEnd: function handleDragMoveEnd(event) {\n      this.dragging = false;\n      this.$refs.scrollView.style.overflow = 'auto';\n      var oldIndex = event.oldIndex,\n          newIndex = event.newIndex,\n          dataIdx = event.item.dataset.idx; // 由于动态显示隐藏行导致index有误差，需要算出真实的index\n\n      var diff = Number.parseInt(dataIdx) - oldIndex;\n      oldIndex += diff;\n      newIndex += diff;\n      this.rowResort(oldIndex, newIndex);\n      this.emitDragged(oldIndex, newIndex);\n    },\n\n    /** 行重新排序 */\n    rowResort: function rowResort(oldIndex, newIndex) {\n      var sort = function sort(array) {\n        // 存储旧数据，并删除旧项目\n        var temp = array[oldIndex];\n        array.splice(oldIndex, 1); // 向新项目里添加旧数据\n\n        array.splice(newIndex, 0, temp);\n      };\n\n      sort(this.rows);\n      sort(this.inputValues);\n      this.recalcSortNumber();\n      this.forceUpdateFormValues();\n    },\n\n    /** 重新计算排序字段的数值 */\n    recalcSortNumber: function recalcSortNumber() {\n      var _this24 = this;\n\n      if (this.dragSort) {\n        // 重置排序字段\n        this.inputValues.forEach(function (val, idx) {\n          return val[_this24.dragSortKey] = idx + 1;\n        });\n      }\n    },\n\n    /** 当前行向上移一位 */\n    _handleRowMoveUp: function _handleRowMoveUp(rowIndex) {\n      if (rowIndex > 0) {\n        var newIndex = rowIndex - 1;\n        this.rowResort(rowIndex, newIndex);\n        this.emitDragged(rowIndex, newIndex);\n      }\n    },\n\n    /** 当前行向下移一位 */\n    _handleRowMoveDown: function _handleRowMoveDown(rowIndex) {\n      if (rowIndex < this.rows.length - 1) {\n        var newIndex = rowIndex + 1;\n        this.rowResort(rowIndex, newIndex);\n        this.emitDragged(rowIndex, newIndex);\n      }\n    },\n\n    /** 在当前行下面插入一行 */\n    _handleRowInsertDown: function _handleRowInsertDown(rowIndex) {\n      var insertIndex = rowIndex + 1;\n      this.insert(insertIndex);\n    },\n\n    /* --- common function begin --- */\n\n    /** input事件 */\n    handleInputCommono: function handleInputCommono(target, index, row, column) {\n      var oldValue = this.inputValues[index][column.key] || '';\n      var value = target.value,\n          dataset = target.dataset,\n          selectionStart = target.selectionStart;\n      var type = FormTypes.input;\n      var change = true;\n\n      if (\"\".concat(dataset.inputNumber) === 'true') {\n        type = FormTypes.inputNumber; // 判断输入的值是否匹配数字正则表达式，不匹配就还原\n\n        if (!/^-?\\d+\\.?\\d*$/.test(value) && value !== '' && value !== '-') {\n          change = false;\n          value = oldValue;\n          target.value = value;\n\n          if (typeof selectionStart === 'number') {\n            target.selectionStart = selectionStart - 1;\n            target.selectionEnd = selectionStart - 1;\n          }\n        }\n      } // 存储输入的值\n\n\n      this.inputValues[index][column.key] = value; // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'input');\n\n      if (type === FormTypes.inputNumber) {\n        this.recalcOneStatisticsColumn(column.key);\n      } // 触发valueChange 事件\n\n\n      if (change) {\n        this.elemValueChange(type, row, column, value);\n      }\n    },\n\n    /** slot Change */\n    handleChangeSlotCommon: function handleChangeSlotCommon(value, id, row, column) {\n      this.slotValues = this.bindValuesChange(value, id, 'slotValues'); // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.slot, row, column, value);\n    },\n    handleBlurCommono: function handleBlurCommono(target, index, row, column) {\n      var _this25 = this;\n\n      var value = target.value,\n          dataset = target.dataset;\n\n      if (dataset && \"\".concat(dataset.inputNumber) === 'true') {\n        // 判断输入的值是否匹配数字正则表达式，不匹配就置空\n        if (!/^-?\\d+\\.?\\d*$/.test(value)) {\n          value = '';\n        } else {\n          value = Number.parseFloat(value);\n        }\n\n        target.value = value;\n      } //update--begin--autor:lvdandan-----date:20201126------for：LOWCOD-1088 JEditableTable输入校验提示框位置偏移 #2005\n\n\n      setTimeout(function () {\n        // 做单个表单验证\n        _this25.validateOneInput(value, row, column, _this25.notPassedIds, true, 'blur');\n      }, 100); //update--end--autor:lvdandan-----date:20201126------for：LOWCOD-1088 JEditableTable输入校验提示框位置偏移 #2005\n    },\n    handleChangeCheckboxCommon: function handleChangeCheckboxCommon(event, row, column) {\n      var _event$target = event.target,\n          id = _event$target.id,\n          checked = _event$target.checked;\n      this.checkboxValues = this.bindValuesChange(checked, id, 'checkboxValues'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.checkbox, row, column, checked);\n    },\n    handleChangeSelectCommon: function handleChangeSelectCommon(value, id, row, column) {\n      this.selectValues = this.bindValuesChange(value, id, 'selectValues'); // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.select, row, column, value);\n    },\n    handleChangeJDateCommon: function handleChangeJDateCommon(value, id, row, column, showTime) {\n      this.jdateValues = this.bindValuesChange(value, id, 'jdateValues');\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(column.type, row, column, value);\n    },\n    //部门组件值改变\n    handleChangeDepartCommon: function handleChangeDepartCommon(value, id, row, column) {\n      this.departCompValues = this.bindValuesChange(value, id, 'departCompValues');\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.sel_depart, row, column, value);\n    },\n    //用户组件值改变\n    handleChangeUserCommon: function handleChangeUserCommon(value, id, row, column) {\n      this.userCompValues = this.bindValuesChange(value, id, 'userCompValues');\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.sel_user, row, column, value);\n    },\n    handleChangeJInputPopCommon: function handleChangeJInputPopCommon(value, id, row, column) {\n      this.jInputPopValues = this.bindValuesChange(value, id, 'jInputPopValues'); // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.input_pop, row, column, value);\n    },\n    handleChangeUpload: function handleChangeUpload(info, id, row, column) {\n      var file = info.file;\n      var value = {\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        status: file.status,\n        percent: file.percent\n      };\n\n      if (column.responseName && file.response) {\n        value['responseName'] = file.response[column.responseName];\n      }\n\n      if (file.status === 'done') {\n        if (typeof file.response.success === 'boolean') {\n          // 如果文件上传，被拦截器拦下，还会返回最外层的status = done\n          // 但是内部的success会返回false并携带异常信息\n          // 整个上传操作还是失败的\n          // https://github.com/zhangdaiscott/jeecg-boot/issues/2691\n          if (file.response.success) {\n            value['path'] = file.response[column.responseName];\n          } else {\n            value['status'] = 'error';\n            value['message'] = file.response.message || '未知错误';\n          }\n        } else {\n          // 考虑到如果设置action上传路径为非jeecg-boot后台，可能不会返回 success 属性的情况，就默认为成功\n          value['path'] = file.response[column.responseName];\n        }\n      } else if (file.status === 'error') {\n        value['message'] = file.response.message || '未知错误';\n      }\n\n      this.uploadValues = this.bindValuesChange(value, id, 'uploadValues'); // 触发valueChange 事件\n\n      this.elemValueChange(column.type, row, column, value);\n    },\n    handleMoreOperation: function handleMoreOperation(id, flag, column) {\n      //update-begin-author:wangshuai date:20201021 for:LOWCOD-969 判断传过来的字段是否存在number，用于控制上传文件\n      if (column.number) {\n        this.number = column.number;\n      } else {\n        this.number = 0;\n      } //update-end-author:wangshuai date:20201021 for:LOWCOD-969 判断传过来的字段是否存在number，用于控制上传文件\n\n\n      if (column && column.fieldExtendJson) {\n        var json = JSON.parse(column.fieldExtendJson);\n        this.number = json.uploadnum ? json.uploadnum : 0;\n      } //console.log(\"this.uploadValues[id]\",this.uploadValues[id])\n\n\n      var path = '';\n\n      if (this.uploadValues && this.uploadValues[id]) {\n        path = this.uploadValues[id].path;\n      }\n\n      this.$refs.filePop.show(id, path, flag);\n    },\n    handleFileSuccess: function handleFileSuccess(obj) {\n      if (obj.id) {\n        this.uploadValues = this.bindValuesChange(obj, obj.id, 'uploadValues');\n      }\n    },\n    handleClickTableRow: function handleClickTableRow(event) {\n      var target = event.target;\n\n      if (target.className === 'td' || target.className === 'tr') {\n        // 清空编辑状态\n        this.currentEditRows = {};\n      }\n    },\n    // 点击后编辑当前行\n    handleEditRow: function handleEditRow(row, col) {\n      var _this26 = this;\n\n      if (this.alwaysEdit) {\n        return;\n      } // 将点击的组件置为可编辑并还原其他组件的编辑状态\n\n\n      this.currentEditRows = _defineProperty({}, row.id, _defineProperty({}, col.key, true));\n\n      if (col.type === FormTypes.input || col.type === FormTypes.inputNumber) {\n        this.$nextTick(function () {\n          _this26.forceUpdateFormValues(); // 自动获取焦点\n\n\n          var el = document.getElementById(\"\".concat(col.key).concat(row.id));\n\n          if (el) {\n            el.focus();\n          }\n        });\n      }\n    },\n\n    /** 添加按钮设置保存为默认值 */\n    onAddButtonSettingsSave: function onAddButtonSettingsSave() {\n      var obj = {\n        addRowNum: this.settings.addRowNum,\n        addIndex: this.settings.addIndex,\n        addScrollToBottom: this.settings.addScrollToBottom\n      };\n      this.$ls.set('jet-add-btn-settings', obj);\n      this.$message.success('保存成功');\n    },\n\n    /** 获取保存的添加按钮默认值 */\n    getSavedAddButtonSettings: function getSavedAddButtonSettings() {\n      var obj = this.$ls.get('jet-add-btn-settings');\n\n      if (obj) {\n        Object.assign(this.settings, obj);\n      }\n    },\n\n    /** 记录用到数据绑定的组件的值 */\n    bindValuesChange: function bindValuesChange(value, id, key) {\n      this.$set(this[key], id, value);\n      return this[key];\n    },\n\n    /** value 触发valueChange事件 */\n    elemValueChange: function elemValueChange(type, rowSource, columnSource, value) {\n      var column = Object.assign({}, columnSource); // 将caseId去除\n\n      var row = Object.assign({}, rowSource);\n      row.id = this.getCleanId(row.id); // 获取整行的数据\n\n      var _this$getValuesSync2 = this.getValuesSync({\n        validate: false,\n        rowIds: [row.id]\n      }),\n          values = _this$getValuesSync2.values;\n\n      if (values.length > 0) {\n        Object.assign(row, values[0]);\n      }\n\n      this.$emit('valueChange', {\n        type: type,\n        row: row,\n        column: column,\n        value: value,\n        target: this\n      });\n    },\n\n    /** 获取干净的ID（不包含任何杂质的ID） */\n    getCleanId: function getCleanId(id) {\n      id = this.removeCaseId(id);\n      id = this.removeTempId(id);\n      return id;\n    },\n\n    /** 判断某个ID是否包含了caseId */\n    hasCaseId: function hasCaseId(id) {\n      return id && id.startsWith(this.caseId);\n    },\n\n    /** 将caseId去除 */\n    removeCaseId: function removeCaseId(id) {\n      if (this.hasCaseId(id)) {\n        return id.substring(this.caseId.length, id.length);\n      }\n\n      return id;\n    },\n    // 判断 id 是否是临时Id\n    isTempId: function isTempId(id) {\n      return (id || '').endsWith(this.tempId);\n    },\n\n    /** 将tempId去除 */\n    removeTempId: function removeTempId(id) {\n      if (this.isTempId(id)) {\n        return id.substring(0, id.length - this.tempId.length);\n      }\n\n      return id;\n    },\n    handleClickDelFile: function handleClickDelFile(id, row, col) {\n      this.uploadValues[id] = null;\n      this.elemValueChange(col.type, row, col, null);\n    },\n    handleClickDownloadFile: function handleClickDownloadFile(id) {\n      var _ref3 = this.uploadValues[id] || {},\n          path = _ref3.path;\n\n      if (path) {\n        var url = getFileAccessHttpUrl(path);\n        window.open(url);\n      }\n    },\n    handleClickDownFileByUrl: function handleClickDownFileByUrl(id) {\n      var _ref4 = this.uploadValues[id] || {},\n          url = _ref4.url,\n          path = _ref4.path;\n\n      if (!url || url.length === 0) {\n        if (path && path.length > 0) {\n          url = getFileAccessHttpUrl(path.split(',')[0]);\n        }\n      }\n\n      if (url) {\n        window.open(url);\n      }\n    },\n    handleClickShowImageError: function handleClickShowImageError(id) {\n      var currUploadObj = this.uploadValues[id] || null;\n\n      if (currUploadObj && currUploadObj['message']) {\n        this.$error({\n          title: '上传出错',\n          content: '错误信息：' + currUploadObj['message'],\n          maskClosable: true\n        });\n      }\n    },\n\n    /** 加载数据字典并合并到 options */\n    _loadDictConcatToOptions: function _loadDictConcatToOptions(column) {\n      var _this27 = this;\n\n      initDictOptions(column.dictCode).then(function (res) {\n        if (res.success) {\n          var newOptions = column.options || []; // .concat(res.result)\n\n          res.result.forEach(function (item) {\n            // 过滤重复数据\n            var _iterator11 = _createForOfIteratorHelper(newOptions),\n                _step11;\n\n            try {\n              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                var option = _step11.value;\n                if (option.value === item.value) return;\n              }\n            } catch (err) {\n              _iterator11.e(err);\n            } finally {\n              _iterator11.f();\n            }\n\n            newOptions.push(item);\n          });\n\n          _this27.$set(column, 'options', newOptions);\n        } else {\n          console.group(\"JEditableTable \\u67E5\\u8BE2\\u5B57\\u5178(\".concat(column.dictCode, \")\\u53D1\\u751F\\u5F02\\u5E38\"));\n          console.log(res.message);\n          console.groupEnd();\n        }\n      });\n    },\n\n    /* --- common function end --- */\n\n    /* --- 以下是辅助方法，多用于动态构造页面中的数据 --- */\n\n    /** 辅助方法：打印日志 */\n    log: function log() {\n      if (this.$attrs.logger) {\n        console.log.apply(null, arguments);\n      }\n    },\n    getVM: function getVM() {\n      return this;\n    },\n\n    /** 辅助方法：动态构造Tooltip的Props，防止出现不消失的情况 */\n    buildTooltipProps: function buildTooltipProps(row, col, id) {\n      var notPassedIds = this.notPassedIds,\n          tooltips = this.tooltips;\n      var props = {\n        title: (tooltips[id] || {}).title,\n        placement: 'top',\n        autoAdjustOverflow: true,\n        getPopupContainer: this.getParentContainer,\n        class: {\n          'j-check-failed': false\n        }\n      };\n      var isCheckFailed = notPassedIds.includes(id);\n\n      if (isCheckFailed) {\n        props.class['j-check-failed'] = true;\n      } else {\n        props['visible'] = false;\n      }\n\n      return props;\n    },\n\n    /** 辅助方法：指定a-select 和 j-data 的父容器 */\n    getParentContainer: function getParentContainer(node) {\n      var _this28 = this;\n\n      var element = function () {\n        // nodeType 8\t: Comment\t: 注释\n        if (_this28.$el && _this28.$el.nodeType !== 8) {\n          return _this28.$el;\n        }\n\n        var doc = document.getElementById(_this28.caseId + 'inputTable');\n\n        if (doc != null) {\n          return doc;\n        }\n\n        return node.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode;\n      }(); // 递归判断是否带有 overflow: hidden；的父元素\n\n\n      var ifParent = function ifParent(child) {\n        var currentOverflow = null;\n\n        if (child['currentStyle']) {\n          currentOverflow = child['currentStyle']['overflow'];\n        } else if (window.getComputedStyle) {\n          currentOverflow = window.getComputedStyle(child)['overflow'];\n        }\n\n        if (currentOverflow != null) {\n          if (currentOverflow === 'hidden') {\n            // 找到了带有 hidden 的标签，判断它的父级是否还有 hidden，直到遇到完全没有 hidden 或 body 的时候才停止递归\n            var _temp = ifParent(child.parentNode);\n\n            return _temp != null ? _temp : child.parentNode;\n          } else // 当前标签没有 hidden ，如果有父级并且父级不是 body 的话就继续递归判断父级\n            if (child.parentNode && child.parentNode.tagName.toLocaleLowerCase() !== 'body') {\n              return ifParent(child.parentNode);\n            } else {\n              // 直到 body 都没有遇到有 hidden 的标签\n              return null;\n            }\n        } else {\n          return child;\n        }\n      };\n\n      var temp = ifParent(element);\n      return temp != null ? temp : element;\n    },\n\n    /** 辅助方法：替换${...}变量 */\n    replaceProps: function replaceProps(col, value) {\n      if (value && typeof value === 'string') {\n        value = value.replace(/\\${title}/g, col.title);\n        value = value.replace(/\\${key}/g, col.key);\n        value = value.replace(/\\${defaultValue}/g, col.defaultValue);\n      }\n\n      return value;\n    },\n\n    /** view辅助方法：构建 tr style */\n    buildTrStyle: function buildTrStyle(index) {\n      return {\n        'top': \"\".concat(rowHeight * index, \"px\")\n      };\n    },\n\n    /** view辅助方法：构建 td style */\n    buildTdStyle: function buildTdStyle(col) {\n      var isEmptyWidth = function isEmptyWidth(column) {\n        return column.type === FormTypes.hidden || column.width === '0px' || column.width === '0' || column.width === 0;\n      };\n\n      var style = {}; // 计算宽度\n\n      if (col.width) {\n        style['width'] = col.width;\n      } else if (this.columns) {\n        style['width'] = \"\".concat((100 - 4 * 2) / this.columns.filter(function (column) {\n          return !isEmptyWidth(column);\n        }).length, \"%\");\n      } else {\n        style['width'] = '120px';\n      } //update-begin-author:lvdandan date:20201116 for:LOWCOD-984 默认风格功能测试附表样式问题 日期时间控件长度太大\n      //如果是时间控件设为200px\n\n\n      if (col.type === FormTypes.datetime) {\n        style['width'] = '200px';\n      }\n\n      if (col.type === FormTypes.sel_user && !col.width) {\n        style['width'] = '220px';\n      }\n\n      if (col.type === FormTypes.sel_depart && !col.width) {\n        style['width'] = '160px';\n      } //update-end-author:lvdandan date:20201116 for:LOWCOD-984 默认风格功能测试附表样式问题 日期时间控件长度太大\n      // checkbox 居中显示\n\n\n      var isCheckbox = col.type === FormTypes.checkbox;\n\n      if (isCheckbox) {\n        style['align-items'] = 'center';\n        style['text-align'] = 'center';\n        style['padding-left'] = '0';\n        style['padding-right'] = '0';\n      }\n\n      if (isEmptyWidth(col)) {\n        style['padding-left'] = '0';\n        style['padding-right'] = '0';\n      }\n\n      return style;\n    },\n\n    /** view辅助方法：构造props */\n    buildProps: function buildProps(row, col) {\n      var props = {}; // 解析props\n\n      if (_typeof(col.props) === 'object') {\n        for (var prop in col.props) {\n          if (col.props.hasOwnProperty(prop)) {\n            props[prop] = this.replaceProps(col, col.props[prop]);\n          }\n        }\n      } // 判断select是否允许输入\n\n\n      if (col.type === FormTypes.select && (col.allowInput === true || col.allowSearch === true)) {\n        props['showSearch'] = true;\n      }\n\n      if (col.type === FormTypes.sel_depart || col.type === FormTypes.sel_user) {\n        var _this$getStoreAndText = this.getStoreAndTextField(col),\n            storeField = _this$getStoreAndText.storeField,\n            textField = _this$getStoreAndText.textField;\n\n        props['store'] = storeField;\n        props['text'] = textField;\n      } // 判断是否是禁用的列\n\n\n      props['disabled'] = typeof col['disabled'] === 'boolean' ? col['disabled'] : props['disabled']; // 判断是否为禁用的行\n\n      if (props['disabled'] !== true) {\n        props['disabled'] = (this.disabledRowIds || []).indexOf(row.id) !== -1;\n      } // 判断是否禁用全部组件\n\n\n      if (this.disabled === true) {\n        props['disabled'] = true;\n      }\n\n      return props;\n    },\n\n    /**获取部门选择 、用户选择的存储字段、展示字段*/\n    getStoreAndTextField: function getStoreAndTextField(col) {\n      var storeField = '',\n          textField = '';\n\n      if (col.type === FormTypes.sel_depart) {\n        storeField = 'id';\n        textField = 'departName';\n      } else if (col.type === FormTypes.sel_user) {\n        storeField = 'username';\n        textField = 'realname';\n      }\n\n      if (col.fieldExtendJson) {\n        // online逻辑\n        var tempJson = JSON.parse(col.fieldExtendJson);\n\n        if (tempJson) {\n          if (tempJson.store) {\n            storeField = tempJson.store;\n          }\n\n          if (tempJson.text) {\n            textField = tempJson.text;\n          }\n        }\n      } else {\n        // 实际开发逻辑\n        if (col.store) {\n          storeField = col.store;\n        }\n\n        if (col.text) {\n          textField = col.text;\n        }\n      }\n\n      return {\n        storeField: storeField,\n        textField: textField\n      };\n    },\n\n    /** 辅助方法：防止过快点击，如果点击过快的话就返回 true */\n    checkTooFastClick: function checkTooFastClick() {\n      var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n      var ms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n      var nowTime = Date.now();\n      var lastTime = this.lastPushTimeMap.get(key);\n\n      if (!lastTime) {\n        lastTime = nowTime;\n        this.lastPushTimeMap.set(key, nowTime);\n        return false;\n      }\n\n      var diffTime = nowTime - lastTime;\n\n      if (diffTime <= ms) {\n        this.$message.warn('你点击的太快了，请慢点点击!');\n        return true;\n      }\n\n      this.lastPushTimeMap.set(key, nowTime);\n      return false;\n    },\n\n    /** upload 辅助方法：获取 headers */\n    uploadGetHeaders: function uploadGetHeaders(row, column) {\n      var headers = {};\n\n      if (column.token === true) {\n        headers['X-Access-Token'] = this.accessToken;\n      }\n\n      return headers;\n    },\n\n    /** 上传请求地址 */\n    getUploadAction: function getUploadAction(value) {\n      if (!value) {\n        return window._CONFIG['domianURL'] + '/sys/common/upload';\n      } else {\n        return value;\n      }\n    },\n\n    /** 预览图片地址 */\n    getCellImageView: function getCellImageView(id) {\n      var currUploadObj = this.uploadValues[id] || null;\n\n      if (currUploadObj) {\n        if (currUploadObj['url']) {\n          return currUploadObj['url'];\n        } else if (currUploadObj['path']) {\n          var readpath = currUploadObj['path'].split(',')[0];\n          return getFileAccessHttpUrl(readpath);\n        }\n      }\n\n      return '';\n    },\n\n    /** popup回调 */\n    popupCallback: function popupCallback(value, others, id, row, column, index) {\n      // 存储输入的值\n      var popupValue = value;\n\n      if (others) {\n        var rowKey = this.getCleanId(row.id);\n        var setValueItem = {\n          rowKey: rowKey,\n          values: {}\n        };\n        Object.keys(others).forEach(function (key) {\n          // 当前列直接赋值，其他列通过setValues赋值\n          if (key === column.key) {\n            popupValue = others[key];\n          } else {\n            setValueItem.values[key] = others[key];\n          }\n        });\n\n        if (Object.keys(setValueItem).length > 0) {\n          this.setValues([setValueItem]);\n        }\n      }\n\n      this.setOneValue(this.popupValues, id, popupValue); // 做单个表单验证\n\n      this.validateOneInput(popupValue, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange('input', row, column, value);\n    },\n\n    /** popup输入框回显 */\n    getPopupValue: function getPopupValue(id) {\n      return this.popupValues[id];\n    },\n    handleRadioChange: function handleRadioChange(value, id, row, column) {\n      this.radioValues = this.bindValuesChange(value, id, 'radioValues'); // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.radio, row, column, value);\n    },\n    handleMultiSelectChange: function handleMultiSelectChange(value, id, row, column) {\n      this.multiSelectValues = this.bindValuesChange(value, id, 'multiSelectValues'); // 做单个表单验证\n\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change'); // 触发valueChange 事件\n\n      this.elemValueChange(FormTypes.list_multi, row, column, value);\n    },\n    handleSearchSelectChange: function handleSearchSelectChange(value, id, row, column) {\n      this.searchSelectValues = this.bindValuesChange(value, id, 'searchSelectValues');\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change');\n      this.elemValueChange(FormTypes.sel_search, row, column, value);\n    },\n    handleSearchSelectAsyncChange: function handleSearchSelectAsyncChange(value, id, row, column) {\n      this.searchSelectAsyncValues = this.bindValuesChange(value, id, 'searchSelectAsyncValues');\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change');\n      this.elemValueChange(FormTypes.sel_search_async, row, column, value);\n    },\n    filterOption: function filterOption(input, option) {\n      return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    },\n    getEllipsisWord: function getEllipsisWord(content, len) {\n      if (!content || content.length === 0) {\n        return '';\n      }\n\n      if (content.length > len) {\n        return content.substr(0, len);\n      }\n\n      return content;\n    },\n\n    /* --------------------------- 2020年5月18日 默认span模式 ------------------------------ */\n\n    /** 获取Select等组件翻译后的文本 */\n    getSelectTranslateText: function getSelectTranslateText(value, row, col) {\n      // 翻译支持单选和多选（数组、逗号分割）\n      return filterDictText(col.options, value);\n    },\n    // 判定当前行是否是正在编辑的\n    isEditRow: function isEditRow(row, col) {\n      if (this.alwaysEdit) {\n        return true;\n      }\n\n      var current = this.currentEditRows[row.id];\n      return !!(current && current[col.key] === true);\n    },\n\n    /* ---- 事件监听 ---- */\n    // 鼠标弹起事件，用于清空输入状态\n    handleMouseup: function handleMouseup(event) {\n      if (this.alwaysEdit || Object.keys(this.currentEditRows).length === 0) {\n        return;\n      } // console.log(this.caseId + 'handleMouseup: ', event)\n\n\n      var target = event.target;\n\n      if (!target) {\n        return;\n      }\n\n      var className = target.className || '';\n\n      if (typeof className === 'string') {\n        // 点击的标签是span\n        if (className.includes('j-td-span') && className.includes('no-edit')) {\n          return;\n        } // 点击的标签是下拉\n\n\n        if (className.includes('ant-select-dropdown-menu-item')) {\n          return;\n        }\n      } // 事件冒泡路径\n\n\n      var path = getEventPath(event);\n\n      var _iterator12 = _createForOfIteratorHelper(path),\n          _step12;\n\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var p = _step12.value;\n\n          // 如果点击的是 tr 就不处理（tr单独处理）\n          if ((p.id || '').startsWith(\"\".concat(this.caseId, \"tbody-tr\"))) {\n            return;\n          }\n\n          var pClassName = p.className || '';\n          pClassName = typeof pClassName === 'string' ? pClassName : pClassName.toString();\n          /* --- 特殊处理以下组件，点击以下标签时不清空编辑状态 --- */\n          // 点击的标签是JInputPop\n\n          if (pClassName.includes('j-input-pop')) {\n            return;\n          } // 点击的标签是JPopup的弹出层\n\n\n          if (pClassName.includes('j-popup-modal')) {\n            return;\n          } // 点击的标签是日期选择器的弹出层\n\n\n          if (pClassName.includes('j-date-picker') || pClassName.includes('ant-calendar-picker-container')) {\n            return;\n          }\n        } // 清空编辑状态\n\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n\n      this.currentEditRows = {};\n    },\n    // 添加事件监听\n    addEventListener: function addEventListener() {\n      window.addEventListener('mouseup', this.handleMouseup);\n    },\n    // 移除事件监听\n    removeEventListener: function removeEventListener() {\n      window.removeEventListener('mouseup', this.handleMouseup);\n    },\n\n    /* --------------------------- 2020年5月18日 默认span模式 ------------------------------ */\n    //获取没有授权的按钮编码\n    loadExcludeCode: function loadExcludeCode() {\n      if (!this.authPre || this.authPre.length == 0) {\n        this.excludeCode = [];\n      } else {\n        var pre = this.authPre;\n\n        if (!pre.endsWith(':')) {\n          pre += ':';\n        }\n\n        this.excludeCode = getNoAuthCols(pre);\n      }\n    },\n    //判断button是否显示\n    buttonPermission: function buttonPermission(code) {\n      if (!this.excludeCode || this.excludeCode.length == 0) {\n        return true;\n      } else {\n        return this.excludeCode.indexOf(code) < 0;\n      }\n    },\n    // 判断用户、部门组件是否多选\n    isMultipleSelect: function isMultipleSelect(column) {\n      var jsonStr = column.fieldExtendJson;\n\n      if (jsonStr) {\n        // online\n        var config = JSON.parse(jsonStr);\n\n        if (config && config['multiSelect'] == false) {\n          return false;\n        }\n      } else if (column.multi == false) {\n        // 实际开发\n        return false;\n      }\n\n      return true;\n    },\n    // 根据id获取dataSource中的一行数据\n    getOriginData: function getOriginData(id) {\n      return this.dataSource.filter(function (item) {\n        return item.id == id;\n      });\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.removeEventListener();\n    this.destroyCleanGroupRequest = true;\n  }\n};",{"version":3,"sources":["JEditableTable.vue"],"names":[],"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","sourcesContent":["<!-- JEditableTable -->\n<!-- @version 1.6.2 -->\n<!-- @author sjlei -->\n<template>\n  <a-spin :spinning=\"loading\">\n\n    <a-row type=\"flex\">\n      <a-col>\n        <slot name=\"buttonBefore\" :target=\"getVM()\"/>\n      </a-col>\n      <a-col>\n        <!-- 操作按钮 -->\n        <div v-if=\"actionButton\" class=\"action-button\">\n          <a-button-group v-if=\"buttonPermission('add')\">\n            <a-button type=\"primary\" icon=\"plus\" @click=\"handleClickAdd\" :disabled=\"disabled\">新增</a-button>\n            <a-popover v-if=\"addButtonSettings\" placement=\"right\" overlayClassName=\"j-add-btn-settings\">\n              <a-row slot=\"title\">\n                <a-col :span=\"12\">选项</a-col>\n                <a-col :span=\"12\" style=\"text-align: right;\">\n                  <a-tooltip title=\"保存为默认值\">\n                    <a-button type=\"link\" icon=\"save\" size=\"small\" style=\"position: relative;left:4px;\" @click=\"onAddButtonSettingsSave\"/>\n                  </a-tooltip>\n                </a-col>\n              </a-row>\n              <template slot=\"content\">\n                <a-form-model layout=\"horizontal\" :labelCol=\"{span:8}\" :wrapperCol=\"{span:16}\">\n                  <a-form-model-item label=\"添加行数\">\n                    <a-input-number v-model=\"settings.addRowNum\" :min=\"1\"/>\n                  </a-form-model-item>\n                  <a-form-model-item label=\"添加位置\">\n                    <a-input-number v-model=\"settings.addIndex\" :min=\"0\" :max=\"rows.length\"/>\n                    <p style=\"font-size: 12px;color:#aaa;line-height: 14px;text-align: right;margin: 0;\">0 = 最底部</p>\n                  </a-form-model-item>\n                  <a-divider style=\"margin: 8px 0;\"/>\n                  <a-checkbox v-model=\"settings.addScrollToBottom\">添加后滚动到底部</a-checkbox>\n                </a-form-model>\n              </template>\n              <a-button icon=\"setting\" type=\"primary\"></a-button>\n            </a-popover>\n          </a-button-group>\n          <span class=\"gap\"></span>\n          <template v-if=\"selectedRowIds.length>0\">\n            <a-popconfirm\n              :title=\"`确定要删除这 ${selectedRowIds.length} 项吗?`\"\n              @confirm=\"handleConfirmDelete\">\n              <a-button v-if=\"buttonPermission('batch_delete')\" type=\"primary\" icon=\"minus\" :disabled=\"disabled\">删除</a-button>\n              <span class=\"gap\"></span>\n            </a-popconfirm>\n            <template v-if=\"showClearSelectButton\">\n              <a-button icon=\"delete\" @click=\"handleClickClearSelection\">清空选择</a-button>\n              <span class=\"gap\"></span>\n            </template>\n          </template>\n        </div>\n      </a-col>\n      <a-col>\n        <slot name=\"buttonAfter\" :target=\"getVM()\"/>\n      </a-col>\n    </a-row>\n\n    <slot name=\"actionButtonAfter\" :target=\"getVM()\"/>\n\n    <div :id=\"`${caseId}inputTable`\" class=\"input-table\">\n      <!-- 渲染表头 -->\n      <div class=\"thead\" ref=\"thead\">\n        <div class=\"tr\" :style=\"{width: this.realTrWidth}\">\n          <!-- 左侧固定td  -->\n          <div v-if=\"dragSort\" class=\"td td-ds\" :style=\"style.tdLeft\">\n            <span></span>\n          </div>\n          <div v-if=\"rowSelection\" class=\"td td-cb\" :style=\"style.tdLeft\">\n            <!--:indeterminate=\"true\"-->\n            <a-checkbox\n              :checked=\"getSelectAll\"\n              :indeterminate=\"getSelectIndeterminate\"\n              @change=\"handleChangeCheckedAll\"\n            />\n          </div>\n          <div v-if=\"rowNumber\" class=\"td td-num\" :style=\"style.tdLeft\">\n            <span>#</span>\n          </div>\n          <!-- 右侧动态生成td -->\n          <template v-for=\"col in columns\">\n            <div\n              v-show=\"col.type !== formTypes.hidden\"\n              class=\"td\"\n              :key=\"col.key\"\n              :style=\"buildTdStyle(col)\">\n\n              <span>{{ col.title }}</span>\n            </div>\n          </template>\n        </div>\n      </div>\n\n      <div class=\"scroll-view\" ref=\"scrollView\" :style=\"{'max-height':maxHeight+'px'}\">\n\n\n        <!-- 渲染主体 body -->\n        <div :id=\"`${caseId}tbody`\" class=\"tbody\" :style=\"tbodyStyle\">\n          <!-- 扩展高度 -->\n          <div class=\"tr-expand\" :style=\"`height:${getExpandHeight}px; z-index:${loading?'11':'9'};`\"></div>\n          <!-- 无数据时显示 -->\n          <div v-if=\"rows.length===0\" class=\"tr-nodata\">\n            <span>暂无数据</span>\n          </div>\n          <!-- v-model=\"rows\"-->\n          <draggable\n            :value=\"rows\"\n            handle=\".td-ds-icons\"\n            @start=\"handleDragMoveStart\"\n            @end=\"handleDragMoveEnd\"\n          >\n\n            <!-- 动态生成tr -->\n            <template v-for=\"(row,rowIndex) in rows\">\n              <!-- tr 只加载可见的和预加载的总共十条数据 -->\n              <div\n                v-if=\"\n                rowIndex >= parseInt(`${(scrollTop-rowHeight) / rowHeight}`) &&\n                  (parseInt(`${scrollTop / rowHeight}`) + 9) > rowIndex\n              \"\n                :id=\"`${caseId}tbody-tr-${rowIndex}`\"\n                :data-idx=\"rowIndex\"\n                class=\"tr\"\n                :class=\"selectedRowIds.indexOf(row.id) !== -1 ? 'tr-checked' : ''\"\n                :style=\"buildTrStyle(rowIndex)\"\n                :key=\"row.id\"\n                @click=\"handleClickTableRow\"\n              >\n                <!-- 左侧固定td  -->\n\n                <div v-if=\"dragSort\" class=\"td td-ds\" :style=\"style.tdLeft\" @dblclick=\"_handleRowInsertDown(rowIndex)\" >\n                  <a-dropdown :trigger=\"['click']\" :getPopupContainer=\"getParentContainer\">\n                    <div class=\"td-ds-icons\">\n                      <a-icon type=\"align-left\"/>\n                      <a-icon type=\"align-right\"/>\n                    </div>\n\n                    <a-menu slot=\"overlay\">\n                      <a-menu-item key=\"0\" :disabled=\"rowIndex===0\" @click=\"_handleRowMoveUp(rowIndex)\">向上移</a-menu-item>\n                      <a-menu-item key=\"1\" :disabled=\"rowIndex===(rows.length-1)\" @click=\"_handleRowMoveDown(rowIndex)\">向下移</a-menu-item>\n                      <a-menu-divider/>\n                      <a-menu-item key=\"3\" @click=\"_handleRowInsertDown(rowIndex)\">插入一行</a-menu-item>\n                    </a-menu>\n                  </a-dropdown>\n                </div>\n\n                <div v-if=\"rowSelection\" class=\"td td-cb\" :style=\"style.tdLeft\">\n                  <!-- 此 v-for 只是为了拼接 id 字符串 -->\n                  <template v-for=\"(id,i) in [`${row.id}`]\">\n                    <a-checkbox\n                      :id=\"id\"\n                      :key=\"i\"\n                      :checked=\"selectedRowIds.indexOf(id) !== -1\"\n                      @change=\"handleChangeLeftCheckbox\"/>\n                  </template>\n                </div>\n                <div v-if=\"rowNumber\" class=\"td td-num\" :style=\"style.tdLeft\">\n                  <span>{{ rowIndex+1 }}</span>\n                </div>\n                <!-- 右侧动态生成td -->\n                <div\n                  class=\"td\"\n                  v-for=\"col in columns\"\n                  v-show=\"col.type !== formTypes.hidden\"\n                  :key=\"col.key\"\n                  :style=\"buildTdStyle(col)\">\n\n                  <!-- 此 v-for 只是为了拼接 id 字符串 -->\n                  <template v-for=\"(id,i) in [`${col.key}${row.id}`]\">\n\n                    <!-- native input -->\n                    <label :key=\"i\" v-if=\"col.type === formTypes.input || col.type === formTypes.inputNumber\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <input\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          v-bind=\"buildProps(row,col)\"\n                          :data-input-number=\"col.type === formTypes.inputNumber\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          @blur=\"(e)=>{handleBlurCommono(e.target,rowIndex,row,col)}\"\n                          @input=\"(e)=>{handleInputCommono(e.target,rowIndex,row,col)}\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ inputValues[rowIndex][col.key] }}</span>\n                      </a-tooltip>\n                    </label>\n                    <!-- checkbox -->\n                    <template v-else-if=\"col.type === formTypes.checkbox\">\n                      <a-checkbox\n                        :key=\"i\"\n                        :id=\"id\"\n                        v-bind=\"buildProps(row,col)\"\n                        :checked=\"checkboxValues[id]\"\n                        @change=\"(e)=>handleChangeCheckboxCommon(e,row,col)\"\n                      />\n                    </template>\n                    <!-- select -->\n                    <template v-else-if=\"col.type === formTypes.select\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <a-select\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"selectValues[id]\"\n                          :options=\"col.options\"\n                          :getPopupContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          :filterOption=\"(i,o)=>handleSelectFilterOption(i,o,col)\"\n                          :maxTagCount=\"1\"\n                          @change=\"(v)=>handleChangeSelectCommon(v,id,row,col)\"\n                          @search=\"(v)=>handleSearchSelect(v,id,row,col)\"\n                          @blur=\"(v)=>handleBlurSearch(v,id,row,col)\"\n                          allowClear\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click.stop=\"handleEditRow(row, col)\"\n                        >{{ getSelectTranslateText(selectValues[id], row, col) }}</span>\n                      </a-tooltip>\n                    </template>\n\n                    <!-- 部门选择 -->\n                    <template v-else-if=\"col.type === formTypes.sel_depart\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-select-depart\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"departCompValues[id]\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          :trigger-change=\"true\"\n                          :multi=\"isMultipleSelect(col)\"\n                          @change=\"(v)=>handleChangeDepartCommon(v,id,row,col)\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ departCompValues[id] }}</span>\n                      </a-tooltip>\n                    </template>\n\n                    <!-- 用户选择 -->\n                    <template v-else-if=\"col.type === formTypes.sel_user\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-select-user-by-dep\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"userCompValues[id]\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          :trigger-change=\"true\"\n                          :multi=\"isMultipleSelect(col)\"\n                          @change=\"(v)=>handleChangeUserCommon(v,id,row,col)\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ userCompValues[id] }}</span>\n                      </a-tooltip>\n                    </template>\n\n                    <!-- date -->\n                    <template v-else-if=\"col.type === formTypes.date || col.type === formTypes.datetime\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-date\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"jdateValues[id]\"\n                          :getCalendarContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          :trigger-change=\"true\"\n                          :showTime=\"col.type === formTypes.datetime\"\n                          :dateFormat=\"col.type === formTypes.date? 'YYYY-MM-DD':'YYYY-MM-DD HH:mm:ss'\"\n                          allowClear\n                          @change=\"(v)=>handleChangeJDateCommon(v,id,row,col,col.type === formTypes.datetime)\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ jdateValues[id] }}</span>\n                      </a-tooltip>\n                    </template>\n\n                    <!-- time -->\n                    <template v-else-if=\"col.type === formTypes.time\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-time\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"jdateValues[id]\"\n                          :getCalendarContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          allowClear\n                          @change=\"(v)=>handleChangeJDateCommon(v,id,row,col)\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ jdateValues[id] }}</span>\n                      </a-tooltip>\n                    </template>\n\n                    <!-- input_pop -->\n                    <template v-else-if=\"col.type === formTypes.input_pop||col.type === 'textarea'\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-input-pop\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          :width=\"300\"\n                          :height=\"210\"\n                          :pop-container=\"`${caseId}tbody`\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"jInputPopValues[id]\"\n                          :getCalendarContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          @change=\"(v)=>handleChangeJInputPopCommon(v,id,row,col)\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ jInputPopValues[id] }}</span>\n                      </a-tooltip>\n                    </template>\n                    <!-- upload -->\n                    <div v-else-if=\"col.type === formTypes.upload\" :key=\"i\">\n                      <template v-if=\"uploadValues[id] != null\" v-for=\"(file,fileKey) of [(uploadValues[id]||{})]\">\n                        <a-input\n                          :key=\"fileKey\"\n                          :readOnly=\"true\"\n                          :value=\"file.name\"\n                        >\n\n                          <template slot=\"addonBefore\" style=\"width: 30px\">\n                            <a-tooltip v-if=\"file.status==='uploading'\" :title=\"`上传中(${Math.floor(file.percent)}%)`\">\n                              <a-icon type=\"loading\"/>\n                            </a-tooltip>\n                            <a-tooltip v-else-if=\"file.status==='done'\" title=\"上传完成\">\n                              <a-icon type=\"check-circle\" style=\"color:#00DB00;\"/>\n                            </a-tooltip>\n                            <a-tooltip v-else :title=\"file.message||'上传失败'\">\n                              <a-icon type=\"exclamation-circle\" style=\"color:red;\"/>\n                            </a-tooltip>\n                          </template>\n\n                          <template v-if=\"col.allowDownload!==false || col.allowRemove!==false\" slot=\"addonAfter\" style=\"width: 30px\">\n                            <a-dropdown :trigger=\"['click']\" placement=\"bottomRight\" :getPopupContainer=\"getParentContainer\">\n                              <a-tooltip title=\"操作\" :getPopupContainer=\"getParentContainer\">\n                                <a-icon\n                                  v-if=\"file.status!=='uploading'\"\n                                  type=\"setting\"\n                                  style=\"cursor: pointer;\"/>\n                              </a-tooltip>\n\n                              <a-menu slot=\"overlay\">\n                                <a-menu-item v-if=\"col.allowDownload!==false\" @click=\"handleClickDownloadFile(id)\">\n                                  <span><a-icon type=\"download\"/>&nbsp;下载</span>\n                                </a-menu-item>\n                                <a-menu-item v-if=\"col.allowRemove!==false\" @click=\"handleClickDelFile(id, row, col)\">\n                                  <span><a-icon type=\"delete\"/>&nbsp;删除</span>\n                                </a-menu-item>\n                              </a-menu>\n                            </a-dropdown>\n                          </template>\n\n                        </a-input>\n                      </template>\n\n                      <div :hidden=\"uploadValues[id] != null\">\n                        <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                          <a-upload\n                            name=\"file\"\n                            :data=\"{'isup':1, ...(col.data||{})}\"\n                            :multiple=\"false\"\n                            :action=\"col.action\"\n                            :headers=\"uploadGetHeaders(row,col)\"\n                            :showUploadList=\"false\"\n                            v-bind=\"buildProps(row,col)\"\n                            @change=\"(v)=>handleChangeUpload(v,id,row,col)\"\n                          >\n                            <a-button icon=\"upload\">{{ col.placeholder }}</a-button>\n                          </a-upload>\n                        </a-tooltip>\n                      </div>\n\n                    </div>\n\n                    <!-- update-begin-author:taoyan date:0827 for：popup -->\n                    <template v-else-if=\"col.type === formTypes.popup\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-popup\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          style=\"width: 100%;\"\n                          :value=\"getPopupValue(id)\"\n                          :field=\"col.field || col.key\"\n                          :org-fields=\"col.orgFields\"\n                          :dest-fields=\"col.destFields\"\n                          :code=\"col.popupCode\"\n                          :groupId=\"caseId\"\n                          :param=\"col.param\"\n                          :sorter=\"col.sorter\"\n                          @input=\"(value,others)=>popupCallback(value,others,id,row,col,rowIndex)\"\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ getPopupValue(id) }}</span>\n                      </a-tooltip>\n                    </template>\n                    <!-- update-end-author:taoyan date:0827 for：popup -->\n\n                    <!-- update-beign-author:taoyan date:0827 for：文件/图片逻辑新增 -->\n                    <div v-else-if=\"col.type === formTypes.file\" :key=\"i\">\n                      <template v-if=\"hasUploadValue(id)\" v-for=\"(file,fileKey) of [(uploadValues[id]||{})]\">\n                        <div :key=\"fileKey\" style=\"position: relative;\">\n                          <a-tooltip v-if=\"file.status==='uploading'\" :title=\"`上传中(${Math.floor(file.percent)}%)`\">\n                            <a-icon type=\"loading\" style=\"color:red;\"/>\n                            <span style=\"color:red;margin-left:5px\">{{  file.status }}</span>\n                          </a-tooltip>\n\n                          <a-tooltip v-else-if=\"file.status==='done'\" :title=\"file.name\">\n                            <a-icon type=\"paper-clip\" />\n                            <span style=\"margin-left:5px\">{{ getEllipsisWord(file.name,5) }}</span>\n                          </a-tooltip>\n\n                          <a-tooltip v-else :title=\"file.message||'上传失败'\">\n                            <a-icon type=\"exclamation-circle\" style=\"color:red;\"/>\n                            <span style=\"margin-left:5px\">{{ getEllipsisWord(file.name,5) }}</span>\n                          </a-tooltip>\n\n                          <template style=\"width: 30px\">\n                            <a-dropdown :trigger=\"['click']\" placement=\"bottomRight\" :getPopupContainer=\"getParentContainer\" style=\"margin-left: 10px;\">\n                              <a-tooltip title=\"操作\" :getPopupContainer=\"getParentContainer\">\n                                <a-icon v-if=\"file.status!=='uploading'\" type=\"setting\" style=\"cursor: pointer;\"/>\n                              </a-tooltip>\n\n                              <a-menu slot=\"overlay\">\n                                <a-menu-item v-if=\"col.allowDownload!==false\" @click=\"handleClickDownFileByUrl(id)\">\n                                  <span><a-icon type=\"download\"/>&nbsp;下载</span>\n                                </a-menu-item>\n                                <a-menu-item @click=\"handleClickDelFile(id, row, col)\">\n                                  <span><a-icon type=\"delete\"/>&nbsp;删除</span>\n                                </a-menu-item>\n                                <a-menu-item @click=\"handleMoreOperation(id,col,col)\">\n                                  <span><a-icon type=\"bars\" /> 更多</span>\n                                </a-menu-item>\n                              </a-menu>\n                            </a-dropdown>\n                          </template>\n                        </div>\n                      </template>\n\n                      <div :hidden=\"hasUploadValue(id)\">\n                        <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                          <a-upload\n                            name=\"file\"\n                            :data=\"{'isup':1}\"\n                            :multiple=\"false\"\n                            :action=\"getUploadAction(col.action)\"\n                            :headers=\"uploadGetHeaders(row,col)\"\n                            :showUploadList=\"false\"\n                            v-bind=\"buildProps(row,col)\"\n                            @change=\"(v)=>handleChangeUpload(v,id,row,col)\"\n                          >\n                            <a-button icon=\"upload\">上传文件</a-button>\n                          </a-upload>\n                        </a-tooltip>\n                      </div>\n\n                    </div>\n\n                    <div v-else-if=\"col.type === formTypes.image\" :key=\"i\">\n                      <template v-if=\"hasUploadValue(id)\" v-for=\"(file,fileKey) of [(uploadValues[id]||{})]\">\n                        <div :key=\"fileKey\" style=\"position: relative;\">\n                          <template v-if=\"!uploadValues[id] || !(uploadValues[id]['url'] || uploadValues[id]['path'] || uploadValues[id]['message'])\">\n                            <a-icon type=\"loading\"/>\n                          </template>\n                          <template v-else-if=\"uploadValues[id]['path']\">\n                            <img class=\"j-editable-image\" :src=\"getCellImageView(id)\" alt=\"无图片\" @click=\"handleMoreOperation(id,'img',col)\"/>\n                          </template>\n                          <a-tooltip v-else :title=\"file.message||'上传失败'\" @click=\"handleClickShowImageError(id)\">\n                            <a-icon type=\"exclamation-circle\" style=\"color:red;\"/>\n                          </a-tooltip>\n\n                          <template style=\"width: 30px\">\n                            <a-dropdown :trigger=\"['click']\" placement=\"bottomRight\" :getPopupContainer=\"getParentContainer\" style=\"margin-left: 10px;\">\n                              <a-tooltip title=\"操作\" :getPopupContainer=\"getParentContainer\">\n                                <a-icon\n                                  v-if=\"file.status!=='uploading'\"\n                                  type=\"setting\"\n                                  style=\"cursor: pointer;\"/>\n                              </a-tooltip>\n\n                              <a-menu slot=\"overlay\">\n                                <a-menu-item v-if=\"col.allowDownload!==false\" @click=\"handleClickDownFileByUrl(id)\">\n                                  <span><a-icon type=\"download\"/>&nbsp;下载</span>\n                                </a-menu-item>\n                                <a-menu-item @click=\"handleClickDelFile(id, row, col)\">\n                                  <span><a-icon type=\"delete\"/>&nbsp;删除</span>\n                                </a-menu-item>\n                                <a-menu-item @click=\"handleMoreOperation(id,'img',col)\">\n                                  <span><a-icon type=\"bars\" /> 更多</span>\n                                </a-menu-item>\n                              </a-menu>\n                            </a-dropdown>\n                          </template>\n\n                        </div>\n                      </template>\n\n                      <div :hidden=\"hasUploadValue(id)\">\n                        <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                          <a-upload\n                            name=\"file\"\n                            :data=\"{'isup':1}\"\n                            :multiple=\"false\"\n                            :action=\"getUploadAction(col.action)\"\n                            :headers=\"uploadGetHeaders(row,col)\"\n                            :showUploadList=\"false\"\n                            v-bind=\"buildProps(row,col)\"\n                            @change=\"(v)=>handleChangeUpload(v,id,row,col)\"\n                          >\n                            <a-button icon=\"upload\">上传图片</a-button>\n                          </a-upload>\n                        </a-tooltip>\n                      </div>\n\n                    </div>\n                    <!-- update-end-author:taoyan date:0827 for：图片逻辑新增 -->\n\n                    <!-- radio-begin -->\n                    <template v-else-if=\"col.type === formTypes.radio\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <a-radio-group\n                          :id=\"id\"\n                          :key=\"i\"\n                          v-bind=\"buildProps(row,col)\"\n                          :value=\"radioValues[id]\"\n                          @change=\"(e)=>handleRadioChange(e.target.value,id,row,col)\">\n                          <a-radio v-for=\"(item, key) in col.options\" :key=\"key\" :value=\"item.value\">{{ item.text }}</a-radio>\n                        </a-radio-group>\n                      </a-tooltip>\n                    </template>\n                    <!-- radio-end -->\n\n                    <!-- select多选 -begin -->\n                    <template v-else-if=\"col.type === formTypes.list_multi\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <a-select\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          mode=\"multiple\"\n                          :maxTagCount=\"1\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"multiSelectValues[id]\"\n                          :options=\"col.options\"\n                          :getPopupContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          @change=\"(v)=>handleMultiSelectChange(v,id,row,col)\"\n                          allowClear\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ getSelectTranslateText(multiSelectValues[id], row, col) }} </span>\n                      </a-tooltip>\n                    </template>\n                    <!-- select多选 -end -->\n\n                    <!-- select搜索 -begin -->\n                    <template v-else-if=\"col.type === formTypes.sel_search\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <a-select\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          showSearch\n                          optionFilterProp=\"children\"\n                          :filterOption=\"filterOption\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          :value=\"searchSelectValues[id]\"\n                          :options=\"col.options\"\n                          :getPopupContainer=\"getParentContainer\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          @change=\"(v)=>handleSearchSelectChange(v,id,row,col)\"\n                          allowClear\n                        />\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ getSelectTranslateText(searchSelectValues[id], row, col) }}</span>\n                      </a-tooltip>\n                    </template>\n                    <!-- select搜索 -end -->\n\n                    <!-- select异步搜索 -begin -->\n                    <template v-else-if=\"col.type === formTypes.sel_search_async\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <j-search-select-tag\n                          v-if=\"isEditRow(row, col)\"\n                          :id=\"id\"\n                          :key=\"i\"\n                          :value=\"searchSelectAsyncValues[id]\"\n                          :placeholder=\"replaceProps(col, col.placeholder)\"\n                          :dict=\"col.dict\"\n                          :async=\"true\"\n                          :getPopupContainer=\"getParentContainer\"\n                          v-bind=\"buildProps(row,col)\"\n                          style=\"width: 100%;\"\n                          @change=\"(v)=>handleSearchSelectAsyncChange(v,id,row,col)\"\n                        >\n                        </j-search-select-tag>\n                        <span\n                          v-else\n                          class=\"j-td-span no-edit\"\n                          :class=\"{disabled: buildProps(row,col).disabled}\"\n                          @click=\"handleEditRow(row, col)\"\n                        >{{ searchSelectAsyncValues[id] }}</span>\n                      </a-tooltip>\n                    </template>\n                    <!-- select异步搜索 -end -->\n\n                    <div v-else-if=\"col.type === formTypes.slot\" :key=\"i\">\n                      <a-tooltip v-bind=\"buildTooltipProps(row, col, id)\">\n                        <!--  update：sunjianlei date：2022-1-17 for：buildProps新增参数 -->\n                        <slot\n                          :name=\"(col.slot || col.slotName) || col.key\"\n                          :index=\"rowIndex\"\n                          :text=\"slotValues[id]\"\n                          :value=\"slotValues[id]\"\n                          :column=\"col\"\n                          :rowId=\"getCleanId(row.id)\"\n                          :getValue=\"()=>_getValueForSlot(row.id)\"\n                          :caseId=\"caseId\"\n                          :allValues=\"_getAllValuesForSlot()\"\n                          :target=\"getVM()\"\n                          :handleChange=\"(v)=>handleChangeSlotCommon(v,id,row,col)\"\n                          :isNotPass=\"notPassedIds.includes(col.key+row.id)\"\n                          :buildProps=\"()=>buildProps(row,col)\"\n                        />\n                      </a-tooltip>\n                    </div>\n\n                    <!-- else (normal) -->\n                    <span class=\"comp-normal\" v-else :key=\"i\" :title=\"inputValues[rowIndex][col.key]\" v-bind=\"buildProps(row,col)\">{{ inputValues[rowIndex][col.key] }}</span>\n                  </template>\n                </div>\n              </div>\n              <!-- -- tr end -- -->\n\n            </template>\n          </draggable>\n\n\n          <!-- 统计行 -->\n          <div\n            v-if=\"showStatisticsRow\"\n            class=\"tr\"\n            :style=\"{\n              ...buildTrStyle(rows.length),\n              height: '32px'\n            }\"\n          >\n            <div v-if=\"dragSort\" class=\"td td-ds\" :style=\"style.tdLeft\">\n            </div>\n            <div v-if=\"rowSelection\" class=\"td td-cb\" :style=\"style.tdLeft\">\n              统计\n            </div>\n            <div v-if=\"rowNumber\" class=\"td td-num\" :style=\"style.tdLeft\">\n              <span v-if=\"!rowSelection\">统计</span>\n            </div>\n\n            <!-- 右侧动态生成td -->\n            <template v-for=\"col in columns\">\n              <div\n                :key=\"col.key\"\n                class=\"td\"\n                v-show=\"col.type !== formTypes.hidden\"\n                :style=\"buildTdStyle(col)\"\n              >\n                <span\n                  v-show=\"col.type === formTypes.inputNumber\"\n                  style=\"padding: 0 5px;\"\n                >{{statisticsColumns[col.key]}}</span>\n              </div>\n            </template>\n\n          </div>\n\n        </div>\n      </div>\n      <j-file-pop ref=\"filePop\" @ok=\"handleFileSuccess\" :number=\"number\"></j-file-pop>\n    </div>\n  </a-spin>\n</template>\n\n<script>\n  import Vue from 'vue'\n  import Draggable from 'vuedraggable'\n  import { ACCESS_TOKEN } from '@/store/mutation-types'\n  import { FormTypes, VALIDATE_NO_PASSED } from '@/utils/JEditableTableUtil'\n  import { cloneObject, getEventPath, randomNumber, randomString } from '@/utils/util'\n  import JDate from '@/components/jeecg/JDate'\n  import { filterDictText, initDictOptions } from '@/components/dict/JDictSelectUtil'\n  import { getFileAccessHttpUrl } from '@/api/manage'\n  import JInputPop from '@/components/jeecg/minipop/JInputPop'\n  import JFilePop from '@/components/jeecg/minipop/JFilePop'\n  import { getNoAuthCols } from '@/utils/authFilter'\n\n  // 行高，需要在实例加载完成前用到\n  let rowHeight = 61\n\n  export default {\n    name: 'JEditableTable',\n    components: { JDate, Draggable, JInputPop, JFilePop },\n    provide() {\n      return {\n        parentIsJEditableTable: true,\n        getDestroyCleanGroupRequest: () => this.destroyCleanGroupRequest,\n      }\n    },\n    props: {\n      // 列信息\n      columns: {\n        type: Array,\n        required: true\n      },\n      // 数据源\n      dataSource: {\n        type: Array,\n        required: true,\n        default: () => []\n      },\n      // 是否显示操作按钮\n      actionButton: {\n        type: Boolean,\n        default: false\n      },\n      // 是否显示添加按钮选项\n      addButtonSettings: {\n        type: Boolean,\n        default: false\n      },\n      // 是否显示行号\n      rowNumber: {\n        type: Boolean,\n        default: false\n      },\n      // 是否可选择行\n      rowSelection: {\n        type: Boolean,\n        default: false\n      },\n      // 页面是否在加载中\n      loading: {\n        type: Boolean,\n        default: false\n      },\n      // 表格内容区域最大高度\n      maxHeight: {\n        type: Number,\n        default: 400\n      },\n      // 要禁用的行\n      disabledRows: {\n        type: Object,\n        default() {\n          return {}\n        }\n      },\n      // 是否禁用全部组件\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      // 是否可拖拽排序\n      dragSort: {\n        type: Boolean,\n        default: false\n      },\n      dragSortKey: {\n        type: String,\n        default: 'orderNum'\n      },\n      // 是否一直显示编辑框，如果为false则只有点击的时候才出现输入框\n      alwaysEdit: {\n        type: Boolean,\n        default: true\n      },\n      authPre: {\n        type: String,\n        required: false,\n        default: ''\n      },\n    },\n    data() {\n      return {\n        // 是否首次运行\n        isFirst: true,\n        // 当前实例是否是行编辑\n        isJEditableTable: true,\n        // caseId，用于防止有多个实例的时候会冲突\n        caseId: `_jet-${randomString(6)}-`,\n        // 临时ID标识，凡是以该标识结尾的ID都是临时ID，不添加到数据库中\n        tempId: `_tid-${randomString(6)}`,\n        // 存储document element 对象\n        el: {\n          inputTable: null,\n          tbody: null\n        },\n        // 存储各个div的style\n        style: {\n          // 'max-height': '400px'\n          tbody: { left: '0px' },\n          // 左侧固定td的style\n          tdLeft: {},\n        },\n        // 表单的类型\n        formTypes: FormTypes,\n        // 行数据\n        rows: [],\n        // 行高，height + padding + border\n        rowHeight,\n        // 滚动条顶部距离\n        scrollTop: 0,\n        // 绑定 select 的值\n        selectValues: {},\n        // 绑定 checkbox 的值\n        checkboxValues: {},\n        // 绑定 jdate 的值\n        jdateValues: {},\n        // 绑定jinputpop\n        jInputPopValues:{},\n        // 绑定插槽数据\n        slotValues: {},\n        // file 信息\n        uploadValues: {},\n        //popup信息\n        popupValues: {},\n        //部门组件信息\n        departCompValues:{},\n        //用户组件信息\n        userCompValues: {},\n\n        radioValues: {},\n        metaCheckboxValues: {},\n        multiSelectValues: {},\n        searchSelectValues: {},\n        searchSelectAsyncValues: {},\n        // 绑定左侧选择框已选择的id\n        selectedRowIds: [],\n        // 存储被删除行的id\n        deleteIds: [],\n        // 存储显示tooltip的信息\n        tooltips: {},\n        // 存储没有通过验证的inputId\n        notPassedIds: [],\n\n        // 当前是否正在拖拽排序\n        dragging: false,\n        // 是否有统计列\n        hasStatisticsColumn: false,\n        statisticsColumns: {},\n        // 只有在行编辑被销毁时才主动清空GroupRequest的内存\n        destroyCleanGroupRequest: false,\n        // 当前正在编辑的行的id\n        currentEditRows: {},\n        // 上次push数据的事件，用于判断是否点击过快\n        lastPushTimeMap: new Map(),\n        number:0,\n        //不显示的按钮编码\n        excludeCode:[],\n        // 选项配置\n        settings: {\n          // 添加行数\n          addRowNum: 1,\n          // 添加位置（下标），0 = 最底部\n          addIndex: 0,\n          // 添加后滚动到底部\n          addScrollToBottom: false,\n        },\n      }\n    },\n    created() {\n      this.inputValues = []\n      // 当前显示的tr\n      this.visibleTrEls = []\n      this.disabledRowIds = (this.disabledRowIds || [])\n      // 解决火狐浏览器下拖拽会打开新的Tab的问题\n      document.body.ondrop = (event) => {\n        if (this.dragging) {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n      }\n      this.getSavedAddButtonSettings()\n    },\n    // 计算属性\n    computed: {\n      // expandHeight = rows.length * rowHeight\n      getExpandHeight() {\n        let length = this.rows.length * this.rowHeight\n        if (this.showStatisticsRow) {\n          length += 34\n        }\n        return length\n      },\n      // 是否显示统计行\n      showStatisticsRow() {\n        return this.hasStatisticsColumn && this.rows.length > 0\n      },\n      // 获取是否选择了部分\n      getSelectIndeterminate() {\n        return (this.selectedRowIds.length > 0 &&\n          this.selectedRowIds.length < this.rows.length)\n      },\n      // 获取是否选择了全部\n      getSelectAll() {\n        return (this.selectedRowIds.length === this.rows.length) && this.rows.length > 0\n      },\n      tbodyStyle() {\n        let style = Object.assign({}, this.style.tbody)\n        // style['max-height'] = `${this.maxHeight}px`\n        style['width'] = this.realTrWidth\n        return style\n      },\n      showClearSelectButton() {\n        let count = 0\n        for (let key in this.disabledRows) {\n          if (this.disabledRows.hasOwnProperty(key)) count++\n        }\n        return count > 0\n      },\n      accessToken() {\n        return Vue.ls.get(ACCESS_TOKEN)\n      },\n      realTrWidth() {\n        let splice = ' + '\n        let calcWidth = 'calc('\n        this.columns.forEach((column, i) => {\n          let { type, width } = column\n          // 隐藏字段不参与计算\n          if (type !== FormTypes.hidden) {\n            if (typeof width === 'number') {\n              calcWidth += width + 'px'\n            } else if (typeof width === 'string') {\n              calcWidth += width\n            } else {\n              calcWidth += '120px'\n            }\n            calcWidth += splice\n          }\n        })\n        if (calcWidth.endsWith(splice)) {\n          calcWidth = calcWidth.substring(0, calcWidth.length - splice.length)\n        }\n        calcWidth += ')'\n        // console.log('calcWidth: ', calcWidth)\n        return calcWidth\n      }\n    },\n    // 侦听器\n    watch: {\n      rows: {\n        immediate: true,\n        handler(val, old) {\n          // val.forEach(item => {\n          //   for (let inputValue of  this.inputValues) {\n          //     if (inputValue.id === item.id) {\n          //       item['dbFieldName'] = inputValue['dbFieldName']\n          //       break\n          //     }\n          //   }\n          // })\n          // console.log('watch.rows:', cloneObject({ val, old }))\n        }\n      },\n      dataSource: {\n        immediate: true,\n        handler: function (newValue) {\n          // 兼容IE\n          this.getElementPromise('tbody').then(() => {\n            this.initialize()\n            this._pushByDataSource(newValue)\n          })\n        }\n      },\n      columns: {\n        immediate: true,\n        handler(columns) {\n          //列改变的时候重新设置按钮权限信息\n          this.loadExcludeCode()\n          // 兼容IE\n          this.getElementPromise('tbody').then(() => {\n            columns.forEach(column => {\n              if (column.type === FormTypes.select || column.type === FormTypes.list_multi || column.type === FormTypes.sel_search) {\n                // 兼容 旧版本 options\n                if (column.options instanceof Array) {\n                  column.options = column.options.map(item => {\n                    if (item) {\n                      return {\n                        ...item,\n                        text: item.text || item.title,\n                        title: item.text || item.title\n                      }\n                    }\n                    return {}\n                  })\n                }\n                if (column.dictCode) {\n                  this._loadDictConcatToOptions(column)\n                }\n              }\n            })\n          })\n        }\n      },\n      // 当selectRowIds改变时触发事件\n      selectedRowIds(newValue) {\n        this.$emit('selectRowChange', cloneObject(newValue).map(i => this.getCleanId(i)))\n      }\n    },\n    mounted() {\n      let vm = this\n      /** 监听滚动条事件 */\n      this.getElement('inputTable').onscroll = function (event) {\n        vm.syncScrollBar(event.target.scrollLeft)\n      }\n      this.getElement('tbody').onscroll = function (event) {\n        // vm.recalcTrHiddenItem(event.target.scrollTop)\n      }\n\n      let { thead, scrollView } = this.$refs\n      scrollView.onscroll = function (event) {\n\n        // console.log(event.target.scrollTop, ' - ', event.target.scrollLeft)\n\n        thead.scrollLeft = event.target.scrollLeft\n\n        vm.recalcTrHiddenItem(event.target.scrollTop)\n\n      }\n\n      // 添加事件监听\n      this.addEventListener()\n\n    },\n    methods: {\n      // 判断文件/图片是否存在\n      hasUploadValue(id){\n        let flag = this.uploadValues[id] != null && this.uploadValues[id].toString().length>0\n        return flag;\n      },\n      getElement(id, noCaseId = false) {\n        if (!this.el[id]) {\n          this.el[id] = document.getElementById((noCaseId ? '' : this.caseId) + id)\n        }\n        return this.el[id]\n      },\n\n      getElementPromise(id, noCaseId = false) {\n        return new Promise((resolve) => {\n          let timer = setInterval(() => {\n            let element = this.getElement(id, noCaseId)\n            if (element) {\n              clearInterval(timer)\n              resolve(element)\n            }\n          }, 10)\n        })\n      },\n\n      /** 初始化列表 */\n      initialize() {\n        this.visibleTrEls = []\n        // 判断是否是首次进入该方法，如果是就不清空行，防止删除了预添加的数据\n        if (!this.isFirst) {\n         this.clearRow();\n        } else {\n          this.isFirst = false\n        }\n      },\n      /**清空行*/\n      clearRow(){\n        // inputValues：用来存储input表单的值\n        // 数组里的每项都是一个对象，对象里每个key都是input的rowKey，值就是input的值，其中有个id的字段来区分\n        // 示例：\n        // [{\n        //    id: \"_jet-4sp0iu-15541771111770\"\n        //    dbDefaultVal: \"aaa\",\n        //    dbFieldName: \"bbb\",\n        //    dbFieldTxt: \"ccc\",\n        //    dbLength: 32\n        // }]\n        this.inputValues = []\n        this.rows = []\n        this.deleteIds = []\n        this.selectedRowIds = []\n        this.tooltips = {}\n        this.notPassedIds = []\n        // 重置values\n        this.selectValues = {}\n        this.checkboxValues = {}\n        this.jdateValues = {}\n        this.jInputPopValues = {}\n        this.departCompValues = {}\n        this.userCompValues = {}\n        this.slotValues = {}\n        //update-begin-author:shunjlei date:20210415 for:类型赋值错误\n        this.uploadValues = {}\n        this.popupValues = {}\n        this.radioValues = {}\n        this.multiSelectValues = {}\n        this.searchSelectValues = {}\n        this.searchSelectAsyncValues = {}\n        //update-end-author:shunjlei date:20210415 for:类型赋值错误\n\n        // 重置滚动条\n        this.scrollTop = 0\n        this.$nextTick(() => {\n          this.getElement('tbody').scrollTop = 0\n        })\n      },\n      /** 同步滚动条状态 */\n      syncScrollBar(scrollLeft) {\n        // this.style.tbody.left = `${scrollLeft}px`\n        // this.getElement('tbody').scrollLeft = scrollLeft\n      },\n      /** 重置滚动条位置，参数留空则滚动到上次记录的位置 */\n      resetScrollTop(top) {\n        let { scrollView } = this.$refs\n        if (top != null && typeof top === 'number') {\n          scrollView.scrollTop = top\n        } else {\n          scrollView.scrollTop = this.scrollTop\n        }\n      },\n      /** 重新计算需要隐藏或显示的tr */\n      recalcTrHiddenItem(top) {\n        let diff = top - this.scrollTop\n        if (diff < 0) {\n          diff = this.scrollTop - top\n        }\n        // 只有在滚动了百分之三十的行高的距离时才进行更新\n        if (diff >= this.rowHeight * 0.3) {\n          this.scrollTop = top\n          // 更新form表单的值\n          this.$nextTick(() => {\n            this.updateFormValues()\n          })\n        }\n      },\n      /** 生成id */\n      generateId(rows) {\n        if (!(rows instanceof Array)) {\n          rows = this.rows || []\n        }\n        let timestamp = new Date().getTime()\n        return `${this.caseId}${timestamp}${rows.length}${randomNumber(6)}${this.tempId}`\n      },\n      /** push 一条数据 */\n      push(record, update = true, rows, insertIndex = null, setDefaultValue = true) {\n        return this._pushByDataSource([record], [insertIndex], update, rows, setDefaultValue)\n      },\n\n      /**\n       * push 数据\n       *\n       * @param dataSource 数据源\n       * @param insertIndexes 行插入位置，和dataSource的下标一一对应\n       * @param update 是否更新\n       * @param rows 若不传就使用 this.rows\n       * @param setDefaultValue 是否填充默认值\n       *\n       */\n      _pushByDataSource(dataSource, insertIndexes = null, update = true, rows = null, setDefaultValue = false) {\n        if (!(rows instanceof Array)) {\n          rows = [...this.rows] || []\n        }\n        let checkboxValues = { ...this.checkboxValues }\n        let selectValues = { ...this.selectValues }\n        let jdateValues = { ...this.jdateValues }\n        let departCompValues = { ...this.departCompValues }\n        let userCompValues = { ...this.userCompValues }\n        let jInputPopValues = { ...this.jInputPopValues }\n        let slotValues = { ...this.slotValues }\n        let uploadValues = { ...this.uploadValues }\n        let popupValues = { ...this.popupValues }\n        let radioValues = { ...this.radioValues }\n        let multiSelectValues = { ...this.multiSelectValues }\n        let searchSelectValues = { ...this.searchSelectValues }\n        let searchSelectAsyncValues = { ...this.searchSelectAsyncValues }\n        // 禁用行的id\n        let disabledRowIds = (this.disabledRowIds || [])\n        dataSource.forEach((data, newValueIndex) => {\n          // 不能直接更改数据源的id\n          let dataId = data.id\n          // 判断源数据是否带有id\n          if (dataId == null || dataId === '') {\n            dataId = this.generateId(rows)\n          } else if(!this.hasCaseId(dataId)) {\n            dataId = this.caseId + dataId\n          }\n          let row = { id: dataId }\n          let value = { id: dataId }\n          let disabled = false\n          this.columns.forEach(column => {\n            let inputId = column.key + value.id\n            let sourceValue = (data[column.key] == null ? '' : data[column.key]).toString()\n\n            let defaultValue = null;\n            if (setDefaultValue) {\n              defaultValue = column.defaultValue || (column.defaultValue === 0 ? 0 : '')\n              if (defaultValue instanceof Array) {\n                defaultValue = defaultValue.join(',')\n              }\n\n              sourceValue = (typeof sourceValue === 'number' || sourceValue) ? sourceValue : defaultValue\n            }\n            let sourceValueIsEmpty = (sourceValue == null || sourceValue === '')\n\n            if (column.type === FormTypes.inputNumber) {\n              // 判断是否是排序字段，如果是就赋最大值\n              if (column.isOrder === true) {\n                value[column.key] = this.getInputNumberMaxValue(column) + 1\n              } else {\n                value[column.key] = sourceValue\n              }\n              // 判断是否是统计列\n              if (column.statistics) {\n                this.hasStatisticsColumn = true\n                if (!this.statisticsColumns[column.key]) {\n                  this.$set(this.statisticsColumns, column.key, 0)\n                }\n              }\n\n            } else if (column.type === FormTypes.checkbox) {\n              // 判断是否设定了customValue（自定义值）\n              if (column.customValue instanceof Array) {\n                let customValue = (column.customValue[0] || '').toString()\n                if (sourceValueIsEmpty && setDefaultValue) {\n                  sourceValue = column.defaultChecked ? customValue : sourceValue\n                }\n                checkboxValues[inputId] = (sourceValue === customValue)\n              } else {\n                if (sourceValueIsEmpty && setDefaultValue) {\n                  checkboxValues[inputId] = !!column.defaultChecked\n                } else {\n                  checkboxValues[inputId] = sourceValue\n                }\n              }\n\n            } else if (column.type === FormTypes.select) {\n              if (!sourceValueIsEmpty) {\n                // 判断是否是多选\n                if (typeof sourceValue === 'string' && (column.props || {})['mode'] === 'multiple') {\n                  sourceValue = sourceValue === '' ? [] : sourceValue.split(',')\n                }\n                selectValues[inputId] = sourceValue\n              } else {\n                selectValues[inputId] = undefined\n              }\n\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime || column.type === FormTypes.time) {\n              jdateValues[inputId] = sourceValue\n\n            } else if (column.type === FormTypes.slot) {\n              slotValues[inputId] = sourceValue\n\n            } else if (column.type === FormTypes.popup) {\n              popupValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.sel_depart) {\n              departCompValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.sel_user) {\n              userCompValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.input_pop || column.type === 'textarea') {\n              jInputPopValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.radio) {\n              radioValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.sel_search) {\n              searchSelectValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.sel_search_async) {\n              searchSelectAsyncValues[inputId] = sourceValue\n            } else if (column.type === FormTypes.list_multi) {\n              if (typeof sourceValue === 'string' && sourceValue.length > 0) {\n                multiSelectValues[inputId] = sourceValue.split(',')\n              } else {\n                multiSelectValues[inputId] = []\n              }\n            } else if (column.type === FormTypes.upload || column.type === FormTypes.file || column.type === FormTypes.image) {\n              if (sourceValue) {\n                let fileName = ''\n                if (sourceValue.indexOf(',') > 0) {\n                  let sourceValue2 = sourceValue.split(',')[0]\n                  fileName = sourceValue2.substring(sourceValue2.lastIndexOf('/') + 1)\n                } else {\n                  fileName = sourceValue.substring(sourceValue.lastIndexOf('/') + 1)\n                }\n                uploadValues[inputId] = {\n                  name: fileName,\n                  status: 'done',\n                  path: sourceValue\n                }\n              } else {\n                uploadValues[inputId] = null\n              }\n            } else {\n              value[column.key] = sourceValue\n            }\n\n            // 解析disabledRows\n            for (let columnKey in this.disabledRows) {\n              // 判断是否有该属性\n              if (this.disabledRows.hasOwnProperty(columnKey) && data.hasOwnProperty(columnKey)) {\n                if (disabled !== true) {\n                  let temp = this.disabledRows[columnKey]\n                  // 禁用规则可以是一个数组\n                  if (temp instanceof Array) {\n                    disabled = temp.includes(data[columnKey])\n                  } else {\n                    disabled = (temp === data[columnKey])\n                  }\n                  if (disabled) {\n                    disabledRowIds.push(row.id)\n                  }\n                }\n              }\n            }\n          })\n          // 插入行而不是添加到最后\n          let added = false\n          if (insertIndexes instanceof Array) {\n            let insertIndex = insertIndexes[newValueIndex]\n            if (typeof insertIndex === 'number') {\n              added = true\n              rows.splice(insertIndex, 0, row)\n              this.inputValues.splice(insertIndex, 0, value)\n            }\n          }\n          //update-begin-author:lvdandan date:20201105 for:LOWCOD-987 【online】js增强的问题--数据对象带有id，且和现有数据一致时，替换患有数据\n          if(-1 !== rows.findIndex(item => item.id === row.id)){\n            added = true\n            this.inputValues = this.inputValues.map(item => item.id === row.id ? value : item)\n          }\n          //update-begin-author:lvdandan date:20201105 for:LOWCOD-987 【online】js增强的问题--数据对象带有id，且和现有数据一致时，替换患有数据\n          if (!added) {\n            rows.push(row)\n            this.inputValues.push(value)\n          }\n        })\n        // 启用了拖动排序，就重新计算排序编号\n        if (this.dragSort) {\n          this.inputValues.forEach((item, index) => {\n            item[this.dragSortKey] = (index + 1)\n          })\n        }\n        this.disabledRowIds = disabledRowIds\n        this.checkboxValues = checkboxValues\n        this.selectValues = selectValues\n        this.jdateValues = jdateValues\n        this.departCompValues = departCompValues\n        this.userCompValues = userCompValues\n        this.jInputPopValues = jInputPopValues\n        this.slotValues = slotValues\n        this.uploadValues = uploadValues\n        this.popupValues = popupValues\n        this.radioValues = radioValues\n        this.multiSelectValues = multiSelectValues\n        this.searchSelectValues = searchSelectValues\n        this.searchSelectAsyncValues = searchSelectAsyncValues\n        // 重新计算所有统计列\n        this.recalcAllStatisticsColumns()\n        // 更新到 dom\n        if (update) {\n          this.rows = rows\n\n          // 更新form表单的值\n          this.$nextTick(() => {\n            this.forceUpdateFormValues()\n          })\n        }\n        return rows\n      },\n\n      /** 获取某一数字输入框列中的最大的值 */\n      getInputNumberMaxValue(column) {\n        let maxNum = 0\n        this.inputValues.forEach((item, index) => {\n          let val = item[column.key], num\n          try {\n            num = parseInt(val)\n          } catch {\n            num = 0\n          }\n          // 把首次循环的结果当成最大值\n          if (index === 0) {\n            maxNum = num\n          } else {\n            maxNum = (num > maxNum) ? num : maxNum\n          }\n        })\n        return maxNum\n      },\n      /** 添加一行 */\n      add(num = 1, forceScrollToBottom = false) {\n        if (num < 1) return\n        // let timestamp = new Date().getTime()\n        let rows = this.rows\n        let row\n        for (let i = 0; i < num; i++) {\n          rows = this.push({}, false, rows)\n          row = rows[rows.length - 1]\n        }\n        this.rows = rows\n\n        this.$nextTick(() => {\n          this.updateFormValues()\n        })\n        // 触发add事件\n        this.$emit('added', {\n          row: (() => {\n            let r = Object.assign({}, row)\n            r.id = this.getCleanId(r.id)\n            return r\n          })(),\n          target: this\n        })\n        // 设置滚动条位置\n        let tbody = this.getElement('tbody')\n        let offsetHeight = tbody.offsetHeight\n        let realScrollTop = tbody.scrollTop + offsetHeight\n        if (forceScrollToBottom) {\n          this.$nextTick(() => {\n            this.resetScrollTop(this.$refs.scrollView.scrollHeight)\n          })\n        }\n      },\n      /**\n       * 在指定位置添加一行\n       * @param insertIndex 添加位置下标\n       * @param num 添加的行数，默认1\n       */\n      insert(insertIndex, num = 1, forceScrollToBottom = false) {\n        if (this.checkTooFastClick('insert', 1500)) {\n          return\n        }\n        if (!insertIndex && num < 1) return\n        let rows = this.rows\n        let newRows = []\n        for (let i = 0; i < num; i++) {\n          let row = { id: this.generateId(rows) }\n          rows = this.push(row, false, rows, insertIndex)\n          newRows.push(row)\n        }\n        // 同步更改\n        this.rows = rows\n        this.$nextTick(() => {\n          this.recalcSortNumber()\n          this.forceUpdateFormValues()\n        })\n        // 触发 insert 事件\n        this.$emit('inserted', {\n          rows: newRows.map(row => {\n            let r = cloneObject(row)\n            r.id = this.getCleanId(r.id)\n            return r\n          }),\n          num, insertIndex,\n          target: this\n        })\n        // 设置滚动条位置\n        if (forceScrollToBottom) {\n          this.$nextTick(() => {\n            this.resetScrollTop(this.$refs.scrollView.scrollHeight)\n          })\n        }\n      },\n      /** 删除被选中的行 */\n      removeSelectedRows() {\n        this.removeRows(this.selectedRowIds)\n        this.selectedRowIds = []\n      },\n      /** 删除一行或多行 */\n      removeRows(id) {\n        let ids = id\n        if (!(id instanceof Array)) {\n          if (typeof id === 'string') {\n            ids = [id]\n          } else {\n            throw  `JEditableTable.removeRows() 函数需要的参数可以是string或Array类型，但提供的却是${typeof id}`\n          }\n        }\n\n        let rows = cloneObject(this.rows)\n        ids.forEach(removeId => {\n          removeId = this.getCleanId(removeId)\n          // 找到每个id对应的真实index并删除\n          const findAndDelete = (arr) => {\n            for (let i = 0; i < arr.length; i++) {\n              let currentId = this.getCleanId(arr[i].id)\n              if (currentId === removeId) {\n                arr.splice(i, 1)\n                return true\n              }\n            }\n          }\n          // 找到rows对应的index，并删除\n          if (findAndDelete(rows)) {\n            // 找到values对应的index，并删除\n            findAndDelete(this.inputValues)\n            // 将caseId去除\n            let id = this.getCleanId(removeId)\n            this.deleteIds.push(id)\n          }\n        })\n        this.rows = rows\n        this.$emit('deleted', this.getDeleteIds(), this)\n        this.$nextTick(() => {\n          // 更新formValues\n          this.updateFormValues()\n          // 重新计算统计\n          this.recalcAllStatisticsColumns()\n        })\n        return true\n      },\n\n      /** 获取表格表单里的值（异步版） */\n      getValuesAsync(options = {}, callback) {\n        let { validate, rowIds, deleteTempId } = options\n        if (typeof validate !== 'boolean') validate = true\n        if (!(rowIds instanceof Array)) rowIds = null\n        // 是否删除临时ID，默认为 false\n        if (typeof deleteTempId !== 'boolean') deleteTempId = false\n        // console.log('options:', { validate, rowIds })\n\n        let asyncCount = 0\n        let error = 0\n        let inputValues = cloneObject(this.inputValues)\n        let tooltips = Object.assign({}, this.tooltips)\n        let notPassedIds = cloneObject(this.notPassedIds)\n        // 用于存储合并后的值\n        let values = []\n        // 遍历inputValues来获取每行的值\n        for (let value of inputValues) {\n          let rowIdsFlag = false\n          // 如果带有rowIds，那么就只存这几行的数据\n          if (rowIds == null) {\n            rowIdsFlag = true\n          } else {\n            for (let rowId of rowIds) {\n              if (this.getCleanId(rowId) === this.getCleanId(value.id)) {\n                rowIdsFlag = true\n                break\n              }\n            }\n          }\n\n          if (!rowIdsFlag) continue\n\n          this.columns.forEach(column => {\n            let inputId = column.key + value.id\n            if (column.type === FormTypes.checkbox) {\n              let checked = this.checkboxValues[inputId]\n              if (column.customValue instanceof Array) {\n                value[column.key] = checked ? column.customValue[0] : column.customValue[1]\n              } else {\n                value[column.key] = checked\n              }\n\n            } else if (column.type === FormTypes.select) {\n              let selected = this.selectValues[inputId]\n              if (selected instanceof Array) {\n                value[column.key] = cloneObject(selected)\n              } else {\n                value[column.key] = selected\n              }\n\n            } else if (column.type === FormTypes.date || column.type === FormTypes.datetime || column.type === FormTypes.time) {\n              value[column.key] = this.jdateValues[inputId]\n\n            } else if (column.type === FormTypes.sel_depart) {\n              value[column.key] = this.departCompValues[inputId]\n\n            } else if (column.type === FormTypes.sel_user) {\n              value[column.key] = this.userCompValues[inputId]\n\n            } else if (column.type === FormTypes.input_pop || column.type === 'textarea') {\n              value[column.key] = this.jInputPopValues[inputId]\n\n            } else if (column.type === FormTypes.upload) {\n              value[column.key] = cloneObject(this.uploadValues[inputId] || null)\n\n            } else if (column.type === FormTypes.image || column.type === FormTypes.file) {\n              let currUploadObj = cloneObject(this.uploadValues[inputId] || null)\n              if (currUploadObj) {\n                value[column.key] = currUploadObj['path'] || null\n              }\n\n            } else if (column.type === FormTypes.popup) {\n              if (!value[column.key]) {\n                value[column.key] = this.popupValues[inputId] || null\n              }\n            } else if (column.type === FormTypes.radio) {\n              value[column.key] = this.radioValues[inputId]\n            } else if (column.type === FormTypes.sel_search) {\n              value[column.key] = this.searchSelectValues[inputId]\n            } else if (column.type === FormTypes.sel_search_async) {\n              value[column.key] = this.searchSelectAsyncValues[inputId]\n            } else if (column.type === FormTypes.list_multi) {\n              if (!this.multiSelectValues[inputId] || this.multiSelectValues[inputId].length === 0) {\n                value[column.key] = ''\n              } else {\n                value[column.key] = this.multiSelectValues[inputId].join(',')\n              }\n            } else if (column.type === FormTypes.slot) {\n              value[column.key] = this.slotValues[inputId]\n            }\n\n\n            // 检查表单验证\n            if (validate === true) {\n              const handleValidateOneInput = (results) => {\n                tooltips[inputId] = results[0]\n                if (tooltips[inputId].passed === false) {\n                  error++\n                  // if (error++ === 0) {\n                  // let element = document.getElementById(inputId)\n                  // while (element.className !== 'tr') {\n                  //   element = element.parentElement\n                  // }\n                  // this.jumpToId(inputId, element)\n                  // }\n                }\n                tooltips[inputId].visible = false\n                notPassedIds = results[1]\n              }\n              asyncCount++\n              let results = this.validateOneInputAsync(value[column.key], value, column, notPassedIds, false, 'getValues', (results) => {\n                handleValidateOneInput(results)\n                asyncCount--\n              })\n              handleValidateOneInput(results)\n            }\n          })\n          // 删除 tempId\n          if (deleteTempId && this.isTempId(value.id)) {\n            delete value.id\n          } else {\n            value.id = this.getCleanId(value.id)\n          }\n\n          values.push(value)\n        }\n\n        if (validate === true) {\n          this.tooltips = tooltips\n          this.notPassedIds = notPassedIds\n        }\n\n        const timer = setInterval(() => {\n          if (asyncCount === 0) {\n            clearInterval(timer)\n            if (typeof callback === 'function') {\n              callback({ error, values })\n            }\n          }\n        }, 10)\n\n        return { error, values }\n      },\n\n      /** 获取表格表单里的值（同步版） */\n      getValuesSync(options = {}) {\n        return this.getValuesAsync(options)\n      },\n\n      /** 获取表格表单里的值 */\n      getValues(callback, validate = true, rowIds) {\n        this.getValuesAsync({ validate, rowIds }, ({ error, values }) => {\n          if (typeof callback === 'function') {\n            callback(error, values)\n          }\n        })\n      },\n      /** getValues的Promise版 */\n      getValuesPromise(validate = true, rowIds, deleteTempId) {\n        return new Promise((resolve, reject) => {\n          this.getValuesAsync({ validate, rowIds, deleteTempId }, ({ error, values }) => {\n            if (error === 0) {\n              resolve(values)\n            } else {\n              reject(VALIDATE_NO_PASSED)\n            }\n          })\n        })\n      },\n      /** 获取被删除项的id */\n      getDeleteIds() {\n        return cloneObject(this.deleteIds)\n      },\n      /** 获取所有的数据，包括values、deleteIds */\n      getAll(validate, deleteTempId) {\n        return new Promise((resolve, reject) => {\n          let deleteIds = this.getDeleteIds()\n          this.getValuesPromise(validate, null, deleteTempId).then((values) => {\n            resolve({ values, deleteIds })\n          }).catch(error => {\n            reject(error)\n          })\n        })\n      },\n      /** Sync 获取所有的数据，包括values、deleteIds */\n      getAllSync(validate, rowIds, deleteTempId) {\n        let result = this.getValuesSync({ validate, rowIds, deleteTempId })\n        result.deleteIds = this.getDeleteIds()\n        return result\n      },\n      // slot 获取值\n      _getValueForSlot(rowId) {\n        return this.getValuesSync({ rowIds: [rowId] }).values[0]\n      },\n      _getAllValuesForSlot() {\n        return cloneObject({\n          inputValues: this.inputValues,\n          selectValues: this.selectValues,\n          checkboxValues: this.checkboxValues,\n          jdateValues: this.jdateValues,\n          departCompValues: this.departCompValues,\n          userCompValues: this.userCompValues,\n          jInputPopValues: this.jInputPopValues,\n          slotValues: this.slotValues,\n          uploadValues: this.uploadValues,\n          popupValues: this.popupValues,\n          radioValues: this.radioValues,\n          multiSelectValues: this.multiSelectValues,\n          searchSelectValues: this.searchSelectValues,\n          searchSelectAsyncValues: this.searchSelectAsyncValues,\n        })\n      },\n      /** 设置某行某列的值 */\n      setValues(values) {\n\n        values.forEach(item => {\n          let { rowKey, values: newValues } = item\n          rowKey = this.getCleanId(rowKey)\n          for (let newValueKey in newValues) {\n            if (newValues.hasOwnProperty(newValueKey)) {\n              let edited = false // 已被修改\n              for (let column of this.columns) {\n                if (column.key === newValueKey) {\n                  let newValue = newValues[newValueKey]\n                  this.inputValues.forEach(value => {\n                    // 在inputValues中找到了该字段\n                    if (rowKey === this.getCleanId(value.id)) {\n                      if (value.hasOwnProperty(newValueKey)) {\n                        edited = true\n                        value[newValueKey] = newValue\n                      }\n                    }\n                  })\n                  if (!edited) {\n                    let modelKey = `${newValueKey}${this.caseId}${rowKey}`\n                    if (column.type === FormTypes.select) {\n                      if (newValue !== 0 && !newValue) {\n                        edited = this.setOneValue(this.selectValues, modelKey, undefined)\n                      } else {\n                        edited = this.setOneValue(this.selectValues, modelKey, newValue)\n                      }\n                    } else if (column.type === FormTypes.checkbox) {\n                      // checkbox 特殊处理 CustomValue\n                      let key = this.valuesHasOwnProperty(this.checkboxValues, modelKey)\n                      // 找到对应的column\n                      let sourceValue\n                      // 判断是否设定了customValue（自定义值）\n                      if (column.customValue instanceof Array) {\n                        let customValue = (column.customValue[0] || '').toString()\n                        sourceValue = (newValue === customValue)\n                      } else {\n                        sourceValue = !!newValue\n                      }\n                      this.$set(this.checkboxValues, key, sourceValue)\n                      edited = true\n                    } else if (column.type === FormTypes.date || column.type === FormTypes.datetime || column.type === FormTypes.time) {\n                      edited = this.setOneValue(this.jdateValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.sel_depart) {\n                      edited = this.setOneValue(this.departCompValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.sel_user) {\n                      edited = this.setOneValue(this.userCompValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.input_pop || column.type === 'textarea') {\n                      edited = this.setOneValue(this.jInputPopValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.slot) {\n                      edited = this.setOneValue(this.slotValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.upload || column.type === FormTypes.image || column.type === FormTypes.file) {\n                      edited = this.setOneValue(this.uploadValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.popup) {\n                      edited = this.setOneValue(this.popupValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.radio) {\n                      edited = this.setOneValue(this.radioValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.list_multi) {\n                      edited = this.setOneValue(this.multiSelectValues, modelKey, newValue, true)\n                    } else if (column.type === FormTypes.sel_search) {\n                      edited = this.setOneValue(this.searchSelectValues, modelKey, newValue)\n                    } else if (column.type === FormTypes.sel_search_async) {\n                      edited = this.setOneValue(this.searchSelectAsyncValues, modelKey, newValue)\n                    } else {\n                      edited = false\n                    }\n                  }\n                  if (edited) {\n                    // update-begin-author:sunjianlei date:20211222 for: 修复 setValues 触发的 valueChange 事件没有id的问题\n                    this.elemValueChange(column.type, {id: rowKey}, column, newValue)\n                    // update-end-author:sunjianlei date:20211222 for: 修复 setValues 触发的 valueChange 事件没有id的问题\n                  }\n                }\n              }\n              if (!edited) {\n                console.warn(`JEditableTable.setValues：没有找到\"${newValueKey}\"列`)\n              }\n            }\n          }\n        })\n        // 强制更新formValues\n        this.forceUpdateFormValues()\n        // 【issues/3828】重新计算统计列\n        this.recalcAllStatisticsColumns()\n      },\n      /**\n       * 设置单个组件的值\n       * @param valuesObject 组件存储值的对象\n       * @param modelKey 组件存储值的对象里的key\n       * @param value 新值\n       * @param isMultiple 是否多选，如果是就会对 value 进行一个 split(',') 的操作\n       */\n      setOneValue(valuesObject, modelKey, value, isMultiple = false) {\n        let key = this.valuesHasOwnProperty(valuesObject, modelKey)\n        if (key) {\n          // 处理多选数组\n          if (isMultiple && !Array.isArray(value)) {\n            value = (value || '').toString().trim()\n            value = value === '' ? [] : value.split(',')\n          }\n          this.$set(valuesObject, key, value)\n          return true\n        }\n        return false\n      },\n      valuesHasOwnProperty(values, ownProperty) {\n        let key = ownProperty\n        if (values.hasOwnProperty(key)) {\n          return key\n        }\n        if (values.hasOwnProperty(key + this.tempId)) {\n          return key + this.tempId\n        }\n        return null\n      },\n\n      /** 跳转到指定位置 */\n      // jumpToId(id, element) {\n      //   if (element == null) {\n      //     element = document.getElementById(id)\n      //   }\n      //   if (element != null) {\n      //     console.log(this.getElement('tbody').scrollTop, element.offsetTop)\n      //     this.getElement('tbody').scrollTop = element.offsetTop\n      //     console.log(this.getElement('tbody').scrollTop, element.offsetTop)\n      //   }\n      // },\n\n      /**\n       * 验证单个表单，异步版\n       *\n       * @param value 校验的值\n       * @param row 校验的行\n       * @param column 校验的列\n       * @param notPassedIds 没有通过校验的 id\n       * @param update 是否更新到vue中\n       * @param validType 校验触发的方式（input、blur等）\n       * @param callback\n       */\n      validateOneInputAsync(value, row, column, notPassedIds, update = false, validType = 'input', callback) {\n        let tooltips = Object.assign({}, this.tooltips)\n        // let notPassedIds = cloneObject(this.notPassedIds)\n        let inputId = column.key + row.id\n        tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {}\n\n        let [passed, message] = this.validateValue(column, value)\n\n        const nextThen = res => {\n          let [passed, message] = res\n          // !(passed == null && tooltips[inputId].visible != null)\n          if (passed != null) {\n            tooltips[inputId].visible = !passed\n            tooltips[inputId].passed = passed\n            let index = notPassedIds.indexOf(inputId)\n            if (!passed) {\n              tooltips[inputId].title = this.replaceProps(column, message)\n              if (index === -1) notPassedIds.push(inputId)\n            } else {\n              if (index !== -1) notPassedIds.splice(index, 1)\n            }\n          }\n          // 是否更新到data\n          if (update) {\n            this.tooltips = tooltips\n            this.notPassedIds = notPassedIds\n          }\n\n          if (typeof callback === 'function') {\n            callback([tooltips[inputId], notPassedIds])\n          }\n\n        }\n\n        if (typeof passed === 'function') {\n          let executed = false\n          passed(validType, value, { id: this.getCleanId(row.id) }, { ...column }, (flag, msg) => {\n            if (executed) return\n            executed = true\n            if (typeof msg === 'string') {\n              message = msg\n            }\n            if (flag == null) {\n              nextThen([true, message])\n            } else {\n              nextThen([!!flag, message])\n            }\n          }, this)\n        } else {\n          nextThen([passed, message])\n        }\n\n        return [tooltips[inputId], notPassedIds]\n      },\n\n      /** 验证单个表单 */\n      validateOneInput(value, row, column, notPassedIds, update = false, validType = 'input') {\n        return this.validateOneInputAsync(value, row, column, notPassedIds, update, validType)\n      },\n      /** 通过规则验证值是否正确 */\n      validateValue(column, value) {\n        let rules = column.validateRules\n        let passed = true, message = ''\n        // 判断有没有验证规则或验证规则格式正不正确，若条件不符合则默认通过\n        if (rules instanceof Array) {\n          for (let rule of rules) {\n            // 当前值是否为空\n            let isNull = (value == null || value === '')\n            // 验证规则：非空\n            if (rule.required === true && isNull) {\n              passed = false\n            } else // 使用 else-if 是为了防止一个 rule 中出现两个规则\n            // 验证规则：唯一校验\n            if (rule.unique === true || rule.pattern === 'only') {\n              let { values } = this.getValuesSync({ validate: false })\n              let findCount = 0\n              for (let val of values) {\n                if (val[column.key] === value) {\n                  if (++findCount >= 2) {\n                    passed = false\n                    break\n                  }\n                }\n              }\n            } else\n            // 验证规则：正则表达式\n            if (!!rule.pattern && !isNull) {\n\n              // 兼容 online 的规则\n              let foo = [\n                { title: '6到16位数字', value: 'n6-16', pattern: /^\\d{6,16}$/ },\n                { title: '6到16位任意字符', value: '*6-16', pattern: /^.{6,16}$/ },\n                { title: '6到18位字母', value: 's6-18', pattern: /^[a-z|A-Z]{6,18}$/ },\n                { title: '网址', value: 'url', pattern: /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/ },\n                { title: '电子邮件', value: 'e', pattern: /^([\\w]+\\.*)([\\w]+)@[\\w]+\\.\\w{3}(\\.\\w{2}|)$/ },\n                { title: '手机号码', value: 'm', pattern: /^1[3456789]\\d{9}$/ },\n                { title: '邮政编码', value: 'p', pattern: /^[0-9]{6}$/ },\n                { title: '字母', value: 's', pattern: /^[A-Z|a-z]+$/ },\n                { title: '数字', value: 'n', pattern: /^-?\\d+(\\.?\\d+|\\d?)$/ },\n                { title: '整数', value: 'z', pattern: /^-?\\d+$/ },\n                { title: '非空', value: '*', pattern: /^.+$/ },\n                { title: '金额', value: 'money', pattern: /^(([1-9][0-9]*)|([0]\\.\\d{0,2}|[1-9][0-9]*\\.\\d{0,2}))$/ },\n              ]\n              let flag = false\n              for (let item of foo) {\n                if (rule.pattern === item.value && item.pattern) {\n                  passed = new RegExp(item.pattern).test(value)\n                  flag = true\n                  break\n                }\n              }\n              if (!flag) passed = new RegExp(rule.pattern).test(value)\n            } else\n            // 校验规则：自定义函数校验\n            if (typeof rule.handler === 'function') {\n              return [rule.handler, rule.message]\n            }\n            // 如果没有通过验证，则跳出循环。如果通过了验证，则继续验证下一条规则\n            if (!passed) {\n              message = rule.message\n              break\n            }\n          }\n        }\n        return [passed, message]\n      },\n\n      /** 动态更新表单的值 */\n      updateFormValues() {\n        let trs = this.getElement('tbody').getElementsByClassName('tr')\n        let trEls = []\n        for (let tr of trs) {\n          trEls.push(tr)\n        }\n        // 获取新增的 tr\n        let newTrEls = trEls\n        if (this.visibleTrEls.length > 0) {\n          newTrEls = []\n          for (let tr of trEls) {\n            let isNewest = true\n            for (let vtr of this.visibleTrEls) {\n              if (vtr.id === tr.id) {\n                isNewest = false\n                break\n              }\n            }\n            if (isNewest) {\n              newTrEls.push(tr)\n            }\n          }\n        }\n        this.visibleTrEls = trEls\n        // 向新增的tr中赋值\n        newTrEls.forEach(tr => {\n          let { idx } = tr.dataset\n          let value = this.inputValues[idx]\n          for (let key in value) {\n            if (value.hasOwnProperty(key)) {\n              let elid = `${key}${value.id}`\n              let el = document.getElementById(elid)\n              if (el) {\n                el.value = value[key]\n              }\n            }\n          }\n        })\n      },\n      /** 强制更新FormValues */\n      forceUpdateFormValues() {\n        this.visibleTrEls = []\n        this.$forceUpdate()\n        this.$nextTick(() => this.updateFormValues())\n      },\n\n      // 重新计算所有统计列\n      recalcAllStatisticsColumns() {\n        if (this.hasStatisticsColumn) {\n          Object.keys(this.statisticsColumns).forEach(key => this.recalcOneStatisticsColumn(key))\n        }\n      },\n      // 重新计算单个统计列\n      recalcOneStatisticsColumn(key) {\n        if (this.hasStatisticsColumn) {\n          if (this.statisticsColumns.hasOwnProperty(key)) {\n            // 计算合计值\n            let count = 0\n            this.inputValues.forEach(item => {\n              let value = item[key]\n              if (value && count !== '-') {\n                try {\n                  count += Number.parseInt(value)\n                } catch (e) {\n                  count = '-'\n                }\n              }\n            })\n            this.statisticsColumns[key] = count\n          }\n        }\n      },\n\n      /** 获取某个统计字段的值 */\n      getStatisticsValue(key) {\n        if (this.hasStatisticsColumn) {\n          if (this.statisticsColumns.hasOwnProperty(key)) {\n            return this.statisticsColumns[key]\n          }\n        }\n        return null\n      },\n\n      /** 全选或取消全选 */\n      handleChangeCheckedAll() {\n        let selectedRowIds = []\n        if (!this.getSelectAll) {\n          this.rows.forEach(row => {\n            if ((this.disabledRowIds || []).indexOf(row.id) === -1) {\n              selectedRowIds.push(row.id)\n            }\n          })\n        }\n        this.selectedRowIds = selectedRowIds\n      },\n      /** 左侧行选择框change事件 */\n      handleChangeLeftCheckbox(event) {\n        let { id } = event.target\n\n        if ((this.disabledRowIds || []).indexOf(id) !== -1) {\n          return\n        }\n\n        let index = this.selectedRowIds.indexOf(id)\n        if (index !== -1) {\n          this.selectedRowIds.splice(index, 1)\n        } else {\n          this.selectedRowIds.push(id)\n        }\n\n      },\n      handleClickAdd() {\n        let {addRowNum, addIndex, addScrollToBottom} = this.settings\n        if (addIndex <= 0) {\n          this.add(addRowNum, addScrollToBottom)\n        } else {\n          this.insert(addIndex, addRowNum, addScrollToBottom)\n        }\n      },\n      handleConfirmDelete() {\n        this.removeSelectedRows()\n      },\n      handleClickClearSelection() {\n        this.clearSelection()\n      },\n      clearSelection() {\n        this.selectedRowIds = []\n      },\n      // 获取当前选中的行\n      getSelection() {\n        return this.selectedRowIds.map(id => this.getCleanId(id))\n      },\n      // 设置当前选中的行\n      async setSelection(selectedRowIds) {\n        if (Array.isArray(selectedRowIds) && selectedRowIds.length > 0) {\n          // 兼容IE\n          await this.getElementPromise('tbody')\n          await this.$nextTick()\n          this.selectedRowIds = selectedRowIds.map(id => {\n            let temp = id\n            if (!this.hasCaseId(id)) {\n              temp = this.caseId + id\n            }\n            return temp\n          })\n        }\n      },\n      // 切换全选状态\n      toggleSelectionAll() {\n        this.handleChangeCheckedAll()\n      },\n      /** 用于搜索下拉框中的内容 */\n      handleSelectFilterOption(input, option, column) {\n        if (column.allowSearch === true || column.allowInput === true) {\n          return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n        }\n        return true\n      },\n      /** select 搜索时的事件，用于动态添加options */\n      handleSearchSelect(value, id, row, col) {\n        if (col.allowSearch !== true && col.allowInput === true) {\n          // 是否找到了对应的项，找不到则添加这一项\n          let flag = false\n          for (let option of col.options) {\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              flag = true\n              break\n            }\n          }\n          // !!value ：不添加空值\n          if (!flag && !!value) {\n            // searchAdd 是否是通过搜索添加的\n            col.options.push({ title: value, value: value, searchAdd: true })\n          }\n\n        }\n      },\n      // blur 失去焦点\n      handleBlurSearch(value, id, row, col) {\n        if (col.allowInput === true) {\n          // 删除无用的因搜索（用户输入）而创建的项\n          if (typeof value === 'string') {\n            let indexs = []\n            col.options.forEach((option, index) => {\n              if (option.value.toLocaleString() === value.toLocaleString()) {\n                delete option.searchAdd\n              } else if (option.searchAdd === true) {\n                indexs.push(index)\n              }\n            })\n            // 翻转删除数组中的项\n            for (let index of indexs.reverse()) {\n              col.options.splice(index, 1)\n            }\n          }\n\n        }\n        // 做单个表单验证\n        this.validateOneInput(value, row, col, this.notPassedIds, true, 'blur')\n      },\n\n      /** 触发已拖动事件 */\n      emitDragged(oldIndex, newIndex) {\n        this.$emit('dragged', { oldIndex, newIndex, target: this })\n      },\n\n      handleDragMoveStart(event) {\n        this.dragging = true\n        this.$refs.scrollView.style.overflow = 'hidden'\n      },\n\n      /** 拖动结束，交换inputValue中的值 */\n      handleDragMoveEnd(event) {\n        this.dragging = false\n        this.$refs.scrollView.style.overflow = 'auto'\n\n        let { oldIndex, newIndex, item: { dataset: { idx: dataIdx } } } = event\n\n        // 由于动态显示隐藏行导致index有误差，需要算出真实的index\n        let diff = Number.parseInt(dataIdx) - oldIndex\n        oldIndex += diff\n        newIndex += diff\n\n        this.rowResort(oldIndex, newIndex)\n        this.emitDragged(oldIndex, newIndex)\n      },\n\n      /** 行重新排序 */\n      rowResort(oldIndex, newIndex) {\n        const sort = (array) => {\n          // 存储旧数据，并删除旧项目\n          let temp = array[oldIndex]\n          array.splice(oldIndex, 1)\n          // 向新项目里添加旧数据\n          array.splice(newIndex, 0, temp)\n        }\n\n        sort(this.rows)\n        sort(this.inputValues)\n\n        this.recalcSortNumber()\n\n        this.forceUpdateFormValues()\n      },\n\n      /** 重新计算排序字段的数值 */\n      recalcSortNumber() {\n        if (this.dragSort) {\n          // 重置排序字段\n          this.inputValues.forEach((val, idx) => val[this.dragSortKey] = (idx + 1))\n        }\n      },\n\n      /** 当前行向上移一位 */\n      _handleRowMoveUp(rowIndex) {\n        if (rowIndex > 0) {\n          let newIndex = rowIndex - 1\n          this.rowResort(rowIndex, newIndex)\n          this.emitDragged(rowIndex, newIndex)\n        }\n      },\n\n      /** 当前行向下移一位 */\n      _handleRowMoveDown(rowIndex) {\n        if (rowIndex < (this.rows.length - 1)) {\n          let newIndex = rowIndex + 1\n          this.rowResort(rowIndex, newIndex)\n          this.emitDragged(rowIndex, newIndex)\n        }\n      },\n\n      /** 在当前行下面插入一行 */\n      _handleRowInsertDown(rowIndex) {\n        let insertIndex = (rowIndex + 1)\n        this.insert(insertIndex)\n      },\n\n      /* --- common function begin --- */\n\n      /** input事件 */\n      handleInputCommono(target, index, row, column) {\n        let oldValue = this.inputValues[index][column.key] || ''\n        let { value, dataset, selectionStart } = target\n        let type = FormTypes.input\n        let change = true\n        if (`${dataset.inputNumber}` === 'true') {\n          type = FormTypes.inputNumber\n          // 判断输入的值是否匹配数字正则表达式，不匹配就还原\n          if (!/^-?\\d+\\.?\\d*$/.test(value) && (value !== '' && value !== '-')) {\n            change = false\n            value = oldValue\n            target.value = value\n            if (typeof selectionStart === 'number') {\n              target.selectionStart = selectionStart - 1\n              target.selectionEnd = selectionStart - 1\n            }\n          }\n        }\n        // 存储输入的值\n        this.inputValues[index][column.key] = value\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'input')\n\n        if (type === FormTypes.inputNumber) {\n          this.recalcOneStatisticsColumn(column.key)\n        }\n\n        // 触发valueChange 事件\n        if (change) {\n          this.elemValueChange(type, row, column, value)\n        }\n      },\n      /** slot Change */\n      handleChangeSlotCommon(value, id, row, column) {\n        this.slotValues = this.bindValuesChange(value, id, 'slotValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.slot, row, column, value)\n      },\n      handleBlurCommono(target, index, row, column) {\n        let { value, dataset } = target\n        if (dataset && `${dataset.inputNumber}` === 'true') {\n          // 判断输入的值是否匹配数字正则表达式，不匹配就置空\n          if (!/^-?\\d+\\.?\\d*$/.test(value)) {\n            value = ''\n          } else {\n            value = Number.parseFloat(value)\n          }\n          target.value = value\n        }\n        //update--begin--autor:lvdandan-----date:20201126------for：LOWCOD-1088 JEditableTable输入校验提示框位置偏移 #2005\n        setTimeout(()=>{\n          // 做单个表单验证\n          this.validateOneInput(value, row, column, this.notPassedIds, true, 'blur')\n        }, 100)\n        //update--end--autor:lvdandan-----date:20201126------for：LOWCOD-1088 JEditableTable输入校验提示框位置偏移 #2005\n      },\n      handleChangeCheckboxCommon(event, row, column) {\n        let { id, checked } = event.target\n        this.checkboxValues = this.bindValuesChange(checked, id, 'checkboxValues')\n\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.checkbox, row, column, checked)\n      },\n      handleChangeSelectCommon(value, id, row, column) {\n        this.selectValues = this.bindValuesChange(value, id, 'selectValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.select, row, column, value)\n      },\n      handleChangeJDateCommon(value, id, row, column, showTime) {\n        this.jdateValues = this.bindValuesChange(value, id, 'jdateValues')\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n\n        // 触发valueChange 事件\n        this.elemValueChange(column.type, row, column, value)\n      },\n      //部门组件值改变\n      handleChangeDepartCommon(value, id, row, column){\n        this.departCompValues = this.bindValuesChange(value, id, 'departCompValues')\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.sel_depart, row, column, value)\n      },\n      //用户组件值改变\n      handleChangeUserCommon(value, id, row, column){\n        this.userCompValues = this.bindValuesChange(value, id, 'userCompValues')\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.sel_user, row, column, value)\n      },\n      handleChangeJInputPopCommon(value, id, row, column){\n        this.jInputPopValues = this.bindValuesChange(value, id, 'jInputPopValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.input_pop, row, column, value)\n      },\n      handleChangeUpload(info, id, row, column) {\n        let { file } = info\n        let value = {\n          name: file.name,\n          type: file.type,\n          size: file.size,\n          status: file.status,\n          percent: file.percent\n        }\n        if (column.responseName && file.response) {\n          value['responseName'] = file.response[column.responseName]\n        }\n        if (file.status === 'done') {\n          if (typeof file.response.success === 'boolean') {\n            // 如果文件上传，被拦截器拦下，还会返回最外层的status = done\n            // 但是内部的success会返回false并携带异常信息\n            // 整个上传操作还是失败的\n            // https://github.com/zhangdaiscott/jeecg-boot/issues/2691\n            if (file.response.success) {\n              value['path'] = file.response[column.responseName]\n            } else {\n              value['status'] = 'error'\n              value['message'] = file.response.message || '未知错误'\n            }\n          } else {\n            // 考虑到如果设置action上传路径为非jeecg-boot后台，可能不会返回 success 属性的情况，就默认为成功\n            value['path'] = file.response[column.responseName]\n          }\n        } else if (file.status === 'error') {\n          value['message'] = file.response.message || '未知错误'\n        }\n        this.uploadValues = this.bindValuesChange(value, id, 'uploadValues')\n\n        // 触发valueChange 事件\n        this.elemValueChange(column.type, row, column, value)\n      },\n      handleMoreOperation(id,flag,column){\n        //update-begin-author:wangshuai date:20201021 for:LOWCOD-969 判断传过来的字段是否存在number，用于控制上传文件\n        if(column.number){\n          this.number = column.number;\n        }else{\n          this.number = 0;\n        }\n        //update-end-author:wangshuai date:20201021 for:LOWCOD-969 判断传过来的字段是否存在number，用于控制上传文件\n        if(column && column.fieldExtendJson){\n          let json = JSON.parse(column.fieldExtendJson);\n          this.number = json.uploadnum?json.uploadnum:0;\n        }\n        //console.log(\"this.uploadValues[id]\",this.uploadValues[id])\n        let path = ''\n        if(this.uploadValues && this.uploadValues[id]){\n          path = this.uploadValues[id].path\n        }\n        this.$refs.filePop.show(id,path,flag)\n      },\n      handleFileSuccess(obj){\n        if(obj.id){\n          this.uploadValues = this.bindValuesChange(obj, obj.id, 'uploadValues')\n        }\n      },\n      handleClickTableRow(event) {\n        let {target} = event\n        if (target.className === 'td' || target.className === 'tr') {\n          // 清空编辑状态\n          this.currentEditRows = {}\n        }\n      },\n      // 点击后编辑当前行\n      handleEditRow(row, col) {\n        if (this.alwaysEdit) {\n          return\n        }\n        // 将点击的组件置为可编辑并还原其他组件的编辑状态\n        this.currentEditRows = {\n          [row.id]: {\n            [col.key]: true\n          }\n        }\n        if (col.type === FormTypes.input || col.type === FormTypes.inputNumber) {\n          this.$nextTick(() => {\n            this.forceUpdateFormValues()\n            // 自动获取焦点\n            let el = document.getElementById(`${col.key}${row.id}`)\n            if (el) {\n              el.focus()\n            }\n          })\n        }\n      },\n\n      /** 添加按钮设置保存为默认值 */\n      onAddButtonSettingsSave() {\n        let obj = {\n          addRowNum: this.settings.addRowNum,\n          addIndex: this.settings.addIndex,\n          addScrollToBottom: this.settings.addScrollToBottom,\n        }\n        this.$ls.set('jet-add-btn-settings', obj)\n        this.$message.success('保存成功')\n      },\n      /** 获取保存的添加按钮默认值 */\n      getSavedAddButtonSettings() {\n        let obj= this.$ls.get('jet-add-btn-settings')\n        if (obj) {\n          Object.assign(this.settings, obj)\n        }\n      },\n\n      /** 记录用到数据绑定的组件的值 */\n      bindValuesChange(value, id, key) {\n        this.$set(this[key], id, value)\n        return this[key]\n      },\n\n      /** value 触发valueChange事件 */\n      elemValueChange(type, rowSource, columnSource, value) {\n        let column = Object.assign({}, columnSource)\n        // 将caseId去除\n        let row = Object.assign({}, rowSource)\n        row.id = this.getCleanId(row.id)\n        // 获取整行的数据\n        let { values } = this.getValuesSync({ validate: false, rowIds: [row.id] })\n        if (values.length > 0) {\n          Object.assign(row, values[0])\n        }\n        this.$emit('valueChange', { type, row, column, value, target: this })\n      },\n\n      /** 获取干净的ID（不包含任何杂质的ID） */\n      getCleanId(id) {\n        id = this.removeCaseId(id)\n        id = this.removeTempId(id)\n        return id\n      },\n\n      /** 判断某个ID是否包含了caseId */\n      hasCaseId(id) {\n        return id && id.startsWith(this.caseId)\n      },\n\n      /** 将caseId去除 */\n      removeCaseId(id) {\n        if (this.hasCaseId(id)) {\n          return id.substring(this.caseId.length, id.length)\n        }\n        return id\n      },\n\n      // 判断 id 是否是临时Id\n      isTempId(id) {\n        return (id || '').endsWith(this.tempId)\n      },\n\n      /** 将tempId去除 */\n      removeTempId(id) {\n        if (this.isTempId(id)) {\n          return id.substring(0, id.length - this.tempId.length)\n        }\n        return id;\n      },\n\n      handleClickDelFile(id, row, col) {\n        this.uploadValues[id] = null\n        this.elemValueChange(col.type, row, col, null);\n      },\n      handleClickDownloadFile(id) {\n        let { path } = this.uploadValues[id] || {}\n        if (path) {\n          let url = getFileAccessHttpUrl(path)\n          window.open(url)\n        }\n      },\n      handleClickDownFileByUrl(id){\n        let { url,path } = this.uploadValues[id] || {}\n        if (!url || url.length===0) {\n          if(path && path.length>0){\n            url = getFileAccessHttpUrl(path.split(',')[0])\n          }\n        }\n        if(url){\n          window.open(url)\n        }\n      },\n      handleClickShowImageError(id) {\n        let currUploadObj = this.uploadValues[id] || null\n        if (currUploadObj && currUploadObj['message']) {\n          this.$error({ title: '上传出错', content: '错误信息：' + currUploadObj['message'], maskClosable: true })\n        }\n      },\n\n      /** 加载数据字典并合并到 options */\n      _loadDictConcatToOptions(column) {\n        initDictOptions(column.dictCode).then((res) => {\n          if (res.success) {\n            let newOptions = (column.options || [])// .concat(res.result)\n            res.result.forEach(item => {\n              // 过滤重复数据\n              for (let option of newOptions) if (option.value === item.value) return\n              newOptions.push(item)\n            })\n            this.$set(column, 'options', newOptions)\n          } else {\n            console.group(`JEditableTable 查询字典(${column.dictCode})发生异常`)\n            console.log(res.message)\n            console.groupEnd()\n          }\n        })\n      },\n\n      /* --- common function end --- */\n\n      /* --- 以下是辅助方法，多用于动态构造页面中的数据 --- */\n\n      /** 辅助方法：打印日志 */\n      log() {\n        if (this.$attrs.logger) {\n          console.log.apply(null, arguments)\n        }\n      },\n\n      getVM() {\n        return this\n      },\n\n      /** 辅助方法：动态构造Tooltip的Props，防止出现不消失的情况 */\n      buildTooltipProps(row, col, id) {\n        let {notPassedIds, tooltips} = this\n        let props = {\n          title: (tooltips[id] || {}).title,\n          placement: 'top',\n          autoAdjustOverflow: true,\n          getPopupContainer: this.getParentContainer,\n          class: {\n            'j-check-failed': false\n          },\n        }\n        let isCheckFailed = notPassedIds.includes(id)\n        if (isCheckFailed) {\n          props.class['j-check-failed'] = true\n        } else {\n          props['visible'] = false\n        }\n        return props\n      },\n\n      /** 辅助方法：指定a-select 和 j-data 的父容器 */\n      getParentContainer(node) {\n        let element = (() => {\n          // nodeType 8\t: Comment\t: 注释\n          if (this.$el && this.$el.nodeType !== 8) {\n            return this.$el\n          }\n          let doc = document.getElementById(this.caseId + 'inputTable')\n          if (doc != null) {\n            return doc\n          }\n          return node.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode\n        })()\n\n        // 递归判断是否带有 overflow: hidden；的父元素\n        const ifParent = (child) => {\n          let currentOverflow = null\n          if (child['currentStyle']) {\n            currentOverflow = child['currentStyle']['overflow']\n          } else if (window.getComputedStyle) {\n            currentOverflow = window.getComputedStyle(child)['overflow']\n          }\n          if (currentOverflow != null) {\n            if (currentOverflow === 'hidden') {\n              // 找到了带有 hidden 的标签，判断它的父级是否还有 hidden，直到遇到完全没有 hidden 或 body 的时候才停止递归\n              let temp = ifParent(child.parentNode)\n              return temp != null ? temp : child.parentNode\n            } else\n            // 当前标签没有 hidden ，如果有父级并且父级不是 body 的话就继续递归判断父级\n            if (child.parentNode && child.parentNode.tagName.toLocaleLowerCase() !== 'body') {\n              return ifParent(child.parentNode)\n            } else {\n              // 直到 body 都没有遇到有 hidden 的标签\n              return null\n            }\n          } else {\n            return child\n          }\n        }\n\n        let temp = ifParent(element)\n        return (temp != null) ? temp : element\n      },\n\n      /** 辅助方法：替换${...}变量 */\n      replaceProps(col, value) {\n        if (value && typeof value === 'string') {\n          value = value.replace(/\\${title}/g, col.title)\n          value = value.replace(/\\${key}/g, col.key)\n          value = value.replace(/\\${defaultValue}/g, col.defaultValue)\n        }\n        return value\n      },\n\n      /** view辅助方法：构建 tr style */\n      buildTrStyle(index) {\n        return {\n          'top': `${rowHeight * index}px`\n        }\n      },\n      /** view辅助方法：构建 td style */\n      buildTdStyle(col) {\n        const isEmptyWidth = (column) => (column.type === FormTypes.hidden || column.width === '0px' || column.width === '0' || column.width === 0)\n\n        let style = {}\n        // 计算宽度\n        if (col.width) {\n          style['width'] = col.width\n        } else if (this.columns) {\n          style['width'] = `${(100 - 4 * 2) / (this.columns.filter(column => !isEmptyWidth(column))).length}%`\n        } else {\n          style['width'] = '120px'\n        }\n        //update-begin-author:lvdandan date:20201116 for:LOWCOD-984 默认风格功能测试附表样式问题 日期时间控件长度太大\n        //如果是时间控件设为200px\n        if(col.type === FormTypes.datetime){\n          style['width'] = '200px'\n        }\n        if(col.type === FormTypes.sel_user && !col.width){\n          style['width'] = '220px'\n        }\n        if(col.type === FormTypes.sel_depart && !col.width){\n          style['width'] = '160px'\n        }\n        //update-end-author:lvdandan date:20201116 for:LOWCOD-984 默认风格功能测试附表样式问题 日期时间控件长度太大\n\n        // checkbox 居中显示\n        let isCheckbox = col.type === FormTypes.checkbox\n        if (isCheckbox) {\n          style['align-items'] = 'center'\n          style['text-align'] = 'center'\n          style['padding-left'] = '0'\n          style['padding-right'] = '0'\n        }\n        if (isEmptyWidth(col)) {\n          style['padding-left'] = '0'\n          style['padding-right'] = '0'\n        }\n        return style\n      },\n      /** view辅助方法：构造props */\n      buildProps(row, col) {\n        let props = {}\n        // 解析props\n        if (typeof col.props === 'object') {\n          for (let prop in col.props) {\n            if (col.props.hasOwnProperty(prop)) {\n              props[prop] = this.replaceProps(col, col.props[prop])\n            }\n          }\n        }\n        // 判断select是否允许输入\n        if (col.type === FormTypes.select && (col.allowInput === true || col.allowSearch === true)) {\n          props['showSearch'] = true\n        }\n        if (col.type === FormTypes.sel_depart || col.type === FormTypes.sel_user) {\n          let { storeField, textField } = this.getStoreAndTextField(col)\n          props['store'] = storeField\n          props['text'] = textField\n        }\n\n        // 判断是否是禁用的列\n        props['disabled'] = (typeof col['disabled'] === 'boolean' ? col['disabled'] : props['disabled'])\n\n        // 判断是否为禁用的行\n        if (props['disabled'] !== true) {\n          props['disabled'] = ((this.disabledRowIds || []).indexOf(row.id) !== -1)\n        }\n\n        // 判断是否禁用全部组件\n        if (this.disabled === true) {\n          props['disabled'] = true\n        }\n\n        return props\n      },\n\n      /**获取部门选择 、用户选择的存储字段、展示字段*/\n      getStoreAndTextField(col){\n        let storeField = '', textField = ''\n        if(col.type === FormTypes.sel_depart){\n          storeField = 'id'\n          textField = 'departName'\n        }else if(col.type === FormTypes.sel_user){\n          storeField = 'username'\n          textField = 'realname'\n        }\n        if(col.fieldExtendJson){\n          // online逻辑\n          let tempJson = JSON.parse(col.fieldExtendJson)\n          if(tempJson){\n            if(tempJson.store){\n              storeField = tempJson.store\n            }\n            if(tempJson.text){\n              textField = tempJson.text\n            }\n          }\n        }else{\n          // 实际开发逻辑\n          if(col.store){\n            storeField = col.store\n          }\n          if(col.text){\n            textField = col.text\n          }\n        }\n        return {\n          storeField,\n          textField\n        }\n      },\n\n      /** 辅助方法：防止过快点击，如果点击过快的话就返回 true */\n      checkTooFastClick(key = 'default', ms = 300) {\n        let nowTime = Date.now()\n        let lastTime = this.lastPushTimeMap.get(key)\n        if (!lastTime) {\n          lastTime = nowTime\n          this.lastPushTimeMap.set(key, nowTime)\n          return false\n        }\n        let diffTime = nowTime - lastTime\n        if (diffTime <= ms) {\n          this.$message.warn('你点击的太快了，请慢点点击!')\n          return true\n        }\n        this.lastPushTimeMap.set(key, nowTime)\n        return false\n      },\n\n      /** upload 辅助方法：获取 headers */\n      uploadGetHeaders(row, column) {\n        let headers = {}\n        if (column.token === true) {\n          headers['X-Access-Token'] = this.accessToken\n        }\n        return headers\n      },\n      /** 上传请求地址 */\n      getUploadAction(value) {\n        if (!value) {\n          return window._CONFIG['domianURL'] + '/sys/common/upload'\n        } else {\n          return value\n        }\n      },\n      /** 预览图片地址 */\n      getCellImageView(id) {\n        let currUploadObj = this.uploadValues[id] || null\n        if (currUploadObj) {\n          if(currUploadObj['url']){\n            return currUploadObj['url'];\n          }else if(currUploadObj['path']){\n            let readpath = currUploadObj['path'].split(',')[0]\n            return getFileAccessHttpUrl(readpath)\n          }\n        }\n        return ''\n      },\n      /** popup回调 */\n      popupCallback(value, others, id, row, column, index) {\n        // 存储输入的值\n        let popupValue = value\n        if (others) {\n          let rowKey = this.getCleanId(row.id)\n          let setValueItem = {rowKey, values: {}}\n          Object.keys(others).forEach(key => {\n            // 当前列直接赋值，其他列通过setValues赋值\n            if (key === column.key) {\n              popupValue = others[key]\n            } else {\n              setValueItem.values[key] = others[key]\n            }\n          })\n          if (Object.keys(setValueItem).length > 0) {\n            this.setValues([setValueItem])\n          }\n        }\n        this.setOneValue(this.popupValues, id, popupValue)\n        // 做单个表单验证\n        this.validateOneInput(popupValue, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange('input', row, column, value)\n      },\n      /** popup输入框回显 */\n      getPopupValue(id) {\n        return this.popupValues[id]\n      },\n      handleRadioChange(value, id, row, column) {\n        this.radioValues = this.bindValuesChange(value, id, 'radioValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.radio, row, column, value)\n      },\n      handleMultiSelectChange(value, id, row, column) {\n        this.multiSelectValues = this.bindValuesChange(value, id, 'multiSelectValues')\n        // 做单个表单验证\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        // 触发valueChange 事件\n        this.elemValueChange(FormTypes.list_multi, row, column, value)\n      },\n      handleSearchSelectChange(value, id, row, column) {\n        this.searchSelectValues = this.bindValuesChange(value, id, 'searchSelectValues')\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        this.elemValueChange(FormTypes.sel_search, row, column, value)\n      },\n      handleSearchSelectAsyncChange(value, id, row, column) {\n        this.searchSelectAsyncValues = this.bindValuesChange(value, id, 'searchSelectAsyncValues')\n        this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n        this.elemValueChange(FormTypes.sel_search_async, row, column, value)\n      },\n      filterOption(input, option) {\n        return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n      },\n      getEllipsisWord(content, len){\n        if(!content || content.length === 0){\n          return ''\n        }\n        if(content.length>len){\n          return content.substr(0,len)\n        }\n        return content;\n      },\n\n      /* --------------------------- 2020年5月18日 默认span模式 ------------------------------ */\n\n      /** 获取Select等组件翻译后的文本 */\n      getSelectTranslateText(value, row, col) {\n        // 翻译支持单选和多选（数组、逗号分割）\n        return filterDictText(col.options, value)\n      },\n\n      // 判定当前行是否是正在编辑的\n      isEditRow(row, col) {\n        if (this.alwaysEdit) {\n          return true\n        }\n        let current = this.currentEditRows[row.id]\n        return !!(current && current[col.key] === true)\n      },\n\n      /* ---- 事件监听 ---- */\n\n      // 鼠标弹起事件，用于清空输入状态\n      handleMouseup(event) {\n        if (this.alwaysEdit || Object.keys(this.currentEditRows).length === 0) {\n          return\n        }\n        // console.log(this.caseId + 'handleMouseup: ', event)\n        let {target} = event\n        if (!target){\n          return\n        }\n        let className = target.className || ''\n        if (typeof className === 'string') {\n          // 点击的标签是span\n          if (className.includes('j-td-span') && className.includes('no-edit')) {\n            return\n          }\n          // 点击的标签是下拉\n          if (className.includes('ant-select-dropdown-menu-item')) {\n            return\n          }\n        }\n\n        // 事件冒泡路径\n        let path = getEventPath(event)\n        for (let p of path) {\n          // 如果点击的是 tr 就不处理（tr单独处理）\n          if ((p.id || '').startsWith(`${this.caseId}tbody-tr`)) {\n            return\n          }\n          let pClassName = p.className || ''\n          pClassName = typeof pClassName === 'string' ? pClassName : pClassName.toString()\n\n          /* --- 特殊处理以下组件，点击以下标签时不清空编辑状态 --- */\n\n          // 点击的标签是JInputPop\n          if (pClassName.includes('j-input-pop')) {\n            return\n          }\n          // 点击的标签是JPopup的弹出层\n          if (pClassName.includes('j-popup-modal')) {\n            return\n          }\n          // 点击的标签是日期选择器的弹出层\n          if (pClassName.includes('j-date-picker') || pClassName.includes('ant-calendar-picker-container')) {\n            return\n          }\n\n        }\n        // 清空编辑状态\n        this.currentEditRows = {}\n      },\n\n      // 添加事件监听\n      addEventListener() {\n        window.addEventListener('mouseup', this.handleMouseup)\n      },\n      // 移除事件监听\n      removeEventListener() {\n        window.removeEventListener('mouseup', this.handleMouseup)\n      },\n      /* --------------------------- 2020年5月18日 默认span模式 ------------------------------ */\n\n      //获取没有授权的按钮编码\n      loadExcludeCode(){\n        if(!this.authPre || this.authPre.length==0){\n          this.excludeCode = []\n        }else{\n          let pre = this.authPre\n          if(!pre.endsWith(':')){\n            pre += ':'\n          }\n          this.excludeCode = getNoAuthCols(pre)\n        }\n      },\n      //判断button是否显示\n      buttonPermission(code){\n        if(!this.excludeCode || this.excludeCode.length==0){\n          return true\n        }else{\n          return this.excludeCode.indexOf(code)<0\n        }\n      },\n      // 判断用户、部门组件是否多选\n      isMultipleSelect(column){\n        let jsonStr = column.fieldExtendJson\n        if(jsonStr){\n          // online\n          let config = JSON.parse(jsonStr)\n          if(config && config['multiSelect']==false){\n            return false\n          }\n        }else if(column.multi==false){\n          // 实际开发\n          return false\n        }\n        return true;\n      },\n      // 根据id获取dataSource中的一行数据\n      getOriginData(id){\n        return this.dataSource.filter(item=>item.id == id);\n      },\n\n    },\n    beforeDestroy() {\n      this.removeEventListener()\n      this.destroyCleanGroupRequest = true\n    }\n\n  }\n</script>\n\n<style lang=\"less\" scoped>\n\n  .action-button {\n    margin-bottom: 8px;\n\n    .gap {\n      padding-left: 8px;\n    }\n\n  }\n\n  /* 设定边框参数 */\n  @borderColor: #e8e8e8;\n  @border: 1px solid @borderColor;\n  /* tr & td 之间的间距 */\n  @spacing: 8px;\n\n  .input-table {\n    max-width: 100%;\n    overflow-x: hidden;\n    overflow-y: hidden;\n    position: relative;\n    border: @border;\n\n    .thead, .tbody {\n\n      .tr, .td {\n        display: flex;\n      }\n\n      .td {\n\n        /*border-right: 1px solid red;*/\n        /*color: white;*/\n        /*background-color: black;*/\n        /*margin-right: @spacing !important;*/\n\n        padding-left: @spacing;\n        flex-direction: column;\n\n        &.td-cb, &.td-num {\n          width: 45px;\n          min-width: 45px;\n          max-width: 50px;\n          margin-right: 0;\n          padding-left: 0;\n          padding-right: 0;\n          justify-content: center;\n          align-items: center;\n        }\n\n        &.td-ds {\n          width: 30px;\n          min-width: 30px;\n          max-width: 35px;\n          margin-right: 0;\n          padding-left: 0;\n          padding-right: 0;\n          justify-content: center;\n          align-items: center;\n\n          .td-ds-icons {\n            position: relative;\n            cursor: move;\n            width: 100%;\n            /*padding: 25% 0;*/\n            height: 100%;\n\n            .anticon-align-left,\n            .anticon-align-right {\n              position: absolute;\n              top: 30%;\n            }\n\n            .anticon-align-left {\n              left: 25%;\n            }\n\n            .anticon-align-right {\n              right: 25%;\n            }\n          }\n\n\n        }\n\n      }\n\n    }\n\n    .thead {\n      overflow-y: scroll;\n      overflow-x: hidden;\n      border-bottom: @border;\n\n      /** 隐藏thead的滑块   */\n\n      &::-webkit-scrollbar-thumb {\n        box-shadow: none !important;\n        background-color: transparent !important;\n      }\n\n      .tr {\n        min-width: 100%;\n        overflow-y: scroll;\n      }\n\n      .td {\n        /*flex: 1;*/\n        padding: 8px @spacing;\n        justify-content: center;\n      }\n\n    }\n\n    .tbody {\n      position: relative;\n      top: 0;\n      left: 0;\n      overflow-x: hidden;\n      overflow-y: hidden;\n      min-height: 61px;\n      /*max-height: 400px;*/\n      min-width: 100%;\n\n      .tr-nodata {\n        color: #999;\n        line-height: 61px;\n        text-align: center;\n      }\n\n      .tr {\n        /*line-height: 50px;*/\n\n        border-bottom: @border;\n        transition: background-color 300ms;\n        width: 100%;\n        height: 61px;\n        overflow: hidden;\n        position: absolute;\n        left: 0;\n        z-index: 10;\n\n        &.tr-checked {\n          background-color: #fafafa;\n        }\n\n        &:hover {\n          background-color: #E6F7FF;\n        }\n\n      }\n\n      .tr-expand {\n        position: relative;\n        z-index: 9;\n        background-color: white;\n      }\n\n      .td {\n        /*flex: 1;*/\n        padding: 14px @spacing 14px 0;\n        justify-content: center;\n\n        &:last-child {\n          padding-right: @spacing;\n        }\n\n        input {\n          font-variant: tabular-nums;\n          box-sizing: border-box;\n          margin: 0;\n          list-style: none;\n          position: relative;\n          display: inline-block;\n          padding: 4px 11px;\n          width: 100%;\n          height: 32px;\n          font-size: 14px;\n          line-height: 1.5;\n          color: rgba(0, 0, 0, 0.65);\n          background-color: #fff;\n          border: 1px solid #d9d9d9;\n          border-radius: 4px;\n          transition: all 0.3s;\n          outline: none;\n\n          &:hover {\n            border-color: #4D90FE\n          }\n\n          &:focus {\n            border-color: #40a9ff;\n            box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n            border-right-width: 1px !important;\n          }\n\n          &:disabled {\n            color: rgba(0, 0, 0, 0.25);\n            background: #f5f5f5;\n            cursor: not-allowed;\n          }\n\n          /* 设置placeholder的颜色 */\n\n          &::-webkit-input-placeholder { /* WebKit browsers */\n            color: #ccc;\n          }\n\n          &:-moz-placeholder { /* Mozilla Firefox 4 to 18 */\n            color: #ccc;\n          }\n\n          &::-moz-placeholder { /* Mozilla Firefox 19+ */\n            color: #ccc;\n          }\n\n          &:-ms-input-placeholder { /* Internet Explorer 10+ */\n            color: #ccc;\n          }\n\n        }\n\n        .j-editable-image {\n          height: 32px;\n          max-width: 100px !important;\n          cursor: pointer;\n\n          &:hover {\n            opacity: 0.8;\n          }\n\n          &:active {\n            opacity: 0.6;\n          }\n\n        }\n\n        /* --------------------------- 2020年5月18日 begin 默认span模式 ------------------------------ */\n\n        label {\n          height: 32px;\n\n          &.ant-checkbox-wrapper {\n            height: auto;\n          }\n        }\n\n        .comp-normal {\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n\n        .j-td-span {\n          position: relative;\n          padding: 4px 11px;\n          border: 1px solid transparent;\n          display: inline-block;\n          width: 100%;\n          max-width: 100%;\n          height: 32px;\n          cursor: text;\n          transition: all 0.3s;\n          box-sizing: border-box;\n          font-size: 14px;\n          line-height: 1.5;\n          color: rgba(0, 0, 0, 0.65);\n          border-radius: 4px;\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n\n          &:hover {\n            background-color: white;\n          }\n\n          &.disabled {\n            cursor: not-allowed;\n\n            &:hover {\n              color: rgba(0, 0, 0, 0.25);\n              background-color: #F5F5F5;\n            }\n          }\n\n        }\n\n        /* --------------------------- 2020年5月18日 end 默认span模式 ------------------------------ */\n\n        /* --------------------------- 2020年5月28日 begin 新增校验未通过的样式 ------------------------------ */\n\n        .j-check-failed.j-td-span {\n          background-color: rgba(255, 0, 0, 0.05);\n\n          &:hover {\n            background-color: rgba(255, 0, 0, 0.1);\n          }\n        }\n\n        .j-check-failed.j-td-span,\n        input.j-check-failed,\n        .j-check-failed /deep/ input,\n        .ant-select.j-check-failed /deep/ .ant-select-selection,\n        .ant-upload.j-check-failed /deep/ .ant-btn {\n          border-color: red;\n          box-shadow: 0 0 0 2px rgba(255, 0, 0, 0.2);\n        }\n\n        /* --------------------------- 2020年5月28日 end 新增校验未通过的样式 ------------------------------ */\n\n      }\n\n    }\n\n    .scroll-view {\n      overflow: auto;\n      overflow-y: scroll;\n    }\n\n    .thead, .thead .tr, .scroll-view {\n      @scrollBarSize: 6px;\n      /* 定义滚动条高宽及背景 高宽分别对应横竖滚动条的尺寸*/\n\n      &::-webkit-scrollbar {\n        width: @scrollBarSize;\n        height: @scrollBarSize;\n        background-color: transparent;\n      }\n\n      /* 定义滚动条轨道 */\n\n      &::-webkit-scrollbar-track {\n        background-color: #f0f0f0;\n      }\n\n      /* 定义滑块 */\n\n      &::-webkit-scrollbar-thumb {\n        background-color: #eee;\n        box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n\n        &:hover {\n          background-color: #bbb;\n        }\n\n        &:active {\n          background-color: #888;\n        }\n      }\n\n    }\n\n    .thead .tr {\n\n      &::-webkit-scrollbar-track {\n        background-color: transparent;\n      }\n\n      /* IE模式下隐藏 */\n      -ms-overflow-style: none;\n      -ms-scroll-chaining: chained;\n      -ms-content-zooming: zoom;\n      -ms-scroll-rails: none;\n      -ms-content-zoom-limit-min: 100%;\n      -ms-content-zoom-limit-max: 500%;\n      -ms-scroll-snap-type: proximity;\n      -ms-scroll-snap-points-x: snapList(100%, 200%, 300%, 400%, 500%);\n    }\n\n  }\n\n</style>\n<style lang=\"less\">\n// 新增按钮配置气泡的样式\n.j-add-btn-settings {\n  width: 240px;\n\n  .ant-form {\n    .ant-form-item {\n      margin-bottom: 0;\n\n      .ant-input-number {\n        width: 100%;\n      }\n    }\n  }\n}\n</style>\n"],"sourceRoot":"src/components/jeecg"}]}