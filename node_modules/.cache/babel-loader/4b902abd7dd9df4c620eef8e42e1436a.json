{"remainingRequest":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\dict\\JMultiSelectTag.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\src\\components\\dict\\JMultiSelectTag.vue","mtime":1665386876000},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\babel-loader\\lib\\index.js","mtime":1665642924601},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665642925904},{"path":"D:\\云晟\\前端\\ant-design-vue-jeecg-464dd20b46384272b779e066c2f4fcdfa718b326\\node_modules\\vue-loader\\lib\\index.js","mtime":1665642924058}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { ajaxGetDictItems, getDictItemsFromCache } from '@/api/api';\nexport default {\n  name: 'JMultiSelectTag',\n  props: {\n    dictCode: String,\n    placeholder: String,\n    disabled: Boolean,\n    value: String,\n    type: String,\n    options: Array,\n    spliter: {\n      type: String,\n      required: false,\n      default: ','\n    },\n    popContainer: {\n      type: String,\n      default: '',\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      dictOptions: [],\n      tagType: \"\",\n      arrayValue: !this.value ? [] : this.value.split(this.spliter)\n    };\n  },\n  created: function created() {\n    if (!this.type || this.type === \"list_multi\") {\n      this.tagType = \"select\";\n    } else {\n      this.tagType = this.type;\n    } //获取字典数据\n    //this.initDictData();\n\n  },\n  watch: {\n    options: function options(val) {\n      this.setCurrentDictOptions(val);\n    },\n    dictCode: {\n      immediate: true,\n      handler: function handler() {\n        this.initDictData();\n      }\n    },\n    value: function value(val) {\n      if (!val) {\n        this.arrayValue = [];\n      } else {\n        this.arrayValue = this.value.split(this.spliter);\n      }\n    }\n  },\n  methods: {\n    initDictData: function initDictData() {\n      var _this = this;\n\n      if (this.options && this.options.length > 0) {\n        this.dictOptions = _toConsumableArray(this.options);\n      } else {\n        //优先从缓存中读取字典配置\n        var cacheOption = getDictItemsFromCache(this.dictCode);\n\n        if (cacheOption && cacheOption.length > 0) {\n          this.dictOptions = cacheOption;\n          return;\n        } //根据字典Code, 初始化字典数组\n\n\n        ajaxGetDictItems(this.dictCode, null).then(function (res) {\n          if (res.success) {\n            _this.dictOptions = res.result;\n          }\n        });\n      }\n    },\n    onChange: function onChange(selectedValue) {\n      this.$emit('change', selectedValue.join(this.spliter));\n    },\n    setCurrentDictOptions: function setCurrentDictOptions(dictOptions) {\n      this.dictOptions = dictOptions;\n    },\n    getCurrentDictOptions: function getCurrentDictOptions() {\n      return this.dictOptions;\n    },\n    getParentContainer: function getParentContainer(node) {\n      if (!this.popContainer) {\n        return node.parentNode;\n      } else {\n        return document.querySelector(this.popContainer);\n      }\n    },\n    // update--begin--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\n    filterOption: function filterOption(input, option) {\n      return option.componentOptions.children[0].children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n    } // update--end--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\n\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n};",{"version":3,"sources":["JMultiSelectTag.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <a-checkbox-group v-if=\"tagType=='checkbox'\" @change=\"onChange\" :value=\"arrayValue\" :disabled=\"disabled\">\n    <a-checkbox v-for=\"(item, key) in dictOptions\" :key=\"key\" :value=\"item.value\">{{ item.text || item.label }}</a-checkbox>\n  </a-checkbox-group>\n\n  <a-select\n    v-else-if=\"tagType=='select'\"\n    :value=\"arrayValue\"\n    @change=\"onChange\"\n    :disabled=\"disabled\"\n    mode=\"multiple\"\n    :placeholder=\"placeholder\"\n    :getPopupContainer=\"getParentContainer\"\n    optionFilterProp=\"children\"\n    :filterOption=\"filterOption\"\n    allowClear>\n    <a-select-option\n      v-for=\"(item,index) in dictOptions\"\n      :key=\"index\"\n      :value=\"item.value\">\n      <span style=\"display: inline-block;width: 100%\" :title=\" item.text || item.label \">\n        {{ item.text || item.label }}\n      </span>\n    </a-select-option>\n  </a-select>\n\n</template>\n\n<script>\n  import {ajaxGetDictItems,getDictItemsFromCache} from '@/api/api'\n  export default {\n    name: 'JMultiSelectTag',\n    props: {\n      dictCode: String,\n      placeholder: String,\n      disabled: Boolean,\n      value: String,\n      type: String,\n      options:Array,\n      spliter:{\n        type: String,\n        required: false,\n        default: ','\n      },\n      popContainer:{\n        type:String,\n        default:'',\n        required:false\n      },\n    },\n    data() {\n      return {\n        dictOptions: [],\n        tagType:\"\",\n        arrayValue:!this.value?[]:this.value.split(this.spliter)\n      }\n    },\n    created() {\n      if(!this.type || this.type===\"list_multi\"){\n        this.tagType = \"select\"\n      }else{\n        this.tagType = this.type\n      }\n      //获取字典数据\n      //this.initDictData();\n    },\n    watch:{\n      options: function(val){\n        this.setCurrentDictOptions(val);\n      },\n      dictCode:{\n        immediate:true,\n        handler() {\n          this.initDictData()\n        },\n      },\n      value (val) {\n        if(!val){\n          this.arrayValue = []\n        }else{\n          this.arrayValue = this.value.split(this.spliter)\n        }\n      }\n    },\n    methods: {\n      initDictData() {\n        if(this.options && this.options.length>0){\n          this.dictOptions = [...this.options]\n        }else{\n          //优先从缓存中读取字典配置\n          let cacheOption = getDictItemsFromCache(this.dictCode)\n          if(cacheOption && cacheOption.length>0){\n            this.dictOptions = cacheOption\n            return\n          }\n          //根据字典Code, 初始化字典数组\n          ajaxGetDictItems(this.dictCode, null).then((res) => {\n            if (res.success) {\n              this.dictOptions = res.result;\n            }\n          })\n        }\n\n      },\n      onChange (selectedValue) {\n        this.$emit('change', selectedValue.join(this.spliter));\n      },\n      setCurrentDictOptions(dictOptions){\n        this.dictOptions = dictOptions\n      },\n      getCurrentDictOptions(){\n        return this.dictOptions\n      },\n      getParentContainer(node){\n        if(!this.popContainer){\n          return node.parentNode\n        }else{\n          return document.querySelector(this.popContainer)\n        }\n      },\n      // update--begin--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\n      filterOption(input, option) {\n        return option.componentOptions.children[0].children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n      }\n      // update--end--autor:lvdandan-----date:20201120------for：LOWCOD-1086 下拉多选框,搜索时只字典code进行搜索不能通过字典text搜索\n    },\n    model: {\n      prop: 'value',\n      event: 'change'\n    }\n  }\n</script>\n"],"sourceRoot":"src/components/dict"}]}